using System.Net;
using Samples.AspNetCore.Mvc;
using Sentry.Extensibility;

var builder = WebApplication.CreateBuilder(args);

// Example integration with advanced configuration scenarios. The 'options' parameter is populated through the
// configuration system, which includes anything defined on the ConfigurationBuilder ('appsettings.json', environment
// variables etc.)
// See: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-8.0
builder.WebHost.UseSentry(options =>
    {
        // Tracks the release which sent the event and enables more features: https://docs.sentry.io/learn/releases/
        // If not explicitly set here, the SDK attempts to read it from: AssemblyInformationalVersionAttribute and AssemblyVersion
        // TeamCity: %build.vcs.number%, VSTS: BUILD_SOURCEVERSION, Travis-CI: TRAVIS_COMMIT, AppVeyor: APPVEYOR_REPO_COMMIT, CircleCI: CIRCLE_SHA1
        options.Release = "e386dfd"; // Could also be any format, such as: 2.0.1 or whatever you use to version your app

        options.MaxBreadcrumbs = 200;

        options.EnableTracing = true;

        // Set a proxy for outgoing HTTP connections
        options.HttpProxy = null; // new WebProxy("https://localhost:3128");

        // Example: Disabling support to compressed responses:
        options.DecompressionMethods = DecompressionMethods.None;

        options.MaxQueueItems = 100;
        options.ShutdownTimeout = TimeSpan.FromSeconds(5);

        options.TracesSampleRate = 1.0; // For production you may want to lower this to stay inside your quota

        // Configures the root scope
        options.ConfigureScope(s => s.SetTag("Always sent", "this tag"));
    });

// Register as many ISentryEventExceptionProcessor as you need. They ALL get called.
builder.Services.AddSingleton<ISentryEventExceptionProcessor, SpecialExceptionProcessor>();

// You can also register as many ISentryEventProcessor as you need.
builder.Services.AddTransient<ISentryEventProcessor, ExampleEventProcessor>();

builder.Services.AddSentryTunneling();

// Everything after this is just the boilerplate code generated by dotnet new mvc

builder.Services.AddControllersWithViews();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
