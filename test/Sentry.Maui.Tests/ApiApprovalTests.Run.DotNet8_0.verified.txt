[assembly: Microsoft.Maui.Controls.XmlnsDefinition("http://schemas.sentry.io/maui", "Sentry.Maui")]
[assembly: Microsoft.Maui.Controls.XmlnsPrefix("http://schemas.sentry.io/maui", "sentry")]
namespace Microsoft.Maui.Hosting
{
    public static class SentryMauiAppBuilderExtensions
    {
        public static Microsoft.Maui.Hosting.MauiAppBuilder UseSentry(this Microsoft.Maui.Hosting.MauiAppBuilder builder) { }
        public static Microsoft.Maui.Hosting.MauiAppBuilder UseSentry(this Microsoft.Maui.Hosting.MauiAppBuilder builder, System.Action<Sentry.Maui.SentryMauiOptions>? configureOptions) { }
        public static Microsoft.Maui.Hosting.MauiAppBuilder UseSentry(this Microsoft.Maui.Hosting.MauiAppBuilder builder, string dsn) { }
    }
}
namespace Sentry.Maui
{
    public sealed class BreadcrumbEvent
    {
        [System.Obsolete("Use the simpler constructor with params (string Key, string Value)[] extraData in" +
            "stead.")]
        public BreadcrumbEvent(object? sender, string eventName, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Key",
                "Value"})] System.Collections.Generic.IEnumerable<System.ValueTuple<string, string>>[] extraData) { }
        public BreadcrumbEvent(object? sender, string eventName, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Key",
                "Value"})] params System.ValueTuple<string, string>[] extraData) { }
        public string EventName { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Key",
                "Value"})]
        public System.ValueTuple<string, string>[] ExtraData { get; }
        public object? Sender { get; }
    }
    public interface IMauiElementEventBinder
    {
        void Bind(Microsoft.Maui.Controls.VisualElement element, System.Action<Sentry.Maui.BreadcrumbEvent> addBreadcrumb);
        void UnBind(Microsoft.Maui.Controls.VisualElement element);
    }
    public class SentryMauiOptions : Sentry.Extensions.Logging.SentryLoggingOptions
    {
        public SentryMauiOptions() { }
        public bool AttachScreenshot { get; set; }
        public bool CreateElementEventsBreadcrumbs { get; set; }
        public bool IncludeBackgroundingStateInBreadcrumbs { get; set; }
        public bool IncludeTextInBreadcrumbs { get; set; }
        public bool IncludeTitleInBreadcrumbs { get; set; }
        public void SetBeforeScreenshotCapture(System.Func<Sentry.SentryEvent, Sentry.SentryHint, bool> beforeCapture) { }
    }
    public static class SessionReplay
    {
        public static readonly Microsoft.Maui.Controls.BindableProperty MaskProperty;
        public static Sentry.Maui.SessionReplayMaskMode GetMask(Microsoft.Maui.Controls.BindableObject view) { }
        public static void SetMask(Microsoft.Maui.Controls.BindableObject view, Sentry.Maui.SessionReplayMaskMode value) { }
    }
    public enum SessionReplayMaskMode
    {
        Mask = 0,
        Unmask = 1,
    }
}
namespace Sentry.Maui.Internal
{
    public class MauiButtonEventsBinder : Sentry.Maui.IMauiElementEventBinder
    {
        public MauiButtonEventsBinder() { }
        public void Bind(Microsoft.Maui.Controls.VisualElement element, System.Action<Sentry.Maui.BreadcrumbEvent> addBreadcrumb) { }
        public void UnBind(Microsoft.Maui.Controls.VisualElement element) { }
    }
    public class MauiGestureRecognizerEventsBinder : Sentry.Maui.IMauiElementEventBinder
    {
        public MauiGestureRecognizerEventsBinder() { }
        public void Bind(Microsoft.Maui.Controls.VisualElement element, System.Action<Sentry.Maui.BreadcrumbEvent> addBreadcrumb) { }
        public void UnBind(Microsoft.Maui.Controls.VisualElement element) { }
    }
    public class MauiImageButtonEventsBinder : Sentry.Maui.IMauiElementEventBinder
    {
        public MauiImageButtonEventsBinder() { }
        public void Bind(Microsoft.Maui.Controls.VisualElement element, System.Action<Sentry.Maui.BreadcrumbEvent> addBreadcrumb) { }
        public void UnBind(Microsoft.Maui.Controls.VisualElement element) { }
    }
}