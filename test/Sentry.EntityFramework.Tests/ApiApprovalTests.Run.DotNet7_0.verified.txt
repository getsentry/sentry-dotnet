namespace Sentry.EntityFramework.ErrorProcessors
{
    public class DbConcurrencyExceptionProcessor : Sentry.Extensibility.SentryEventExceptionProcessor<System.Data.DBConcurrencyException>
    {
        public DbConcurrencyExceptionProcessor() { }
        protected override void ProcessException(System.Data.DBConcurrencyException exception, Sentry.SentryEvent sentryEvent) { }
    }
    public class DbEntityValidationExceptionProcessor : Sentry.Extensibility.SentryEventExceptionProcessor<System.Data.Entity.Validation.DbEntityValidationException>
    {
        public DbEntityValidationExceptionProcessor() { }
        protected override void ProcessException(System.Data.Entity.Validation.DbEntityValidationException exception, Sentry.SentryEvent sentryEvent) { }
    }
}
namespace Sentry.EntityFramework
{
    public interface IQueryLogger
    {
        void Log(string text, Sentry.BreadcrumbLevel level = -1);
    }
    public class SentryCommandInterceptor : System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor, System.Data.Entity.Infrastructure.Interception.IDbInterceptor
    {
        public SentryCommandInterceptor(Sentry.EntityFramework.IQueryLogger queryLogger) { }
        public virtual void Log<T>(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<T> interceptionContext) { }
        public void NonQueryExecuted(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<int> interceptionContext) { }
        public void NonQueryExecuting(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<int> interceptionContext) { }
        public void ReaderExecuted(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<System.Data.Common.DbDataReader> interceptionContext) { }
        public void ReaderExecuting(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<System.Data.Common.DbDataReader> interceptionContext) { }
        public void ScalarExecuted(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<object> interceptionContext) { }
        public void ScalarExecuting(System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext<object> interceptionContext) { }
    }
    public static class SentryDatabaseLogging
    {
        [System.Obsolete("This method is called automatically by options.AddEntityFramework. This method wi" +
            "ll be removed in future versions.")]
        public static Sentry.EntityFramework.SentryCommandInterceptor? UseBreadcrumbs(Sentry.EntityFramework.IQueryLogger? logger = null) { }
    }
}
namespace Sentry
{
    public static class SentryOptionsExtensions
    {
        public static Sentry.SentryOptions AddEntityFramework(this Sentry.SentryOptions sentryOptions) { }
        public static void DisableDbInterceptionIntegration(this Sentry.SentryOptions options) { }
    }
}