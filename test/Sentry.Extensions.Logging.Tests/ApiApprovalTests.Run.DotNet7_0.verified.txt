namespace Microsoft.Extensions.Logging
{
    public static class LoggingBuilderExtensions { }
    public static class SentryLoggerFactoryExtensions { }
}
namespace Sentry.Extensions.Logging
{
    public class DelegateLogEntryFilter : Sentry.Extensions.Logging.ILogEntryFilter
    {
        public DelegateLogEntryFilter(System.Func<string, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.Exception?, bool> filter) { }
        public bool Filter(string categoryName, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception) { }
    }
    public interface ILogEntryFilter
    {
        bool Filter(string categoryName, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception? exception);
    }
    public class MelDiagnosticLogger : Sentry.Extensibility.IDiagnosticLogger
    {
        public MelDiagnosticLogger(Microsoft.Extensions.Logging.ILogger<Sentry.ISentryClient> logger, Sentry.SentryLevel level) { }
        public bool IsEnabled(Sentry.SentryLevel level) { }
        public void Log(Sentry.SentryLevel logLevel, string message, System.Exception? exception = null, params object?[] args) { }
    }
    [Microsoft.Extensions.Logging.ProviderAlias("Sentry")]
    public class SentryLoggerProvider : Microsoft.Extensions.Logging.ILoggerProvider, System.IDisposable
    {
        public SentryLoggerProvider(Microsoft.Extensions.Options.IOptions<Sentry.Extensions.Logging.SentryLoggingOptions> options, Sentry.IHub hub) { }
        public Microsoft.Extensions.Logging.ILogger CreateLogger(string categoryName) { }
        public void Dispose() { }
    }
    public class SentryLoggingOptions : Sentry.SentryOptions
    {
        public SentryLoggingOptions() { }
        public bool InitializeSdk { get; set; }
        public Microsoft.Extensions.Logging.LogLevel MinimumBreadcrumbLevel { get; set; }
        public Microsoft.Extensions.Logging.LogLevel MinimumEventLevel { get; set; }
        public void ConfigureScope(System.Action<Sentry.Scope> action) { }
    }
    public static class SentryLoggingOptionsExtensions
    {
        public static void AddLogEntryFilter(this Sentry.Extensions.Logging.SentryLoggingOptions options, Sentry.Extensions.Logging.ILogEntryFilter filter) { }
        public static void AddLogEntryFilter(this Sentry.Extensions.Logging.SentryLoggingOptions options, System.Func<string, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.Exception?, bool> filter) { }
    }
}
namespace Sentry.Extensions.Logging.Extensions.DependencyInjection
{
    public static class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSentry<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where TOptions : Sentry.Extensions.Logging.SentryLoggingOptions, new () { }
    }
}