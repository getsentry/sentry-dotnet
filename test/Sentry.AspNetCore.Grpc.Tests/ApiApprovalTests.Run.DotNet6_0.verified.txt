[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName="")]
namespace Sentry.AspNetCore.Grpc
{
    public class DefaultProtobufRequestPayloadExtractor : Sentry.AspNetCore.Grpc.IProtobufRequestPayloadExtractor
    {
        public DefaultProtobufRequestPayloadExtractor() { }
        public Google.Protobuf.IMessage ExtractPayload<TRequest>(Sentry.AspNetCore.Grpc.IProtobufRequest<TRequest> request)
            where TRequest :  class, Google.Protobuf.IMessage { }
    }
    public interface IProtobufRequestPayloadExtractor
    {
        Google.Protobuf.IMessage? ExtractPayload<TRequest>(Sentry.AspNetCore.Grpc.IProtobufRequest<TRequest> request)
            where TRequest :  class, Google.Protobuf.IMessage;
    }
    public interface IProtobufRequest<TRequest>
    {
        long? ContentLength { get; }
        TRequest Request { get; }
    }
    public class ProtobufRequestExtractionDispatcher : Sentry.AspNetCore.Grpc.IProtobufRequestPayloadExtractor
    {
        public ProtobufRequestExtractionDispatcher(System.Collections.Generic.IEnumerable<Sentry.AspNetCore.Grpc.IProtobufRequestPayloadExtractor> extractors, Sentry.SentryOptions options, System.Func<Sentry.Extensibility.RequestSize> sizeSwitch) { }
        public Google.Protobuf.IMessage? ExtractPayload<TRequest>(Sentry.AspNetCore.Grpc.IProtobufRequest<TRequest> request)
            where TRequest :  class, Google.Protobuf.IMessage { }
    }
    public static class ScopeExtensions
    {
        public static void Populate<TRequest>(this Sentry.Scope scope, Grpc.Core.ServerCallContext context, TRequest? request, Sentry.AspNetCore.SentryAspNetCoreOptions options)
            where TRequest :  class { }
    }
    public static class SentryBuilderExtensions
    {
        public static Sentry.AspNetCore.ISentryBuilder AddGrpc(this Sentry.AspNetCore.ISentryBuilder builder) { }
    }
    public class SentryGrpcInterceptor : Grpc.Core.Interceptors.Interceptor
    {
        public SentryGrpcInterceptor(System.Func<Sentry.IHub> hubAccessor, Microsoft.Extensions.Options.IOptions<Sentry.AspNetCore.SentryAspNetCoreOptions> options) { }
        public override System.Threading.Tasks.Task<TResponse> ClientStreamingServerHandler<TRequest, TResponse>(Grpc.Core.IAsyncStreamReader<TRequest> requestStream, Grpc.Core.ServerCallContext context, Grpc.Core.ClientStreamingServerMethod<TRequest, TResponse> continuation)
            where TRequest :  class
            where TResponse :  class { }
        public override System.Threading.Tasks.Task DuplexStreamingServerHandler<TRequest, TResponse>(Grpc.Core.IAsyncStreamReader<TRequest> requestStream, Grpc.Core.IServerStreamWriter<TResponse> responseStream, Grpc.Core.ServerCallContext context, Grpc.Core.DuplexStreamingServerMethod<TRequest, TResponse> continuation)
            where TRequest :  class
            where TResponse :  class { }
        public override System.Threading.Tasks.Task ServerStreamingServerHandler<TRequest, TResponse>(TRequest request, Grpc.Core.IServerStreamWriter<TResponse> responseStream, Grpc.Core.ServerCallContext context, Grpc.Core.ServerStreamingServerMethod<TRequest, TResponse> continuation)
            where TRequest :  class
            where TResponse :  class { }
        public override System.Threading.Tasks.Task<TResponse> UnaryServerHandler<TRequest, TResponse>(TRequest request, Grpc.Core.ServerCallContext context, Grpc.Core.UnaryServerMethod<TRequest, TResponse> continuation)
            where TRequest :  class
            where TResponse :  class { }
    }
}