<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net9.0;net8.0</TargetFrameworks>
    <!-- IMPORTANT: We must test with new TFMs as the store format changes with new versions of .NET -->
    <TargetFrameworks Condition="'$(NO_ANDROID)' == ''">$(TargetFrameworks);net8.0-android34.0;net9.0-android35.0</TargetFrameworks>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Sentry.Android.AssemblyReader\Sentry.Android.AssemblyReader.csproj" />
    <ProjectReference Include="..\Sentry.Testing\Sentry.Testing.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="TestAPKs\" />
  </ItemGroup>

  <!-- Target to ensure AndroidTestApp is restored -->
  <Target Name="EnsureAndroidTestAppRestored" Condition="'$(TargetPlatformIdentifier)' != 'android' and '$(AndroidTestAppRestored)' != 'true'">
    <!-- Only restore once. Spawn as a separate process to escape any "no-restore" arguments to the build -->
    <Exec Command="dotnet restore ../AndroidTestApp/AndroidTestApp.csproj --nologo" />
    <PropertyGroup>
      <AndroidTestAppRestored>true</AndroidTestAppRestored>
    </PropertyGroup>
  </Target>

  <!--  Build the Android test app in various configurations during the build of this test project. -->
  <Target Name="BuildTestAPKs" BeforeTargets="DispatchToInnerBuilds;BeforeBuild" DependsOnTargets="EnsureAndroidTestAppRestored" Condition="'$(TargetPlatformIdentifier)' != 'android'">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_InnerBuildTestAPKs" Properties="TargetFramework=net8.0-android" Condition="$(TargetFramework) == 'net8.0'" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_InnerBuildTestAPKs" Properties="TargetFramework=net9.0-android" Condition="$(TargetFramework) == 'net9.0'" />
  </Target>
  <Target Name="_InnerBuildTestAPKs">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Properties="_Aot=False;_Store=False;_Compressed=False" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Properties="_Aot=False;_Store=False;_Compressed=True" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Properties="_Aot=False;_Store=True;_Compressed=False" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Properties="_Aot=False;_Store=True;_Compressed=True" />

    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Condition="!$(TargetFramework.StartsWith('net8'))" Properties="_Aot=True;_Store=False;_Compressed=False" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Condition="!$(TargetFramework.StartsWith('net8'))" Properties="_Aot=True;_Store=False;_Compressed=True" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Condition="!$(TargetFramework.StartsWith('net8'))" Properties="_Aot=True;_Store=True;_Compressed=False" />
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_BuildTestAPK" Condition="!$(TargetFramework.StartsWith('net8'))" Properties="_Aot=True;_Store=True;_Compressed=True" />
  </Target>

  <Target Name="_BuildTestAPK">
    <PropertyGroup>
      <_ConfigString>A=$(_Aot)-S=$(_Store)-C=$(_Compressed)</_ConfigString>
      <_AndroidTestAppOutputDir>..\AndroidTestApp\bin\$(TargetFramework)\$(_ConfigString)</_AndroidTestAppOutputDir>
      <SourceAPK>$(_AndroidTestAppOutputDir)\com.companyname.AndroidTestApp-Signed.apk</SourceAPK>
    </PropertyGroup>

    <MSBuild Projects="..\AndroidTestApp\AndroidTestApp.csproj" Targets="Build" Properties="Configuration=Release;PublishAot=$(_Aot);_IsPublishing=true;RuntimeIdentifier=android-x64;AndroidUseAssemblyStore=$(_Store);AndroidEnableAssemblyCompression=$(_Compressed);OutDir=bin\$(TargetFramework)\$(_ConfigString)\" Condition="!Exists('$(SourceAPK)')" />
  </Target>

  <Target Name="_CopyTestAPKNet8" AfterTargets="_BuildTestAPK" Condition="$(TargetFramework.StartsWith('net8'))">
    <PropertyGroup>
      <DestinationAPK>TestAPKs\$(TargetFramework)-$(_ConfigString).apk</DestinationAPK>
    </PropertyGroup>
    <Copy SourceFiles="$(SourceAPK)" DestinationFiles="$(DestinationAPK)" Condition="!Exists('$(DestinationAPK)')" />
  </Target>

  <Target Name="_CopyTestAPKNet9" AfterTargets="_BuildTestAPK" Condition="$(TargetFramework.StartsWith('net9'))">
    <PropertyGroup>
      <_ToolsFolder>tools</_ToolsFolder>
      <_BundleToolVersion>1.18.1</_BundleToolVersion>
      <_BundleToolFile>bundletool-$(_BundleToolVersion).jar</_BundleToolFile>
      <_BundleToolPath>$(_ToolsFolder)\$(_BundleToolFile)</_BundleToolPath>
      <_SourceAab>$(_AndroidTestAppOutputDir)\com.companyname.AndroidTestApp-Signed.aab</_SourceAab>
      <_SplitApksZip>$(_AndroidTestAppOutputDir)\split_config.apks</_SplitApksZip>
      <_SplitApksDir>$(_AndroidTestAppOutputDir)\apks</_SplitApksDir>
    </PropertyGroup>

    <DownloadFile
      SourceUrl="https://github.com/google/bundletool/releases/download/$(_BundleToolVersion)/bundletool-all-$(_BundleToolVersion).jar"
      DestinationFolder="$(_ToolsFolder)"
      DestinationFileName="$(_BundleToolFile)"
      Condition="!Exists('$(_BundleToolPath)')"
      Retries="3"
    />

    <Exec Command="java -jar $(_BundleToolPath) build-apks --device-spec=device-spec.json --bundle=$(_SourceAab) --output=$(_SplitApksZip)" Condition="Exists('$(_SourceAab)') and !Exists('$(_SplitApksZip)')" />

    <ItemGroup>
      <_ApksToExtract Include="$(_SplitApksZip)" />
    </ItemGroup>

    <Unzip SourceFiles="@(_ApksToExtract)"
           DestinationFolder="$(_SplitApksDir)\"
           Condition="'@(_ApksToExtract)' != ''" />

    <ItemGroup>
      <_SplitApks Include="$(_SplitApksDir)\splits\*.apk" />
    </ItemGroup>

    <Copy SourceFiles="@(_SplitApks)" DestinationFolder="TestAPKs\$(TargetFramework)-$(_ConfigString)\" SkipUnchangedFiles="true" />
  </Target>

</Project>
