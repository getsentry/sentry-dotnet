[
  {
    Source: {
      Message: {
        Message: Failed executing DbCommand,
        Formatted:
Failed executing DbCommand
SET NOCOUNT ON;
INSERT INTO [TestEntities] ([Property])
VALUES (@p0);
SELECT [Id]
FROM [TestEntities]
WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();
      },
      Logger: Microsoft.EntityFrameworkCore.Database.Command,
      Platform: csharp,
      SentryExceptions: [],
      SentryThreads: [
        {
          Name: .NET ThreadPool Worker,
          Crashed: false,
          Current: true,
          Stacktrace: {
            Frames: [
              {
                Function: void Thread.StartCallback(),
                InApp: false
              },
              {
                Function: void WorkerThread.WorkerThreadStart(),
                InApp: false
              },
              {
                Function: bool ThreadPoolWorkQueue.Dispatch(),
                InApp: false
              },
              {
                Function: void Task.FinishSlow(bool userDelegateExecute),
                InApp: false
              },
              {
                Function: void Task.FinishStageTwo(),
                InApp: false
              },
              {
                Function: void Task.FinishStageThree(),
                InApp: false
              },
              {
                Function: void Task.FinishContinuations(),
                InApp: false
              },
              {
                Function: void Task.RunContinuations(object continuationObject),
                InApp: false
              },
              {
                Function: void Task.RunOrQueueCompletionAction(ITaskCompletionAction completionAction, bool allowInlining),
                InApp: false
              },
              {
                Function: void UnwrapPromise<TResult>.Invoke(Task completingTask),
                InApp: false
              },
              {
                Function: void UnwrapPromise<TResult>.ProcessCompletedOuterTask(Task task),
                InApp: false
              },
              {
                Function: void UnwrapPromise<TResult>.ProcessInnerTask(Task task),
                InApp: false
              },
              {
                Function: bool UnwrapPromise<TResult>.TrySetFromTask(Task task, bool lookForOce),
                InApp: false
              },
              {
                Function: bool Task.TrySetException(object exceptionObject),
                InApp: false
              },
              {
                Function: void Task.FinishSlow(bool userDelegateExecute),
                InApp: false
              },
              {
                Function: void Task.FinishStageTwo(),
                InApp: false
              },
              {
                Function: void Task.FinishStageThree(),
                InApp: false
              },
              {
                Function: void Task.FinishContinuations(),
                InApp: false
              },
              {
                Function: void Task.RunContinuations(object continuationObject),
                InApp: false
              },
              {
                Function: void ContinueWithTaskContinuation.Run(Task completedTask, bool canInlineContinuationTask),
                InApp: false
              },
              {
                Function: void TaskContinuation.InlineIfPossibleOrElseQueue(Task task, bool needsProtection),
                InApp: false
              },
              {
                Function: bool TaskScheduler.TryRunInline(Task task, bool taskWasPreviouslyQueued),
                InApp: false
              },
              {
                Function: bool ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued),
                InApp: false
              },
              {
                Function: void Task.FinishSlow(bool userDelegateExecute),
                InApp: false
              },
              {
                Function: void Task.FinishStageTwo(),
                InApp: false
              },
              {
                Function: void Task.FinishStageThree(),
                InApp: false
              },
              {
                Function: void Task.FinishContinuations(),
                InApp: false
              },
              {
                Function: void Task.RunContinuations(object continuationObject),
                InApp: false
              },
              {
                Function: void AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, bool allowInlining),
                InApp: false
              },
              {
                Function: void AsyncStateMachineBox<TStateMachine>.MoveNext(Thread threadPoolThread) x 2,
                InApp: false
              },
              {
                Function: void AsyncStateMachineBox<TStateMachine>.ExecutionContextCallback(object s),
                InApp: false
              },
              {
                Function: async Task<RelationalDataReader> RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken),
                InApp: false
              },
              {
                Function: Task RelationalCommandDiagnosticsLogger.CommandErrorAsync(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, Exception exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken),
                InApp: false
              },
              {
                Function: void RelationalCommandDiagnosticsLogger.LogCommandError(DbCommand command, TimeSpan duration, EventDefinition<string, string, CommandType, int, string, string> definition),
                InApp: false
              },
              {
                Function: void EventDefinition<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>.Log<TLoggerCategory>(IDiagnosticsLogger<TLoggerCategory> logger, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5, TParam6 arg6),
                InApp: false
              },
              {
                Function: Action<ILogger, Exception> LoggerMessage.Define(LogLevel logLevel, EventId eventId, string formatString, LogDefineOptions options)+(ILogger logger, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Exception exception) => { },
                InApp: false
              },
              {
                Function: void <>c__DisplayClass20_0<T1, T2, T3, T4, T5, T6>.<Define>g__Log|0(?)+Log(ILogger logger, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, Exception exception),
                InApp: false
              },
              {
                Function: void Logger.Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter),
                InApp: false
              },
              {
                Function: void Logger.Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)+LoggerLog(LogLevel logLevel, EventId eventId, ILogger logger, Exception exception, Func<TState, Exception, string> formatter, ref List<Exception> exceptions, in TState state),
                InApp: false
              }
            ]
          }
        }
      ],
      Level: error,
      Request: {},
      Contexts: {},
      User: {},
      Environment: production,
      Breadcrumbs: [
        {
          Message: Entity Framework Core 6.0.8 initialized 'TestDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.8' with options: NoTracking ,
          Data: {
            eventId: Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized
          },
          Category: Microsoft.EntityFrameworkCore.Infrastructure
        },
        {
          Message:
Executed DbCommand
SET NOCOUNT ON;
INSERT INTO [TestEntities] ([Property])
VALUES (@p0);
SELECT [Id]
FROM [TestEntities]
WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();,
          Data: {
            eventId: Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted
          },
          Category: Microsoft.EntityFrameworkCore.Database.Command
        }
      ],
      Tags: {
        commandText:
SET NOCOUNT ON;
INSERT INTO [TestEntities] ([Property])
VALUES (@p0);
SELECT [Id]
FROM [TestEntities]
WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();,
        commandTimeout: 30,
        commandType: Text,
        eventId: Microsoft.EntityFrameworkCore.Database.Command.CommandError,
        newLine:
,
        parameters: @p0='?' (Size = 450)
      }
    }
  },
  {
    Source: {
      Name: my transaction,
      Platform: csharp,
      Operation: my operation,
      Description: ,
      Status: Ok,
      IsSampled: true,
      SampleRate: 1.0,
      Request: {},
      Contexts: {
        trace: {
          Operation: my operation,
          Description: ,
          Status: Ok,
          IsSampled: true
        }
      },
      User: {},
      Environment: production,
      Spans: [
        {
          IsFinished: true,
          Operation: db.query,
          Status: DeadlineExceeded,
          IsSampled: true,
          Extra: {
            db.connection_id: Guid_1,
            db.operation_id: Guid_2
          }
        },
        {
          IsFinished: true,
          Operation: db.query,
          Description:
SET NOCOUNT ON;
INSERT INTO [TestEntities] ([Property])
VALUES (@p0);
SELECT [Id]
FROM [TestEntities]
WHERE @@ROWCOUNT = 1 AND [Id] = scope_identity();

,
          Status: InternalError,
          IsSampled: true,
          Extra: {
            db.connection_id: Guid_1,
            db.operation_id: Guid_2
          }
        }
      ],
      IsFinished: true
    }
  }
]