// -----------------------------------------------------------------------------
// This file is auto-generated by Objective Sharpie and patched via the script
// at /scripts/generate-cocoa-bindings.ps1.  Do not edit this file directly.
// If changes are required, update the script instead.
// -----------------------------------------------------------------------------

using System;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace Sentry.CocoaSdk;

// typedef void (^SentryRequestFinished)(NSError * _Nullable);
[Internal]
delegate void SentryRequestFinished ([NullAllowed] NSError error);

// typedef void (^SentryRequestOperationFinished)(NSHTTPURLResponse * _Nullable, NSError * _Nullable);
[Internal]
delegate void SentryRequestOperationFinished ([NullAllowed] NSHttpUrlResponse response, [NullAllowed] NSError error);

// typedef SentryBreadcrumb * _Nullable (^SentryBeforeBreadcrumbCallback)(SentryBreadcrumb * _Nonnull);
[Internal]
[return: NullAllowed]
delegate SentryBreadcrumb SentryBeforeBreadcrumbCallback (SentryBreadcrumb breadcrumb);

// typedef SentryEvent * _Nullable (^SentryBeforeSendEventCallback)(SentryEvent * _Nonnull);
[Internal]
[return: NullAllowed]
delegate SentryEvent SentryBeforeSendEventCallback (SentryEvent @event);

// typedef id<SentrySpan> _Nullable (^SentryBeforeSendSpanCallback)(id<SentrySpan> _Nonnull);
[Internal]
delegate SentrySpan SentryBeforeSendSpanCallback (SentrySpan span);

// typedef SentryLog * _Nullable (^SentryBeforeSendLogCallback)(SentryLog * _Nonnull);
[Internal]
delegate SentryLog SentryBeforeSendLogCallback (SentryLog log);

// typedef BOOL (^SentryBeforeCaptureScreenshotCallback)(SentryEvent * _Nonnull);
[Internal]
delegate bool SentryBeforeCaptureScreenshotCallback (SentryEvent @event);

// typedef BOOL (^SentryBeforeCaptureViewHierarchyCallback)(SentryEvent * _Nonnull);
[Internal]
delegate bool SentryBeforeCaptureViewHierarchyCallback (SentryEvent @event);

// typedef void (^SentryOnCrashedLastRunCallback)(SentryEvent * _Nonnull);
[Internal]
delegate void SentryOnCrashedLastRunCallback (SentryEvent @event);

// typedef BOOL (^SentryShouldQueueEvent)(NSHTTPURLResponse * _Nullable, NSError * _Nullable);
[Internal]
delegate bool SentryShouldQueueEvent ([NullAllowed] NSHttpUrlResponse response, [NullAllowed] NSError error);

// typedef NSNumber * _Nullable (^SentryTracesSamplerCallback)(SentrySamplingContext * _Nonnull);
[Internal]
[return: NullAllowed]
delegate NSNumber SentryTracesSamplerCallback (SentrySamplingContext samplingContext);

// typedef void (^SentrySpanCallback)(DEPRECATED_MSG_ATTRIBUTE("See `SentryScope.useSpan` for reasoning of deprecation.") id<SentrySpan>);
[Internal]
delegate void SentrySpanCallback (SentrySpan span);

// typedef void (^SentryUserFeedbackConfigurationBlock)(SentryUserFeedbackConfiguration * _Nonnull);
[Internal]
delegate void SentryUserFeedbackConfigurationBlock (SentryUserFeedbackConfiguration arg0);

// @interface SentryScreenFrames : NSObject <NSCopying>
[BaseType (typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryScreenFrames
{
    // -(instancetype _Nonnull)initWithTotal:(NSUInteger)total frozen:(NSUInteger)frozen slow:(NSUInteger)slow;
    [Export ("initWithTotal:frozen:slow:")]
    NativeHandle Constructor (nuint total, nuint frozen, nuint slow);

    // -(instancetype _Nonnull)initWithTotal:(NSUInteger)total frozen:(NSUInteger)frozen slow:(NSUInteger)slow slowFrameTimestamps:(SentryFrameInfoTimeSeries * _Nonnull)slowFrameTimestamps frozenFrameTimestamps:(SentryFrameInfoTimeSeries * _Nonnull)frozenFrameTimestamps frameRateTimestamps:(SentryFrameInfoTimeSeries * _Nonnull)frameRateTimestamps;
    [Export ("initWithTotal:frozen:slow:slowFrameTimestamps:frozenFrameTimestamps:frameRateTimestamps:")]
    NativeHandle Constructor (nuint total, nuint frozen, nuint slow, NSDictionary<NSString, NSNumber>[] slowFrameTimestamps, NSDictionary<NSString, NSNumber>[] frozenFrameTimestamps, NSDictionary<NSString, NSNumber>[] frameRateTimestamps);

    // @property (readonly, assign, nonatomic) NSUInteger total;
    [Export ("total")]
    nuint Total { get; }

    // @property (readonly, assign, nonatomic) NSUInteger frozen;
    [Export ("frozen")]
    nuint Frozen { get; }

    // @property (readonly, assign, nonatomic) NSUInteger slow;
    [Export ("slow")]
    nuint Slow { get; }

    // @property (readonly, copy, nonatomic) SentryFrameInfoTimeSeries * _Nonnull slowFrameTimestamps;
    [Export ("slowFrameTimestamps", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSNumber>[] SlowFrameTimestamps { get; }

    // @property (readonly, copy, nonatomic) SentryFrameInfoTimeSeries * _Nonnull frozenFrameTimestamps;
    [Export ("frozenFrameTimestamps", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSNumber>[] FrozenFrameTimestamps { get; }

    // @property (readonly, copy, nonatomic) SentryFrameInfoTimeSeries * _Nonnull frameRateTimestamps;
    [Export ("frameRateTimestamps", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSNumber>[] FrameRateTimestamps { get; }
}

// @interface PrivateSentrySDKOnly : NSObject
[BaseType (typeof(NSObject))]
[Internal]
interface PrivateSentrySDKOnly
{
    // +(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImages;
    [Static]
    [Export ("getDebugImages")]
    SentryDebugMeta[] DebugImages { get; }

    // +(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesCrashed:(BOOL)isCrash;
    [Static]
    [Export ("getDebugImagesCrashed:")]
    SentryDebugMeta[] GetDebugImagesCrashed (bool isCrash);

    // +(void)setSdkName:(NSString * _Nonnull)sdkName andVersionString:(NSString * _Nonnull)versionString;
    [Static]
    [Export ("setSdkName:andVersionString:")]
    void SetSdkName (string sdkName, string versionString);

    // +(void)setSdkName:(NSString * _Nonnull)sdkName;
    [Static]
    [Export ("setSdkName:")]
    void SetSdkName (string sdkName);

    // +(NSString * _Nonnull)getSdkName;
    [Static]
    [Export ("getSdkName")]
    string SdkName { get; }

    // +(NSString * _Nonnull)getSdkVersionString;
    [Static]
    [Export ("getSdkVersionString")]
    string SdkVersionString { get; }

    // +(void)addSdkPackage:(NSString * _Nonnull)name version:(NSString * _Nonnull)version;
    [Static]
    [Export ("addSdkPackage:version:")]
    void AddSdkPackage (string name, string version);

    // +(NSDictionary * _Nonnull)getExtraContext;
    [Static]
    [Export ("getExtraContext")]
    NSDictionary ExtraContext { get; }

    // +(void)setTrace:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId;
    [Static]
    [Export ("setTrace:spanId:")]
    void SetTrace (SentryId traceId, SentrySpanId spanId);

    // +(void)setCrashEventID:(SentryId * _Nonnull)crashEventId;
    [Static]
    [Export ("setCrashEventID:")]
    void SetCrashEventID (SentryId crashEventId);

    // +(uint64_t)startProfilerForTrace:(SentryId * _Nonnull)traceId;
    [Static]
    [Export ("startProfilerForTrace:")]
    ulong StartProfilerForTrace (SentryId traceId);

    // +(NSMutableDictionary<NSString *,id> * _Nullable)collectProfileBetween:(uint64_t)startSystemTime and:(uint64_t)endSystemTime forTrace:(SentryId * _Nonnull)traceId;
    [Static]
    [Export ("collectProfileBetween:and:forTrace:")]
    [return: NullAllowed]
    NSMutableDictionary<NSString, NSObject> CollectProfileBetween (ulong startSystemTime, ulong endSystemTime, SentryId traceId);

    // +(void)discardProfilerForTrace:(SentryId * _Nonnull)traceId;
    [Static]
    [Export ("discardProfilerForTrace:")]
    void DiscardProfilerForTrace (SentryId traceId);

    // @property (readonly, copy, nonatomic, class) NSString * _Nonnull installationID;
    [Static]
    [Export ("installationID")]
    string InstallationID { get; }

    // @property (readonly, copy, nonatomic, class) SentryOptions * _Nonnull options;
    [Static]
    [Export ("options", ArgumentSemantic.Copy)]
    SentryOptions Options { get; }

    // @property (assign, nonatomic, class) BOOL appStartMeasurementHybridSDKMode;
    [Static]
    [Export ("appStartMeasurementHybridSDKMode")]
    bool AppStartMeasurementHybridSDKMode { get; set; }

    // @property (assign, nonatomic, class) BOOL framesTrackingMeasurementHybridSDKMode;
    [Static]
    [Export ("framesTrackingMeasurementHybridSDKMode")]
    bool FramesTrackingMeasurementHybridSDKMode { get; set; }

    // @property (readonly, assign, nonatomic, class) BOOL isFramesTrackingRunning;
    [Static]
    [Export ("isFramesTrackingRunning")]
    bool IsFramesTrackingRunning { get; }

    // @property (readonly, assign, nonatomic, class) SentryScreenFrames * _Nonnull currentScreenFrames;
    [Static]
    [Export ("currentScreenFrames", ArgumentSemantic.Assign)]
    SentryScreenFrames CurrentScreenFrames { get; }

    // +(NSArray<NSData *> * _Nonnull)captureScreenshots;
    [Static]
    [Export ("captureScreenshots")]
    NSData[] CaptureScreenshots();

    // +(NSData * _Nonnull)captureViewHierarchy;
    [Static]
    [Export ("captureViewHierarchy")]
    NSData CaptureViewHierarchy();

    // +(void)setCurrentScreen:(NSString * _Nullable)screenName;
    [Static]
    [Export ("setCurrentScreen:")]
    void SetCurrentScreen ([NullAllowed] string screenName);

    // +(UIView * _Nonnull)sessionReplayMaskingOverlay:(id<SentryRedactOptions> _Nonnull)options;
    [Static]
    [Export ("sessionReplayMaskingOverlay:")]
    UIView SessionReplayMaskingOverlay (SentryRedactOptions options);

    // +(void)configureSessionReplayWith:(id<SentryReplayBreadcrumbConverter> _Nullable)breadcrumbConverter screenshotProvider:(id<SentryViewScreenshotProvider> _Nullable)screenshotProvider;
    [Static]
    [Export ("configureSessionReplayWith:screenshotProvider:")]
    void ConfigureSessionReplayWith ([NullAllowed] SentryReplayBreadcrumbConverter breadcrumbConverter, [NullAllowed] SentryViewScreenshotProvider screenshotProvider);

    // +(void)captureReplay;
    [Static]
    [Export ("captureReplay")]
    void CaptureReplay ();

    // +(NSString * _Nullable)getReplayId;
    [Static]
    [NullAllowed, Export ("getReplayId")]
    string ReplayId { get; }

    // +(void)addReplayIgnoreClasses:(NSArray<Class> * _Nonnull)classes;
    [Static]
    [Export ("addReplayIgnoreClasses:")]
    void AddReplayIgnoreClasses (Class[] classes);

    // +(void)addReplayRedactClasses:(NSArray<Class> * _Nonnull)classes;
    [Static]
    [Export ("addReplayRedactClasses:")]
    void AddReplayRedactClasses (Class[] classes);

    // +(void)setIgnoreContainerClass:(Class _Nonnull)containerClass;
    [Static]
    [Export ("setIgnoreContainerClass:")]
    void SetIgnoreContainerClass (Class containerClass);

    // +(void)setRedactContainerClass:(Class _Nonnull)containerClass;
    [Static]
    [Export ("setRedactContainerClass:")]
    void SetRedactContainerClass (Class containerClass);

    // +(void)setReplayTags:(NSDictionary<NSString *,id> * _Nonnull)tags;
    [Static]
    [Export ("setReplayTags:")]
    void SetReplayTags (NSDictionary<NSString, NSObject> tags);

    // +(NSDictionary<NSString *,id> * _Nullable)appStartMeasurementWithSpans;
    [Static]
    [NullAllowed, Export ("appStartMeasurementWithSpans")]
    NSDictionary<NSString, NSObject> AppStartMeasurementWithSpans { get; }

    // +(SentryUser * _Nonnull)userWithDictionary:(NSDictionary * _Nonnull)dictionary;
    [Static]
    [Export ("userWithDictionary:")]
    SentryUser UserWithDictionary (NSDictionary dictionary);

    // +(SentryBreadcrumb * _Nonnull)breadcrumbWithDictionary:(NSDictionary * _Nonnull)dictionary;
    [Static]
    [Export ("breadcrumbWithDictionary:")]
    SentryBreadcrumb BreadcrumbWithDictionary (NSDictionary dictionary);
}
