// -----------------------------------------------------------------------------
// This file is auto-generated by Objective Sharpie and patched via the script
// at /scripts/patch-cocoa-bindings.cs.  Do not edit this file directly.
// If changes are required, update the script instead.
// -----------------------------------------------------------------------------

using System;
using CoreFoundation;
using Foundation;
using MetricKit;
using ObjCRuntime;
using Sentry;
using UIKit;

namespace Sentry.CocoaSdk;

// typedef void (^SentryRequestFinished)(NSError * _Nullable);
[Internal]
delegate void SentryRequestFinished([NullAllowed] NSError error);

// typedef void (^SentryRequestOperationFinished)(NSHTTPURLResponse * _Nullable, NSError * _Nullable);
[Internal]
delegate void SentryRequestOperationFinished([NullAllowed] NSHttpUrlResponse response, [NullAllowed] NSError error);

// typedef SentryBreadcrumb * _Nullable (^SentryBeforeBreadcrumbCallback)(SentryBreadcrumb * _Nonnull);
[Internal]
[return: NullAllowed]
delegate SentryBreadcrumb SentryBeforeBreadcrumbCallback(SentryBreadcrumb breadcrumb);

// typedef SentryEvent * _Nullable (^SentryBeforeSendEventCallback)(SentryEvent * _Nonnull);
[Internal]
[return: NullAllowed]
delegate SentryEvent SentryBeforeSendEventCallback(SentryEvent @event);

// typedef id<SentrySpan> _Nullable (^SentryBeforeSendSpanCallback)(id<SentrySpan> _Nonnull);
[Internal]
delegate SentrySpan SentryBeforeSendSpanCallback(SentrySpan span);

// typedef SentryLog * _Nullable (^SentryBeforeSendLogCallback)(SentryLog * _Nonnull);
[Internal]
delegate SentryLog SentryBeforeSendLogCallback(SentryLog log);

// typedef BOOL (^SentryBeforeCaptureScreenshotCallback)(SentryEvent * _Nonnull);
[Internal]
delegate bool SentryBeforeCaptureScreenshotCallback(SentryEvent @event);

// typedef BOOL (^SentryBeforeCaptureViewHierarchyCallback)(SentryEvent * _Nonnull);
[Internal]
delegate bool SentryBeforeCaptureViewHierarchyCallback(SentryEvent @event);

// typedef void (^SentryOnCrashedLastRunCallback)(SentryEvent * _Nonnull);
[Internal]
delegate void SentryOnCrashedLastRunCallback(SentryEvent @event);

// typedef BOOL (^SentryShouldQueueEvent)(NSHTTPURLResponse * _Nullable, NSError * _Nullable);
[Internal]
delegate bool SentryShouldQueueEvent([NullAllowed] NSHttpUrlResponse response, [NullAllowed] NSError error);

// typedef NSNumber * _Nullable (^SentryTracesSamplerCallback)(SentrySamplingContext * _Nonnull);
[Internal]
[return: NullAllowed]
delegate NSNumber SentryTracesSamplerCallback(SentrySamplingContext samplingContext);

// typedef void (^SentrySpanCallback)(DEPRECATED_MSG_ATTRIBUTE("See `SentryScope.useSpan` for reasoning of deprecation.") id<SentrySpan>);
[Internal]
delegate void SentrySpanCallback(SentrySpan span);

// @interface SentryAttachment : NSObject
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryAttachment
{
    // -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data filename:(NSString * _Nonnull)filename;
    [Export("initWithData:filename:")]
    NativeHandle Constructor(NSData data, string filename);

    // -(instancetype _Nonnull)initWithData:(NSData * _Nonnull)data filename:(NSString * _Nonnull)filename contentType:(NSString * _Nullable)contentType;
    [Export("initWithData:filename:contentType:")]
    NativeHandle Constructor(NSData data, string filename, [NullAllowed] string contentType);

    // -(instancetype _Nonnull)initWithPath:(NSString * _Nonnull)path;
    [Export("initWithPath:")]
    NativeHandle Constructor(string path);

    // -(instancetype _Nonnull)initWithPath:(NSString * _Nonnull)path filename:(NSString * _Nonnull)filename;
    [Export("initWithPath:filename:")]
    NativeHandle Constructor(string path, string filename);

    // -(instancetype _Nonnull)initWithPath:(NSString * _Nonnull)path filename:(NSString * _Nonnull)filename contentType:(NSString * _Nullable)contentType;
    [Export("initWithPath:filename:contentType:")]
    NativeHandle Constructor(string path, string filename, [NullAllowed] string contentType);

    // @property (readonly, nonatomic, strong) NSData * _Nullable data;
    [NullAllowed, Export("data", ArgumentSemantic.Strong)]
    NSData Data { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable path;
    [NullAllowed, Export("path")]
    string Path { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull filename;
    [Export("filename")]
    string Filename { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable contentType;
    [NullAllowed, Export("contentType")]
    string ContentType { get; }
}

// @interface SentryBaggage : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentryBaggage
{
    // @property (readonly, nonatomic) SentryId * _Nonnull traceId;
    [Export("traceId")]
    SentryId TraceId { get; }

    // @property (readonly, nonatomic) NSString * _Nonnull publicKey;
    [Export("publicKey")]
    string PublicKey { get; }

    // @property (readonly, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export("releaseName")]
    string ReleaseName { get; }

    // @property (readonly, nonatomic) NSString * _Nullable environment;
    [NullAllowed, Export("environment")]
    string Environment { get; }

    // @property (readonly, nonatomic) NSString * _Nullable transaction;
    [NullAllowed, Export("transaction")]
    string Transaction { get; }

    // @property (readonly, nonatomic) NSString * _Nullable userId;
    [NullAllowed, Export("userId")]
    string UserId { get; }

    // @property (readonly, nonatomic) NSString * _Nullable userSegment;
    [NullAllowed, Export("userSegment")]
    string UserSegment { get; }

    // @property (readonly, nonatomic) NSString * _Nullable sampleRand;
    [NullAllowed, Export("sampleRand")]
    string SampleRand { get; }

    // @property (readonly, nonatomic) NSString * _Nullable sampleRate;
    [NullAllowed, Export("sampleRate")]
    string SampleRate { get; }

    // @property (nonatomic, strong) NSString * _Nullable sampled;
    [NullAllowed, Export("sampled", ArgumentSemantic.Strong)]
    string Sampled { get; set; }

    // @property (nonatomic, strong) NSString * _Nullable replayId;
    [NullAllowed, Export("replayId", ArgumentSemantic.Strong)]
    string ReplayId { get; set; }

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId publicKey:(NSString * _Nonnull)publicKey releaseName:(NSString * _Nullable)releaseName environment:(NSString * _Nullable)environment transaction:(NSString * _Nullable)transaction userSegment:(NSString * _Nullable)userSegment sampleRate:(NSString * _Nullable)sampleRate sampled:(NSString * _Nullable)sampled replayId:(NSString * _Nullable)replayId;
    [Export("initWithTraceId:publicKey:releaseName:environment:transaction:userSegment:sampleRate:sampled:replayId:")]
    NativeHandle Constructor(SentryId traceId, string publicKey, [NullAllowed] string releaseName, [NullAllowed] string environment, [NullAllowed] string transaction, [NullAllowed] string userSegment, [NullAllowed] string sampleRate, [NullAllowed] string sampled, [NullAllowed] string replayId);

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId publicKey:(NSString * _Nonnull)publicKey releaseName:(NSString * _Nullable)releaseName environment:(NSString * _Nullable)environment transaction:(NSString * _Nullable)transaction userSegment:(NSString * _Nullable)userSegment sampleRate:(NSString * _Nullable)sampleRate sampleRand:(NSString * _Nullable)sampleRand sampled:(NSString * _Nullable)sampled replayId:(NSString * _Nullable)replayId;
    [Export("initWithTraceId:publicKey:releaseName:environment:transaction:userSegment:sampleRate:sampleRand:sampled:replayId:")]
    NativeHandle Constructor(SentryId traceId, string publicKey, [NullAllowed] string releaseName, [NullAllowed] string environment, [NullAllowed] string transaction, [NullAllowed] string userSegment, [NullAllowed] string sampleRate, [NullAllowed] string sampleRand, [NullAllowed] string sampled, [NullAllowed] string replayId);

    // -(NSString * _Nonnull)toHTTPHeaderWithOriginalBaggage:(NSDictionary * _Nullable)originalBaggage;
    [Export("toHTTPHeaderWithOriginalBaggage:")]
    string ToHTTPHeaderWithOriginalBaggage([NullAllowed] NSDictionary originalBaggage);
}

// @protocol SentrySerializable <NSObject>
[Protocol]
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
[Model]
interface ISentrySerializable
{
    // @required -(NSDictionary<NSString *,id> * _Nonnull)serialize;
    [Abstract]
    [Export("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @interface SentryBreadcrumb : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryBreadcrumb : ISentrySerializable
{
    // @property (nonatomic) SentryLevel level;
    [Export("level", ArgumentSemantic.Assign)]
    SentryLevel Level { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull category;
    [Export("category")]
    string Category { get; set; }

    // @property (nonatomic, strong) NSDate * _Nullable timestamp;
    [NullAllowed, Export("timestamp", ArgumentSemantic.Strong)]
    NSDate Timestamp { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable type;
    [NullAllowed, Export("type")]
    string Type { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable message;
    [NullAllowed, Export("message")]
    string Message { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable origin;
    [NullAllowed, Export("origin")]
    string Origin { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,id> * _Nullable data;
    [NullAllowed, Export("data", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> Data { get; set; }

    // -(instancetype _Nonnull)initWithLevel:(SentryLevel)level category:(NSString * _Nonnull)category;
    [Export("initWithLevel:category:")]
    NativeHandle Constructor(SentryLevel level, string category);

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize;
    [Export("serialize")]
    NSDictionary<NSString, NSObject> Serialize();

    // -(BOOL)isEqualToBreadcrumb:(SentryBreadcrumb * _Nonnull)breadcrumb;
    [Export("isEqualToBreadcrumb:")]
    bool IsEqualToBreadcrumb(SentryBreadcrumb breadcrumb);

    // -(NSUInteger)hash;
    [Export("hash")]
    nuint Hash { get; }
}

// @interface SentryClient : NSObject
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryClient
{
    // @property (readonly, assign, nonatomic) BOOL isEnabled;
    [Export("isEnabled")]
    bool IsEnabled { get; }

    // @property (nonatomic, strong) SentryOptions * _Nonnull options;
    [Export("options", ArgumentSemantic.Strong)]
    SentryOptions Options { get; set; }

    // -(instancetype _Nullable)initWithOptions:(SentryOptions * _Nonnull)options;
    [Export("initWithOptions:")]
    NativeHandle Constructor(SentryOptions options);

    // -(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event __attribute__((swift_name("capture(event:)")));
    [Export("captureEvent:")]
    SentryId CaptureEvent(SentryEvent @event);

    // -(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(event:scope:)")));
    [Export("captureEvent:withScope:")]
    SentryId CaptureEvent(SentryEvent @event, SentryScope scope);

    // -(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error __attribute__((swift_name("capture(error:)")));
    [Export("captureError:")]
    SentryId CaptureError(NSError error);

    // -(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(error:scope:)")));
    [Export("captureError:withScope:")]
    SentryId CaptureError(NSError error, SentryScope scope);

    // -(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception __attribute__((swift_name("capture(exception:)")));
    [Export("captureException:")]
    SentryId CaptureException(NSException exception);

    // -(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(exception:scope:)")));
    [Export("captureException:withScope:")]
    SentryId CaptureException(NSException exception, SentryScope scope);

    // -(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message __attribute__((swift_name("capture(message:)")));
    [Export("captureMessage:")]
    SentryId CaptureMessage(string message);

    // -(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(message:scope:)")));
    [Export("captureMessage:withScope:")]
    SentryId CaptureMessage(string message, SentryScope scope);

    // -(void)captureFeedback:(SentryFeedback * _Nonnull)feedback withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(feedback:scope:)")));
    [Export("captureFeedback:withScope:")]
    void CaptureFeedback(SentryFeedback feedback, SentryScope scope);

    // -(void)flush:(NSTimeInterval)timeout __attribute__((swift_name("flush(timeout:)")));
    [Export("flush:")]
    void Flush(double timeout);

    // -(void)close;
    [Export("close")]
    void Close();
}

// @interface SentryDebugImageProvider : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentryDebugImageProvider
{
    // -(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesForThreads:(NSArray<SentryThread *> * _Nonnull)threads __attribute__((deprecated("Use -[getDebugImagesForThreads:isCrash:] instead.")));
    [Export("getDebugImagesForThreads:")]
    SentryDebugMeta[] GetDebugImagesForThreads(SentryThread[] threads);

    // -(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesForThreads:(NSArray<SentryThread *> * _Nonnull)threads isCrash:(BOOL)isCrash __attribute__((deprecated("This method is slow and will be removed in a future version. Use -[getDebugImagesFromCacheForThreads:] instead.")));
    [Export("getDebugImagesForThreads:isCrash:")]
    SentryDebugMeta[] GetDebugImagesForThreads(SentryThread[] threads, bool isCrash);

    // -(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesForFrames:(NSArray<SentryFrame *> * _Nonnull)frames __attribute__((deprecated("Use -[getDebugImagesForFrames:isCrash:] instead.")));
    [Export("getDebugImagesForFrames:")]
    SentryDebugMeta[] GetDebugImagesForFrames(SentryFrame[] frames);

    // -(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesForFrames:(NSArray<SentryFrame *> * _Nonnull)frames isCrash:(BOOL)isCrash __attribute__((deprecated("This method is slow and will be removed in a future version. Use -[getDebugImagesFromCacheForFrames:] instead.")));
    [Export("getDebugImagesForFrames:isCrash:")]
    SentryDebugMeta[] GetDebugImagesForFrames(SentryFrame[] frames, bool isCrash);

    // -(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImages __attribute__((deprecated("Use -[getDebugImagesCrashed:] instead.")));
    [Export("getDebugImages")]
    SentryDebugMeta[] DebugImages { get; }

    // -(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesCrashed:(BOOL)isCrash __attribute__((deprecated("This method is slow and will be removed in a future version. Use -[getDebugImagesFromCache:] instead.")));
    [Export("getDebugImagesCrashed:")]
    SentryDebugMeta[] GetDebugImagesCrashed(bool isCrash);
}

// @interface SentryDebugMeta : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryDebugMeta : ISentrySerializable
{
    // @property (copy, nonatomic) NSString * _Nullable uuid;
    [NullAllowed, Export("uuid")]
    string Uuid { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable debugID;
    [NullAllowed, Export("debugID")]
    string DebugID { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable type;
    [NullAllowed, Export("type")]
    string Type { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable name;
    [NullAllowed, Export("name")]
    string Name { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable imageSize;
    [NullAllowed, Export("imageSize", ArgumentSemantic.Copy)]
    NSNumber ImageSize { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable imageAddress;
    [NullAllowed, Export("imageAddress")]
    string ImageAddress { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable imageVmAddress;
    [NullAllowed, Export("imageVmAddress")]
    string ImageVmAddress { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable codeFile;
    [NullAllowed, Export("codeFile")]
    string CodeFile { get; set; }
}

// @interface SentryDsn : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentryDsn
{
    // @property (readonly, nonatomic, strong) NSURL * _Nonnull url;
    [Export("url", ArgumentSemantic.Strong)]
    NSUrl Url { get; }

    // -(instancetype _Nullable)initWithString:(NSString * _Nonnull)dsnString didFailWithError:(NSError * _Nullable * _Nullable)error;
    [Export("initWithString:didFailWithError:")]
    NativeHandle Constructor(string dsnString, [NullAllowed] out NSError error);

    // -(NSString * _Nonnull)getHash;
    [Export("getHash")]
    string Hash { get; }

    // -(NSURL * _Nonnull)getStoreEndpoint __attribute__((deprecated("This endpoint is no longer used")));
    [Export("getStoreEndpoint")]
    NSUrl StoreEndpoint { get; }

    // -(NSURL * _Nonnull)getEnvelopeEndpoint;
    [Export("getEnvelopeEndpoint")]
    NSUrl EnvelopeEndpoint { get; }
}

// @interface SentryEvent : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryEvent : ISentrySerializable
{
    // @property (nonatomic, strong) SentryId * _Nonnull eventId;
    [Export("eventId", ArgumentSemantic.Strong)]
    SentryId EventId { get; set; }

    // @property (nonatomic, strong) SentryMessage * _Nullable message;
    [NullAllowed, Export("message", ArgumentSemantic.Strong)]
    SentryMessage Message { get; set; }

    // @property (copy, nonatomic) NSError * _Nullable error;
    [NullAllowed, Export("error", ArgumentSemantic.Copy)]
    NSError Error { get; set; }

    // @property (nonatomic, strong) NSDate * _Nullable timestamp;
    [NullAllowed, Export("timestamp", ArgumentSemantic.Strong)]
    NSDate Timestamp { get; set; }

    // @property (nonatomic, strong) NSDate * _Nullable startTimestamp;
    [NullAllowed, Export("startTimestamp", ArgumentSemantic.Strong)]
    NSDate StartTimestamp { get; set; }

    // @property (nonatomic) enum SentryLevel level;
    [Export("level", ArgumentSemantic.Assign)]
    SentryLevel Level { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull platform;
    [Export("platform")]
    string Platform { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable logger;
    [NullAllowed, Export("logger")]
    string Logger { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable serverName;
    [NullAllowed, Export("serverName")]
    string ServerName { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export("releaseName")]
    string ReleaseName { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable dist;
    [NullAllowed, Export("dist")]
    string Dist { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable environment;
    [NullAllowed, Export("environment")]
    string Environment { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable transaction;
    [NullAllowed, Export("transaction")]
    string Transaction { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable type;
    [NullAllowed, Export("type")]
    string Type { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,NSString *> * _Nullable tags;
    [NullAllowed, Export("tags", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSString> Tags { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,id> * _Nullable extra;
    [NullAllowed, Export("extra", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> Extra { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,id> * _Nullable sdk;
    [NullAllowed, Export("sdk", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> Sdk { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,NSString *> * _Nullable modules;
    [NullAllowed, Export("modules", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSString> Modules { get; set; }

    // @property (nonatomic, strong) NSArray<NSString *> * _Nullable fingerprint;
    [NullAllowed, Export("fingerprint", ArgumentSemantic.Strong)]
    string[] Fingerprint { get; set; }

    // @property (nonatomic, strong) SentryUser * _Nullable user;
    [NullAllowed, Export("user", ArgumentSemantic.Strong)]
    SentryUser User { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,NSDictionary<NSString *,id> *> * _Nullable context;
    [NullAllowed, Export("context", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSDictionary<NSString, NSObject>> Context { get; set; }

    // @property (nonatomic, strong) NSArray<SentryThread *> * _Nullable threads;
    [NullAllowed, Export("threads", ArgumentSemantic.Strong)]
    SentryThread[] Threads { get; set; }

    // @property (nonatomic, strong) NSArray<SentryException *> * _Nullable exceptions;
    [NullAllowed, Export("exceptions", ArgumentSemantic.Strong)]
    SentryException[] Exceptions { get; set; }

    // @property (nonatomic, strong) SentryStacktrace * _Nullable stacktrace;
    [NullAllowed, Export("stacktrace", ArgumentSemantic.Strong)]
    SentryStacktrace Stacktrace { get; set; }

    // @property (nonatomic, strong) NSArray<SentryDebugMeta *> * _Nullable debugMeta;
    [NullAllowed, Export("debugMeta", ArgumentSemantic.Strong)]
    SentryDebugMeta[] DebugMeta { get; set; }

    // @property (nonatomic, strong) NSArray<SentryBreadcrumb *> * _Nullable breadcrumbs;
    [NullAllowed, Export("breadcrumbs", ArgumentSemantic.Strong)]
    SentryBreadcrumb[] Breadcrumbs { get; set; }

    // @property (nonatomic, strong) SentryRequest * _Nullable request;
    [NullAllowed, Export("request", ArgumentSemantic.Strong)]
    SentryRequest Request { get; set; }

    // -(instancetype _Nonnull)initWithLevel:(enum SentryLevel)level __attribute__((objc_designated_initializer));
    [Export("initWithLevel:")]
    [DesignatedInitializer]
    NativeHandle Constructor(SentryLevel level);

    // -(instancetype _Nonnull)initWithError:(NSError * _Nonnull)error;
    [Export("initWithError:")]
    NativeHandle Constructor(NSError error);
}

// @interface SentryException : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryException : ISentrySerializable
{
    // @property (copy, nonatomic) NSString * _Nonnull value;
    [Export("value")]
    string Value { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull type;
    [Export("type")]
    string Type { get; set; }

    // @property (nonatomic, strong) SentryMechanism * _Nullable mechanism;
    [NullAllowed, Export("mechanism", ArgumentSemantic.Strong)]
    SentryMechanism Mechanism { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable module;
    [NullAllowed, Export("module")]
    string Module { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable threadId;
    [NullAllowed, Export("threadId", ArgumentSemantic.Copy)]
    NSNumber ThreadId { get; set; }

    // @property (nonatomic, strong) SentryStacktrace * _Nullable stacktrace;
    [NullAllowed, Export("stacktrace", ArgumentSemantic.Strong)]
    SentryStacktrace Stacktrace { get; set; }

    // -(instancetype _Nonnull)initWithValue:(NSString * _Nonnull)value type:(NSString * _Nonnull)type;
    [Export("initWithValue:type:")]
    NativeHandle Constructor(string value, string type);
}

// @interface SentryFeedbackAPI : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentryFeedbackAPI
{
    [Export("showWidget")]
    void ShowWidget();
    [Export("hideWidget")]
    void HideWidget();
}

// @interface SentryFrame : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryFrame : ISentrySerializable
{
    // @property (copy, nonatomic) NSString * _Nullable symbolAddress;
    [NullAllowed, Export("symbolAddress")]
    string SymbolAddress { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable fileName;
    [NullAllowed, Export("fileName")]
    string FileName { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable function;
    [NullAllowed, Export("function")]
    string Function { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable module;
    [NullAllowed, Export("module")]
    string Module { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable package;
    [NullAllowed, Export("package")]
    string Package { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable imageAddress;
    [NullAllowed, Export("imageAddress")]
    string ImageAddress { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable platform;
    [NullAllowed, Export("platform")]
    string Platform { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable instructionAddress;
    [NullAllowed, Export("instructionAddress")]
    string InstructionAddress { get; set; }

    // @property (nonatomic) NSUInteger instruction;
    [Export("instruction")]
    nuint Instruction { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable lineNumber;
    [NullAllowed, Export("lineNumber", ArgumentSemantic.Copy)]
    NSNumber LineNumber { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable columnNumber;
    [NullAllowed, Export("columnNumber", ArgumentSemantic.Copy)]
    NSNumber ColumnNumber { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable contextLine;
    [NullAllowed, Export("contextLine")]
    string ContextLine { get; set; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nullable preContext;
    [NullAllowed, Export("preContext", ArgumentSemantic.Copy)]
    string[] PreContext { get; set; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nullable postContext;
    [NullAllowed, Export("postContext", ArgumentSemantic.Copy)]
    string[] PostContext { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable inApp;
    [NullAllowed, Export("inApp", ArgumentSemantic.Copy)]
    NSNumber InApp { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable stackStart;
    [NullAllowed, Export("stackStart", ArgumentSemantic.Copy)]
    NSNumber StackStart { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable vars;
    [NullAllowed, Export("vars", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> Vars { get; set; }
}

// @interface SentryGeo : NSObject <SentrySerializable, NSCopying>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryGeo : ISentrySerializable
{
    // @property (copy, atomic) NSString * _Nullable city;
    [NullAllowed, Export("city")]
    string City { get; set; }

    // @property (copy, atomic) NSString * _Nullable countryCode;
    [NullAllowed, Export("countryCode")]
    string CountryCode { get; set; }

    // @property (copy, atomic) NSString * _Nullable region;
    [NullAllowed, Export("region")]
    string Region { get; set; }

    // -(BOOL)isEqualToGeo:(SentryGeo * _Nonnull)geo;
    [Export("isEqualToGeo:")]
    bool IsEqualToGeo(SentryGeo geo);

    // -(NSUInteger)hash;
    [Export("hash")]
    nuint Hash { get; }
}

// @interface SentryHttpStatusCodeRange : NSObject
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryHttpStatusCodeRange
{
    // @property (readonly, nonatomic) NSInteger min;
    [Export("min")]
    nint Min { get; }

    // @property (readonly, nonatomic) NSInteger max;
    [Export("max")]
    nint Max { get; }

    // -(instancetype _Nonnull)initWithMin:(NSInteger)min max:(NSInteger)max;
    [Export("initWithMin:max:")]
    NativeHandle Constructor(nint min, nint max);

    // -(instancetype _Nonnull)initWithStatusCode:(NSInteger)statusCode;
    [Export("initWithStatusCode:")]
    NativeHandle Constructor(nint statusCode);
}

// @interface SentrySpanContext : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentrySpanContext : ISentrySerializable
{
    // @property (readonly, nonatomic) SentryId * _Nonnull traceId;
    [Export("traceId")]
    SentryId TraceId { get; }

    // @property (readonly, nonatomic) SentrySpanId * _Nonnull spanId;
    [Export("spanId")]
    SentrySpanId SpanId { get; }

    // @property (readonly, nonatomic) SentrySpanId * _Nullable parentSpanId;
    [NullAllowed, Export("parentSpanId")]
    SentrySpanId ParentSpanId { get; }

    // @property (readonly, nonatomic) SentrySampleDecision sampled;
    [Export("sampled")]
    SentrySampleDecision Sampled { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull operation;
    [Export("operation")]
    string Operation { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable spanDescription;
    [NullAllowed, Export("spanDescription")]
    string SpanDescription { get; }

    // @property (copy, nonatomic) NSString * _Nonnull origin;
    [Export("origin")]
    string Origin { get; set; }

    // -(instancetype _Nonnull)initWithOperation:(NSString * _Nonnull)operation;
    [Export("initWithOperation:")]
    NativeHandle Constructor(string operation);

    // -(instancetype _Nonnull)initWithOperation:(NSString * _Nonnull)operation sampled:(SentrySampleDecision)sampled;
    [Export("initWithOperation:sampled:")]
    NativeHandle Constructor(string operation, SentrySampleDecision sampled);

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId parentId:(SentrySpanId * _Nullable)parentId operation:(NSString * _Nonnull)operation sampled:(SentrySampleDecision)sampled;
    [Export("initWithTraceId:spanId:parentId:operation:sampled:")]
    NativeHandle Constructor(SentryId traceId, SentrySpanId spanId, [NullAllowed] SentrySpanId parentId, string operation, SentrySampleDecision sampled);

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId parentId:(SentrySpanId * _Nullable)parentId operation:(NSString * _Nonnull)operation spanDescription:(NSString * _Nullable)description sampled:(SentrySampleDecision)sampled;
    [Export("initWithTraceId:spanId:parentId:operation:spanDescription:sampled:")]
    NativeHandle Constructor(SentryId traceId, SentrySpanId spanId, [NullAllowed] SentrySpanId parentId, string operation, [NullAllowed] string description, SentrySampleDecision sampled);
}

// @protocol SentrySpan <SentrySerializable>
[Protocol]
[Internal]
[Model]
[BaseType (typeof(NSObject))]
interface SentrySpan : ISentrySerializable
{
    // @required @property (nonatomic, strong) SentryId * _Nonnull traceId;
    [Abstract]
    [Export("traceId", ArgumentSemantic.Strong)]
    SentryId TraceId { get; set; }

    // @required @property (nonatomic, strong) SentrySpanId * _Nonnull spanId;
    [Abstract]
    [Export("spanId", ArgumentSemantic.Strong)]
    SentrySpanId SpanId { get; set; }

    // @required @property (nonatomic, strong) SentrySpanId * _Nullable parentSpanId;
    [Abstract]
    [NullAllowed, Export("parentSpanId", ArgumentSemantic.Strong)]
    SentrySpanId ParentSpanId { get; set; }

    // @required @property (nonatomic) SentrySampleDecision sampled;
    [Abstract]
    [Export("sampled", ArgumentSemantic.Assign)]
    SentrySampleDecision Sampled { get; set; }

    // @required @property (copy, nonatomic) NSString * _Nonnull operation;
    [Abstract]
    [Export("operation")]
    string Operation { get; set; }

    // @required @property (copy, nonatomic) NSString * _Nonnull origin;
    [Abstract]
    [Export("origin")]
    string Origin { get; set; }

    // @required @property (copy, nonatomic) NSString * _Nullable spanDescription;
    [Abstract]
    [NullAllowed, Export("spanDescription")]
    string SpanDescription { get; set; }

    // @required @property (nonatomic) SentrySpanStatus status;
    [Abstract]
    [Export("status", ArgumentSemantic.Assign)]
    SentrySpanStatus Status { get; set; }

    // @required @property (nonatomic, strong) NSDate * _Nullable timestamp;
    [Abstract]
    [NullAllowed, Export("timestamp", ArgumentSemantic.Strong)]
    NSDate Timestamp { get; set; }

    // @required @property (nonatomic, strong) NSDate * _Nullable startTimestamp;
    [Abstract]
    [NullAllowed, Export("startTimestamp", ArgumentSemantic.Strong)]
    NSDate StartTimestamp { get; set; }

    // @required @property (readonly) NSDictionary<NSString *,id> * _Nonnull data;
    [Abstract]
    [Export("data")]
    NSDictionary<NSString, NSObject> Data { get; }

    // @required @property (readonly) NSDictionary<NSString *,NSString *> * _Nonnull tags;
    [Abstract]
    [Export("tags")]
    NSDictionary<NSString, NSString> Tags { get; }

    // @required @property (readonly) BOOL isFinished;
    [Abstract]
    [Export("isFinished")]
    bool IsFinished { get; }

    // @required @property (readonly, nonatomic) SentryTraceContext * _Nullable traceContext;
    [Abstract]
    [NullAllowed, Export("traceContext")]
    SentryTraceContext TraceContext { get; }

    // @required -(id<SentrySpan> _Nonnull)startChildWithOperation:(NSString * _Nonnull)operation __attribute__((swift_name("startChild(operation:)")));
    [Abstract]
    [Export("startChildWithOperation:")]
    SentrySpan StartChildWithOperation(string operation);

    // @required -(id<SentrySpan> _Nonnull)startChildWithOperation:(NSString * _Nonnull)operation description:(NSString * _Nullable)description __attribute__((swift_name("startChild(operation:description:)")));
    [Abstract]
    [Export("startChildWithOperation:description:")]
    SentrySpan StartChildWithOperation(string operation, [NullAllowed] string description);

    // @required -(void)setDataValue:(id _Nullable)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setData(value:key:)")));
    [Abstract]
    [Export("setDataValue:forKey:")]
    void SetDataValue([NullAllowed] NSObject value, string key);

    // @required -(void)setExtraValue:(id _Nullable)value forKey:(NSString * _Nonnull)key __attribute__((deprecated(""))) __attribute__((swift_name("setExtra(value:key:)")));
    [Abstract]
    [Export("setExtraValue:forKey:")]
    void SetExtraValue([NullAllowed] NSObject value, string key);

    // @required -(void)removeDataForKey:(NSString * _Nonnull)key __attribute__((swift_name("removeData(key:)")));
    [Abstract]
    [Export("removeDataForKey:")]
    void RemoveDataForKey(string key);

    // @required -(void)setTagValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setTag(value:key:)")));
    [Abstract]
    [Export("setTagValue:forKey:")]
    void SetTagValue(string value, string key);

    // @required -(void)removeTagForKey:(NSString * _Nonnull)key __attribute__((swift_name("removeTag(key:)")));
    [Abstract]
    [Export("removeTagForKey:")]
    void RemoveTagForKey(string key);

    // @required -(void)setMeasurement:(NSString * _Nonnull)name value:(NSNumber * _Nonnull)value __attribute__((swift_name("setMeasurement(name:value:)")));
    [Abstract]
    [Export("setMeasurement:value:")]
    void SetMeasurement(string name, NSNumber value);

    // @required -(void)setMeasurement:(NSString * _Nonnull)name value:(NSNumber * _Nonnull)value unit:(SentryMeasurementUnit * _Nonnull)unit __attribute__((swift_name("setMeasurement(name:value:unit:)")));
    [Abstract]
    [Export("setMeasurement:value:unit:")]
    void SetMeasurement(string name, NSNumber value, SentryMeasurementUnit unit);

    // @required -(void)finish;
    [Abstract]
    [Export("finish")]
    void Finish();

    // @required -(void)finishWithStatus:(SentrySpanStatus)status __attribute__((swift_name("finish(status:)")));
    [Abstract]
    [Export("finishWithStatus:")]
    void FinishWithStatus(SentrySpanStatus status);

    // @required -(SentryTraceHeader * _Nonnull)toTraceHeader;
    [Abstract]
    [Export("toTraceHeader")]
    SentryTraceHeader ToTraceHeader();

    // @required -(NSString * _Nullable)baggageHttpHeader;
    [Abstract]
    [NullAllowed, Export("baggageHttpHeader")]
    string BaggageHttpHeader { get; }

    // @required -(NSDictionary<NSString *,id> * _Nonnull)serialize;
    [Abstract]
    [Export("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @interface SentryHub : NSObject
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryHub
{
    // -(instancetype _Nonnull)initWithClient:(SentryClient * _Nullable)client andScope:(SentryScope * _Nullable)scope;
    [Export("initWithClient:andScope:")]
    NativeHandle Constructor([NullAllowed] SentryClient client, [NullAllowed] SentryScope scope);

    // -(void)startSession;
    [Export("startSession")]
    void StartSession();

    // -(void)endSession;
    [Export("endSession")]
    void EndSession();

    // -(void)endSessionWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export("endSessionWithTimestamp:")]
    void EndSessionWithTimestamp(NSDate timestamp);

    // -(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event __attribute__((swift_name("capture(event:)")));
    [Export("captureEvent:")]
    SentryId CaptureEvent(SentryEvent @event);

    // -(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(event:scope:)")));
    [Export("captureEvent:withScope:")]
    SentryId CaptureEvent(SentryEvent @event, SentryScope scope);

    // -(id<SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation __attribute__((swift_name("startTransaction(name:operation:)")));
    [Export("startTransactionWithName:operation:")]
    SentrySpan StartTransactionWithName(string name, string operation);

    // -(id<SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation bindToScope:(BOOL)bindToScope __attribute__((swift_name("startTransaction(name:operation:bindToScope:)")));
    [Export("startTransactionWithName:operation:bindToScope:")]
    SentrySpan StartTransactionWithName(string name, string operation, bool bindToScope);

    // -(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext __attribute__((swift_name("startTransaction(transactionContext:)")));
    [Export("startTransactionWithContext:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext);

    // -(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope __attribute__((swift_name("startTransaction(transactionContext:bindToScope:)")));
    [Export("startTransactionWithContext:bindToScope:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext, bool bindToScope);

    // -(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext __attribute__((swift_name("startTransaction(transactionContext:bindToScope:customSamplingContext:)")));
    [Export("startTransactionWithContext:bindToScope:customSamplingContext:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext, bool bindToScope, NSDictionary<NSString, NSObject> customSamplingContext);

    // -(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext __attribute__((swift_name("startTransaction(transactionContext:customSamplingContext:)")));
    [Export("startTransactionWithContext:customSamplingContext:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext, NSDictionary<NSString, NSObject> customSamplingContext);

    // -(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error __attribute__((swift_name("capture(error:)")));
    [Export("captureError:")]
    SentryId CaptureError(NSError error);

    // -(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(error:scope:)")));
    [Export("captureError:withScope:")]
    SentryId CaptureError(NSError error, SentryScope scope);

    // -(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception __attribute__((swift_name("capture(exception:)")));
    [Export("captureException:")]
    SentryId CaptureException(NSException exception);

    // -(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(exception:scope:)")));
    [Export("captureException:withScope:")]
    SentryId CaptureException(NSException exception, SentryScope scope);

    // -(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message __attribute__((swift_name("capture(message:)")));
    [Export("captureMessage:")]
    SentryId CaptureMessage(string message);

    // -(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScope:(SentryScope * _Nonnull)scope __attribute__((swift_name("capture(message:scope:)")));
    [Export("captureMessage:withScope:")]
    SentryId CaptureMessage(string message, SentryScope scope);

    // -(void)captureFeedback:(SentryFeedback * _Nonnull)feedback;
    [Export("captureFeedback:")]
    void CaptureFeedback(SentryFeedback feedback);

    // -(void)configureScope:(void (^ _Nonnull)(SentryScope * _Nonnull))callback;
    [Export("configureScope:")]
    void ConfigureScope(Action<SentryScope> callback);

    // -(void)addBreadcrumb:(SentryBreadcrumb * _Nonnull)crumb;
    [Export("addBreadcrumb:")]
    void AddBreadcrumb(SentryBreadcrumb crumb);

    // -(SentryClient * _Nullable)getClient;
    [NullAllowed, Export("getClient")]
    SentryClient Client { get; }

    // @property (readonly, nonatomic, strong) SentryScope * _Nonnull scope;
    [Export("scope", ArgumentSemantic.Strong)]
    SentryScope Scope { get; }

    // -(void)bindClient:(SentryClient * _Nullable)client;
    [Export("bindClient:")]
    void BindClient([NullAllowed] SentryClient client);

    // -(BOOL)hasIntegration:(NSString * _Nonnull)integrationName;
    [Export("hasIntegration:")]
    bool HasIntegration(string integrationName);

    // -(BOOL)isIntegrationInstalled:(Class _Nonnull)integrationClass;
    [Export("isIntegrationInstalled:")]
    bool IsIntegrationInstalled(Class integrationClass);

    // -(void)setUser:(SentryUser * _Nullable)user;
    [Export("setUser:")]
    void SetUser([NullAllowed] SentryUser user);

    // -(void)reportFullyDisplayed;
    [Export("reportFullyDisplayed")]
    void ReportFullyDisplayed();

    // -(void)flush:(NSTimeInterval)timeout __attribute__((swift_name("flush(timeout:)")));
    [Export("flush:")]
    void Flush(double timeout);

    // -(void)close;
    [Export("close")]
    void Close();
}

// @interface SentryMeasurementUnit : NSObject <NSCopying>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryMeasurementUnit
{
    // -(instancetype _Nonnull)initWithUnit:(NSString * _Nonnull)unit;
    [Export("initWithUnit:")]
    NativeHandle Constructor(string unit);

    // @property (readonly, copy) NSString * _Nonnull unit;
    [Export("unit")]
    string Unit { get; }

    // @property (readonly, copy, class) SentryMeasurementUnit * _Nonnull none;
    [Static]
    [Export("none", ArgumentSemantic.Copy)]
    SentryMeasurementUnit None { get; }
}

// @interface SentryMeasurementUnitDuration : SentryMeasurementUnit
[BaseType(typeof(SentryMeasurementUnit))]
[DisableDefaultCtor]
[Internal]
interface SentryMeasurementUnitDuration
{
    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull nanosecond;
    [Static]
    [Export("nanosecond", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Nanosecond { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull microsecond;
    [Static]
    [Export("microsecond", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Microsecond { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull millisecond;
    [Static]
    [Export("millisecond", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Millisecond { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull second;
    [Static]
    [Export("second", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Second { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull minute;
    [Static]
    [Export("minute", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Minute { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull hour;
    [Static]
    [Export("hour", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Hour { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull day;
    [Static]
    [Export("day", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Day { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitDuration * _Nonnull week;
    [Static]
    [Export("week", ArgumentSemantic.Copy)]
    SentryMeasurementUnitDuration Week { get; }
}

// @interface SentryMeasurementUnitInformation : SentryMeasurementUnit
[BaseType(typeof(SentryMeasurementUnit))]
[DisableDefaultCtor]
[Internal]
interface SentryMeasurementUnitInformation
{
    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull bit;
    [Static]
    [Export("bit", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Bit { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull byte;
    [Static]
    [Export("byte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Byte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull kilobyte;
    [Static]
    [Export("kilobyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Kilobyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull kibibyte;
    [Static]
    [Export("kibibyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Kibibyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull megabyte;
    [Static]
    [Export("megabyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Megabyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull mebibyte;
    [Static]
    [Export("mebibyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Mebibyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull gigabyte;
    [Static]
    [Export("gigabyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Gigabyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull gibibyte;
    [Static]
    [Export("gibibyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Gibibyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull terabyte;
    [Static]
    [Export("terabyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Terabyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull tebibyte;
    [Static]
    [Export("tebibyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Tebibyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull petabyte;
    [Static]
    [Export("petabyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Petabyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull pebibyte;
    [Static]
    [Export("pebibyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Pebibyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull exabyte;
    [Static]
    [Export("exabyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Exabyte { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitInformation * _Nonnull exbibyte;
    [Static]
    [Export("exbibyte", ArgumentSemantic.Copy)]
    SentryMeasurementUnitInformation Exbibyte { get; }
}

// @interface SentryMeasurementUnitFraction : SentryMeasurementUnit
[BaseType(typeof(SentryMeasurementUnit))]
[DisableDefaultCtor]
[Internal]
interface SentryMeasurementUnitFraction
{
    // @property (readonly, copy, class) SentryMeasurementUnitFraction * _Nonnull ratio;
    [Static]
    [Export("ratio", ArgumentSemantic.Copy)]
    SentryMeasurementUnitFraction Ratio { get; }

    // @property (readonly, copy, class) SentryMeasurementUnitFraction * _Nonnull percent;
    [Static]
    [Export("percent", ArgumentSemantic.Copy)]
    SentryMeasurementUnitFraction Percent { get; }
}

// @interface SentryMechanism : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryMechanism : ISentrySerializable
{
    // @property (copy, nonatomic) NSString * _Nonnull type;
    [Export("type")]
    string Type { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable desc;
    [NullAllowed, Export("desc")]
    string Desc { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,id> * _Nullable data;
    [NullAllowed, Export("data", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> Data { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable handled;
    [NullAllowed, Export("handled", ArgumentSemantic.Copy)]
    NSNumber Handled { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable synthetic;
    [NullAllowed, Export("synthetic", ArgumentSemantic.Copy)]
    NSNumber Synthetic { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable helpLink;
    [NullAllowed, Export("helpLink")]
    string HelpLink { get; set; }

    // @property (nonatomic, strong) SentryMechanismMeta * _Nullable meta;
    [NullAllowed, Export("meta", ArgumentSemantic.Strong)]
    SentryMechanismMeta Meta { get; set; }

    // -(instancetype _Nonnull)initWithType:(NSString * _Nonnull)type;
    [Export("initWithType:")]
    NativeHandle Constructor(string type);
}

// @interface SentryMechanismMeta : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryMechanismMeta : ISentrySerializable
{
    // @property (nonatomic, strong) NSDictionary<NSString *,id> * _Nullable signal;
    [NullAllowed, Export("signal", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> Signal { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,id> * _Nullable machException;
    [NullAllowed, Export("machException", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> MachException { get; set; }

    // @property (nonatomic, strong) SentryNSError * _Nullable error;
    [NullAllowed, Export("error", ArgumentSemantic.Strong)]
    SentryNSError Error { get; set; }
}

// @interface SentryMessage : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryMessage : ISentrySerializable
{
    // -(instancetype _Nonnull)initWithFormatted:(NSString * _Nonnull)formatted;
    [Export("initWithFormatted:")]
    NativeHandle Constructor(string formatted);

    // @property (readonly, copy, nonatomic) NSString * _Nonnull formatted;
    [Export("formatted")]
    string Formatted { get; }

    // @property (copy, nonatomic) NSString * _Nullable message;
    [NullAllowed, Export("message")]
    string Message { get; set; }

    // @property (nonatomic, strong) NSArray<NSString *> * _Nullable params;
    [NullAllowed, Export("params", ArgumentSemantic.Strong)]
    string[] Params { get; set; }
}

// @interface SentryNSError : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryNSError : ISentrySerializable
{
    // @property (copy, nonatomic) NSString * _Nonnull domain;
    [Export("domain")]
    string Domain { get; set; }

    // @property (assign, nonatomic) NSInteger code;
    [Export("code")]
    nint Code { get; set; }

    // -(instancetype _Nonnull)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code;
    [Export("initWithDomain:code:")]
    NativeHandle Constructor(string domain, nint code);
}

// @interface SentryOptions : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentryOptions
{
    // @property (nonatomic, strong) NSString * _Nullable dsn;
    [NullAllowed, Export("dsn", ArgumentSemantic.Strong)]
    string Dsn { get; set; }

    // @property (nonatomic, strong) SentryDsn * _Nullable parsedDsn;
    [NullAllowed, Export("parsedDsn", ArgumentSemantic.Strong)]
    SentryDsn ParsedDsn { get; set; }

    // @property (assign, nonatomic) BOOL debug;
    [Export("debug")]
    bool Debug { get; set; }

    // @property (assign, nonatomic) SentryLevel diagnosticLevel;
    [Export("diagnosticLevel", ArgumentSemantic.Assign)]
    SentryLevel DiagnosticLevel { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export("releaseName")]
    string ReleaseName { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable dist;
    [NullAllowed, Export("dist")]
    string Dist { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull environment;
    [Export("environment")]
    string Environment { get; set; }

    // @property (assign, nonatomic) BOOL enabled;
    [Export("enabled")]
    bool Enabled { get; set; }

    // @property (assign, nonatomic) NSTimeInterval shutdownTimeInterval;
    [Export("shutdownTimeInterval")]
    double ShutdownTimeInterval { get; set; }

    // @property (assign, nonatomic) BOOL enableCrashHandler;
    [Export("enableCrashHandler")]
    bool EnableCrashHandler { get; set; }

    // @property (assign, nonatomic) BOOL enableSigtermReporting;
    [Export("enableSigtermReporting")]
    bool EnableSigtermReporting { get; set; }

    // @property (assign, nonatomic) NSUInteger maxBreadcrumbs;
    [Export("maxBreadcrumbs")]
    nuint MaxBreadcrumbs { get; set; }

    // @property (assign, nonatomic) BOOL enableNetworkBreadcrumbs;
    [Export("enableNetworkBreadcrumbs")]
    bool EnableNetworkBreadcrumbs { get; set; }

    // @property (assign, nonatomic) NSUInteger maxCacheItems;
    [Export("maxCacheItems")]
    nuint MaxCacheItems { get; set; }

    // @property (copy, nonatomic) SentryBeforeSendEventCallback _Nullable beforeSend;
    [NullAllowed, Export("beforeSend", ArgumentSemantic.Copy)]
    SentryBeforeSendEventCallback BeforeSend { get; set; }

    // @property (copy, nonatomic) SentryBeforeSendSpanCallback _Nullable beforeSendSpan;
    [NullAllowed, Export("beforeSendSpan", ArgumentSemantic.Copy)]
    SentryBeforeSendSpanCallback BeforeSendSpan { get; set; }

    // @property (copy, nonatomic) SentryBeforeSendLogCallback _Nullable beforeSendLog;
    [NullAllowed, Export("beforeSendLog", ArgumentSemantic.Copy)]
    SentryBeforeSendLogCallback BeforeSendLog { get; set; }

    // @property (copy, nonatomic) SentryBeforeBreadcrumbCallback _Nullable beforeBreadcrumb;
    [NullAllowed, Export("beforeBreadcrumb", ArgumentSemantic.Copy)]
    SentryBeforeBreadcrumbCallback BeforeBreadcrumb { get; set; }

    // @property (copy, nonatomic) SentryBeforeCaptureScreenshotCallback _Nullable beforeCaptureScreenshot;
    [NullAllowed, Export("beforeCaptureScreenshot", ArgumentSemantic.Copy)]
    SentryBeforeCaptureScreenshotCallback BeforeCaptureScreenshot { get; set; }

    // @property (copy, nonatomic) SentryBeforeCaptureScreenshotCallback _Nullable beforeCaptureViewHierarchy;
    [NullAllowed, Export("beforeCaptureViewHierarchy", ArgumentSemantic.Copy)]
    SentryBeforeCaptureScreenshotCallback BeforeCaptureViewHierarchy { get; set; }

    // @property (copy, nonatomic) SentryOnCrashedLastRunCallback _Nullable onCrashedLastRun;
    [NullAllowed, Export("onCrashedLastRun", ArgumentSemantic.Copy)]
    SentryOnCrashedLastRunCallback OnCrashedLastRun { get; set; }

    // @property (copy, nonatomic) DEPRECATED_MSG_ATTRIBUTE("Setting `SentryOptions.integrations` is deprecated. Integrations should be enabled or  disabled using their respective `SentryOptions.enable*` property.") NSArray<NSString *> * integrations __attribute__((deprecated("Setting `SentryOptions.integrations` is deprecated. Integrations should be enabled or disabled using their respective `SentryOptions.enable*` property.")));
    [Export("integrations", ArgumentSemantic.Copy)]
    string[] Integrations { get; set; }

    // +(NSArray<NSString *> * _Nonnull)defaultIntegrations;
    [Static]
    [Export("defaultIntegrations")]
    string[] DefaultIntegrations { get; }

    // @property (copy, nonatomic) NSNumber * _Nullable sampleRate;
    [NullAllowed, Export("sampleRate", ArgumentSemantic.Copy)]
    NSNumber SampleRate { get; set; }

    // @property (assign, nonatomic) BOOL enableAutoSessionTracking;
    [Export("enableAutoSessionTracking")]
    bool EnableAutoSessionTracking { get; set; }

    // @property (assign, nonatomic) BOOL enableGraphQLOperationTracking;
    [Export("enableGraphQLOperationTracking")]
    bool EnableGraphQLOperationTracking { get; set; }

    // @property (assign, nonatomic) BOOL enableWatchdogTerminationTracking;
    [Export("enableWatchdogTerminationTracking")]
    bool EnableWatchdogTerminationTracking { get; set; }

    // @property (assign, nonatomic) NSUInteger sessionTrackingIntervalMillis;
    [Export("sessionTrackingIntervalMillis")]
    nuint SessionTrackingIntervalMillis { get; set; }

    // @property (assign, nonatomic) BOOL attachStacktrace;
    [Export("attachStacktrace")]
    bool AttachStacktrace { get; set; }

    // @property (assign, nonatomic) NSUInteger maxAttachmentSize;
    [Export("maxAttachmentSize")]
    nuint MaxAttachmentSize { get; set; }

    // @property (assign, nonatomic) BOOL sendDefaultPii;
    [Export("sendDefaultPii")]
    bool SendDefaultPii { get; set; }

    // @property (assign, nonatomic) BOOL enableAutoPerformanceTracing;
    [Export("enableAutoPerformanceTracing")]
    bool EnableAutoPerformanceTracing { get; set; }

    // @property (assign, nonatomic) BOOL enablePerformanceV2;
    [Export("enablePerformanceV2")]
    bool EnablePerformanceV2 { get; set; }

    // @property (assign, nonatomic) BOOL enablePersistingTracesWhenCrashing;
    [Export("enablePersistingTracesWhenCrashing")]
    bool EnablePersistingTracesWhenCrashing { get; set; }

    // @property (nonatomic) SentryScope * _Nonnull (^ _Nonnull)(SentryScope * _Nonnull) initialScope;
    [Export("initialScope", ArgumentSemantic.Assign)]
    Func<SentryScope, SentryScope> InitialScope { get; set; }

    // @property (assign, nonatomic) BOOL enableUIViewControllerTracing;
    [Export("enableUIViewControllerTracing")]
    bool EnableUIViewControllerTracing { get; set; }

    // @property (assign, nonatomic) BOOL attachScreenshot;
    [Export("attachScreenshot")]
    bool AttachScreenshot { get; set; }

    // @property (nonatomic, strong) SentryViewScreenshotOptions * _Nonnull screenshot;
    [Export("screenshot", ArgumentSemantic.Strong)]
    SentryViewScreenshotOptions Screenshot { get; set; }

    // @property (assign, nonatomic) BOOL attachViewHierarchy;
    [Export("attachViewHierarchy")]
    bool AttachViewHierarchy { get; set; }

    // @property (assign, nonatomic) BOOL reportAccessibilityIdentifier;
    [Export("reportAccessibilityIdentifier")]
    bool ReportAccessibilityIdentifier { get; set; }

    // @property (assign, nonatomic) BOOL enableUserInteractionTracing;
    [Export("enableUserInteractionTracing")]
    bool EnableUserInteractionTracing { get; set; }

    // @property (assign, nonatomic) NSTimeInterval idleTimeout;
    [Export("idleTimeout")]
    double IdleTimeout { get; set; }

    // @property (assign, nonatomic) BOOL enablePreWarmedAppStartTracing;
    [Export("enablePreWarmedAppStartTracing")]
    bool EnablePreWarmedAppStartTracing { get; set; }

    // @property (nonatomic, strong) SentryReplayOptions * _Nonnull sessionReplay;
    [Export("sessionReplay", ArgumentSemantic.Strong)]
    SentryReplayOptions SessionReplay { get; set; }

    // @property (assign, nonatomic) BOOL enableNetworkTracking;
    [Export("enableNetworkTracking")]
    bool EnableNetworkTracking { get; set; }

    // @property (assign, nonatomic) BOOL enableFileIOTracing;
    [Export("enableFileIOTracing")]
    bool EnableFileIOTracing { get; set; }

    // @property (nonatomic) BOOL enableTracing __attribute__((deprecated("Use tracesSampleRate or tracesSampler instead")));
    [Export("enableTracing")]
    bool EnableTracing { get; set; }

    // @property (nonatomic, strong) NSNumber * _Nullable tracesSampleRate;
    [NullAllowed, Export("tracesSampleRate", ArgumentSemantic.Strong)]
    NSNumber TracesSampleRate { get; set; }

    // @property (nonatomic) SentryTracesSamplerCallback _Nullable tracesSampler;
    [NullAllowed, Export("tracesSampler", ArgumentSemantic.Assign)]
    SentryTracesSamplerCallback TracesSampler { get; set; }

    // @property (readonly, assign, nonatomic) BOOL isTracingEnabled;
    [Export("isTracingEnabled")]
    bool IsTracingEnabled { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull inAppIncludes;
    [Export("inAppIncludes", ArgumentSemantic.Copy)]
    string[] InAppIncludes { get; }

    // -(void)addInAppInclude:(NSString * _Nonnull)inAppInclude;
    [Export("addInAppInclude:")]
    void AddInAppInclude(string inAppInclude);

    // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull inAppExcludes;
    [Export("inAppExcludes", ArgumentSemantic.Copy)]
    string[] InAppExcludes { get; }

    // -(void)addInAppExclude:(NSString * _Nonnull)inAppExclude;
    [Export("addInAppExclude:")]
    void AddInAppExclude(string inAppExclude);

    [Wrap("WeakUrlSessionDelegate")]
    [NullAllowed]
    NSUrlSessionDelegate UrlSessionDelegate { get; set; }

    // @property (nonatomic, weak) id<NSURLSessionDelegate> _Nullable urlSessionDelegate;
    [NullAllowed, Export("urlSessionDelegate", ArgumentSemantic.Weak)]
    NSObject WeakUrlSessionDelegate { get; set; }

    // @property (nonatomic, strong) NSURLSession * _Nullable urlSession;
    [NullAllowed, Export("urlSession", ArgumentSemantic.Strong)]
    NSUrlSession UrlSession { get; set; }

    // @property (assign, nonatomic) BOOL enableSwizzling;
    [Export("enableSwizzling")]
    bool EnableSwizzling { get; set; }

    // @property (nonatomic, strong) NSSet<NSString *> * _Nonnull swizzleClassNameExcludes;
    [Export("swizzleClassNameExcludes", ArgumentSemantic.Strong)]
    NSSet<NSString> SwizzleClassNameExcludes { get; set; }

    // @property (assign, nonatomic) BOOL enableCoreDataTracing;
    [Export("enableCoreDataTracing")]
    bool EnableCoreDataTracing { get; set; }

    // @property (copy, nonatomic) SentryProfilingConfigurationBlock _Nullable configureProfiling;
    [NullAllowed, Export("configureProfiling", ArgumentSemantic.Copy)]
    SentryProfilingConfigurationBlock ConfigureProfiling { get; set; }

    // @property (assign, nonatomic) BOOL enableAppLaunchProfiling __attribute__((deprecated("This property is deprecated and will be removed in a future version of the SDK. See SentryProfileOptions.startOnAppStart and SentryProfileOptions.lifecycle")));
    [Export("enableAppLaunchProfiling")]
    bool EnableAppLaunchProfiling { get; set; }

    // @property (nonatomic, strong) DEPRECATED_MSG_ATTRIBUTE("This property is deprecated and will be removed in a future version of the SDK. See  SentryProfileOptions.sessionSampleRate") NSNumber * profilesSampleRate __attribute__((deprecated("This property is deprecated and will be removed in a future version of the SDK. See SentryProfileOptions.sessionSampleRate")));
    [Export("profilesSampleRate", ArgumentSemantic.Strong)]
    NSNumber ProfilesSampleRate { get; set; }

    // @property (nonatomic) DEPRECATED_MSG_ATTRIBUTE("This property is deprecated and will be removed in a future version of the SDK. See  SentryProfileOptions.sessionSampleRate") SentryTracesSamplerCallback profilesSampler __attribute__((deprecated("This property is deprecated and will be removed in a future version of the SDK. See SentryProfileOptions.sessionSampleRate")));
    [Export("profilesSampler", ArgumentSemantic.Assign)]
    SentryTracesSamplerCallback ProfilesSampler { get; set; }

    // @property (readonly, assign, nonatomic) BOOL isProfilingEnabled __attribute__((deprecated("This property is deprecated and will be removed in a future version of the SDK")));
    [Export("isProfilingEnabled")]
    bool IsProfilingEnabled { get; }

    // @property (assign, nonatomic) BOOL enableProfiling __attribute__((deprecated("Use profilesSampleRate or profilesSampler instead. This property will be removed in a future version of the SDK")));
    [Export("enableProfiling")]
    bool EnableProfiling { get; set; }

    // @property (assign, nonatomic) BOOL sendClientReports;
    [Export("sendClientReports")]
    bool SendClientReports { get; set; }

    // @property (assign, nonatomic) BOOL enableAppHangTracking;
    [Export("enableAppHangTracking")]
    bool EnableAppHangTracking { get; set; }

    // @property (assign, nonatomic) BOOL enableAppHangTrackingV2;
    [Export("enableAppHangTrackingV2")]
    bool EnableAppHangTrackingV2 { get; set; }

    // @property (assign, nonatomic) BOOL enableReportNonFullyBlockingAppHangs;
    [Export("enableReportNonFullyBlockingAppHangs")]
    bool EnableReportNonFullyBlockingAppHangs { get; set; }

    // @property (assign, nonatomic) NSTimeInterval appHangTimeoutInterval;
    [Export("appHangTimeoutInterval")]
    double AppHangTimeoutInterval { get; set; }

    // @property (assign, nonatomic) BOOL enableAutoBreadcrumbTracking;
    [Export("enableAutoBreadcrumbTracking")]
    bool EnableAutoBreadcrumbTracking { get; set; }

    // @property (retain, nonatomic) NSArray * _Nonnull tracePropagationTargets;
    [Export("tracePropagationTargets", ArgumentSemantic.Retain)]
    NSObject[] TracePropagationTargets { get; set; }

    // @property (assign, nonatomic) BOOL enableCaptureFailedRequests;
    [Export("enableCaptureFailedRequests")]
    bool EnableCaptureFailedRequests { get; set; }

    // @property (nonatomic, strong) NSArray<SentryHttpStatusCodeRange *> * _Nonnull failedRequestStatusCodes;
    [Export("failedRequestStatusCodes", ArgumentSemantic.Strong)]
    SentryHttpStatusCodeRange[] FailedRequestStatusCodes { get; set; }

    // @property (nonatomic, strong) NSArray * _Nonnull failedRequestTargets;
    [Export("failedRequestTargets", ArgumentSemantic.Strong)]
    NSObject[] FailedRequestTargets { get; set; }

    // @property (assign, nonatomic) BOOL enableMetricKit __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(maccatalyst, introduced=15.0))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
    [NoWatch, NoTV, MacCatalyst(15, 0)]
    [Export("enableMetricKit")]
    bool EnableMetricKit { get; set; }

    // @property (assign, nonatomic) BOOL enableMetricKitRawPayload __attribute__((availability(ios, introduced=15.0))) __attribute__((availability(macos, introduced=12.0))) __attribute__((availability(maccatalyst, introduced=15.0))) __attribute__((availability(tvos, unavailable))) __attribute__((availability(watchos, unavailable)));
    [NoWatch, NoTV, MacCatalyst(15, 0)]
    [Export("enableMetricKitRawPayload")]
    bool EnableMetricKitRawPayload { get; set; }

    // @property (nonatomic) BOOL enableTimeToFullDisplayTracing;
    [Export("enableTimeToFullDisplayTracing")]
    bool EnableTimeToFullDisplayTracing { get; set; }

    // @property (assign, nonatomic) BOOL swiftAsyncStacktraces;
    [Export("swiftAsyncStacktraces")]
    bool SwiftAsyncStacktraces { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull cacheDirectoryPath;
    [Export("cacheDirectoryPath")]
    string CacheDirectoryPath { get; set; }

    // @property (assign, nonatomic) BOOL enableSpotlight;
    [Export("enableSpotlight")]
    bool EnableSpotlight { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull spotlightUrl;
    [Export("spotlightUrl")]
    string SpotlightUrl { get; set; }

    // @property (readonly, nonatomic) NSObject * _Nonnull _swiftExperimentalOptions;
    [Export("_swiftExperimentalOptions")]
    NSObject _swiftExperimentalOptions { get; }
}

// typedef void (^SentryProfilingConfigurationBlock)(SentryProfileOptions * _Nonnull);
[Internal]
delegate void SentryProfilingConfigurationBlock(SentryProfileOptions options);

// @interface SentryReplayApi : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentryReplayApi
{
    // -(void)maskView:(UIView * _Nonnull)view __attribute__((swift_name("maskView(_:)")));
    [Export("maskView:")]
    void MaskView(UIView view);

    // -(void)unmaskView:(UIView * _Nonnull)view __attribute__((swift_name("unmaskView(_:)")));
    [Export("unmaskView:")]
    void UnmaskView(UIView view);

    // -(void)pause;
    [Export("pause")]
    void Pause();

    // -(void)resume;
    [Export("resume")]
    void Resume();

    // -(void)start;
    [Export("start")]
    void Start();

    // -(void)stop;
    [Export("stop")]
    void Stop();

    // -(void)showMaskPreview;
    [Export("showMaskPreview")]
    void ShowMaskPreview();

    // -(void)showMaskPreview:(CGFloat)opacity;
    [Export("showMaskPreview:")]
    void ShowMaskPreview(nfloat opacity);

    // -(void)hideMaskPreview;
    [Export("hideMaskPreview")]
    void HideMaskPreview();
}

// @interface SentryRequest : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryRequest : ISentrySerializable
{
    // @property (copy, nonatomic) NSNumber * _Nullable bodySize;
    [NullAllowed, Export("bodySize", ArgumentSemantic.Copy)]
    NSNumber BodySize { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable cookies;
    [NullAllowed, Export("cookies")]
    string Cookies { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,NSString *> * _Nullable headers;
    [NullAllowed, Export("headers", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSString> Headers { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable fragment;
    [NullAllowed, Export("fragment")]
    string Fragment { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable method;
    [NullAllowed, Export("method")]
    string Method { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable queryString;
    [NullAllowed, Export("queryString")]
    string QueryString { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable url;
    [NullAllowed, Export("url")]
    string Url { get; set; }
}

// @interface SentrySamplingContext : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface SentrySamplingContext
{
    // @property (readonly, nonatomic) SentryTransactionContext * _Nonnull transactionContext;
    [Export("transactionContext")]
    SentryTransactionContext TransactionContext { get; }

    // @property (readonly, nonatomic) NSDictionary<NSString *,id> * _Nullable customSamplingContext;
    [NullAllowed, Export("customSamplingContext")]
    NSDictionary<NSString, NSObject> CustomSamplingContext { get; }

    // -(instancetype _Nonnull)initWithTransactionContext:(SentryTransactionContext * _Nonnull)transactionContext;
    [Export("initWithTransactionContext:")]
    NativeHandle Constructor(SentryTransactionContext transactionContext);

    // -(instancetype _Nonnull)initWithTransactionContext:(SentryTransactionContext * _Nonnull)transactionContext customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext;
    [Export("initWithTransactionContext:customSamplingContext:")]
    NativeHandle Constructor(SentryTransactionContext transactionContext, NSDictionary<NSString, NSObject> customSamplingContext);
}

// @interface SentryScope : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
partial interface SentryScope : ISentrySerializable
{
    // @property (nonatomic, strong) id<SentrySpan> _Nullable span;
    [NullAllowed, Export("span", ArgumentSemantic.Strong)]
    SentrySpan Span { get; set; }

    // @property (nonatomic, strong) NSString * _Nullable replayId;
    [NullAllowed, Export("replayId", ArgumentSemantic.Strong)]
    string ReplayId { get; set; }

    // @property (readonly, copy, nonatomic) NSDictionary<NSString *,NSString *> * _Nonnull tags;
    [Export("tags", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSString> Tags { get; }

    // -(instancetype _Nonnull)initWithMaxBreadcrumbs:(NSInteger)maxBreadcrumbs __attribute__((objc_designated_initializer));
    [Export("initWithMaxBreadcrumbs:")]
    [DesignatedInitializer]
    NativeHandle Constructor(nint maxBreadcrumbs);

    // -(instancetype _Nonnull)initWithScope:(SentryScope * _Nonnull)scope;
    [Export("initWithScope:")]
    NativeHandle Constructor(SentryScope scope);

    // -(void)setUser:(SentryUser * _Nullable)user;
    [Export("setUser:")]
    void SetUser([NullAllowed] SentryUser user);

    // -(void)setTagValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setTag(value:key:)")));
    [Export("setTagValue:forKey:")]
    void SetTagValue(string value, string key);

    // -(void)removeTagForKey:(NSString * _Nonnull)key __attribute__((swift_name("removeTag(key:)")));
    [Export("removeTagForKey:")]
    void RemoveTagForKey(string key);

    // -(void)setTags:(NSDictionary<NSString *,NSString *> * _Nullable)tags;
    [Export("setTags:")]
    void SetTags([NullAllowed] NSDictionary<NSString, NSString> tags);

    // -(void)setExtras:(NSDictionary<NSString *,id> * _Nullable)extras;
    [Export("setExtras:")]
    void SetExtras([NullAllowed] NSDictionary<NSString, NSObject> extras);

    // -(void)setExtraValue:(id _Nullable)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setExtra(value:key:)")));
    [Export("setExtraValue:forKey:")]
    void SetExtraValue([NullAllowed] NSObject value, string key);

    // -(void)removeExtraForKey:(NSString * _Nonnull)key __attribute__((swift_name("removeExtra(key:)")));
    [Export("removeExtraForKey:")]
    void RemoveExtraForKey(string key);

    // -(void)setDist:(NSString * _Nullable)dist;
    [Export("setDist:")]
    void SetDist([NullAllowed] string dist);

    // -(void)setEnvironment:(NSString * _Nullable)environment;
    [Export("setEnvironment:")]
    void SetEnvironment([NullAllowed] string environment);

    // -(void)setFingerprint:(NSArray<NSString *> * _Nullable)fingerprint;
    [Export("setFingerprint:")]
    void SetFingerprint([NullAllowed] string[] fingerprint);

    // -(void)setLevel:(enum SentryLevel)level;
    [Export("setLevel:")]
    void SetLevel(SentryLevel level);

    // -(void)addBreadcrumb:(SentryBreadcrumb * _Nonnull)crumb __attribute__((swift_name("addBreadcrumb(_:)")));
    [Export("addBreadcrumb:")]
    void AddBreadcrumb(SentryBreadcrumb crumb);

    // -(void)add:(SentryBreadcrumb * _Nonnull)crumb __attribute__((deprecated("use `addBreadcrumb` instead"))) __attribute__((swift_name("add(_:)")));
    [Export("add:")]
    void Add(SentryBreadcrumb crumb);

    // -(void)clearBreadcrumbs;
    [Export("clearBreadcrumbs")]
    void ClearBreadcrumbs();

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize;
    [Export("serialize")]
    NSDictionary<NSString, NSObject> Serialize();

    // -(void)setContextValue:(NSDictionary<NSString *,id> * _Nonnull)value forKey:(NSString * _Nonnull)key __attribute__((swift_name("setContext(value:key:)")));
    [Export("setContextValue:forKey:")]
    void SetContextValue(NSDictionary<NSString, NSObject> value, string key);

    // -(void)removeContextForKey:(NSString * _Nonnull)key __attribute__((swift_name("removeContext(key:)")));
    [Export("removeContextForKey:")]
    void RemoveContextForKey(string key);

    // -(void)addAttachment:(SentryAttachment * _Nonnull)attachment __attribute__((swift_name("addAttachment(_:)")));
    [Export("addAttachment:")]
    void AddAttachment(SentryAttachment attachment);

    // -(void)includeAttachment:(SentryAttachment * _Nonnull)attachment __attribute__((deprecated("use `addAttachment` instead"))) __attribute__((swift_name("add(_:)")));
    [Export("includeAttachment:")]
    void IncludeAttachment(SentryAttachment attachment);

    // -(void)clearAttachments;
    [Export("clearAttachments")]
    void ClearAttachments();

    // -(void)clear;
    [Export("clear")]
    void Clear();

    // -(void)useSpan:(SentrySpanCallback _Nonnull)callback __attribute__((deprecated("This method was used to create an atomic block that could be used to mutate the current span. It is not atomic anymore and due to issues with memory safety in `NSBlock` it is now considered unsafe and deprecated. Use `span` instead.")));
    [Export("useSpan:")]
    void UseSpan(SentrySpanCallback callback);
}

// @interface SentrySpanId : NSObject <NSCopying>
[BaseType(typeof(NSObject))]
[Internal]
interface SentrySpanId
{
    // -(instancetype _Nonnull)initWithUUID:(NSUUID * _Nonnull)uuid;
    [Export("initWithUUID:")]
    NativeHandle Constructor(NSUuid uuid);

    // -(instancetype _Nonnull)initWithValue:(NSString * _Nonnull)value;
    [Export("initWithValue:")]
    NativeHandle Constructor(string value);

    // @property (readonly, copy) NSString * _Nonnull sentrySpanIdString;
    [Export("sentrySpanIdString")]
    string SentrySpanIdString { get; }

    // @property (readonly, nonatomic, strong, class) SentrySpanId * _Nonnull empty;
    [Static]
    [Export("empty", ArgumentSemantic.Strong)]
    SentrySpanId Empty { get; }
}

// @interface SentryStacktrace : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryStacktrace : ISentrySerializable
{
    // @property (nonatomic, strong) NSArray<SentryFrame *> * _Nonnull frames;
    [Export("frames", ArgumentSemantic.Strong)]
    SentryFrame[] Frames { get; set; }

    // @property (nonatomic, strong) NSDictionary<NSString *,NSString *> * _Nonnull registers;
    [Export("registers", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSString> Registers { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable snapshot;
    [NullAllowed, Export("snapshot", ArgumentSemantic.Copy)]
    NSNumber Snapshot { get; set; }

    // -(instancetype _Nonnull)initWithFrames:(NSArray<SentryFrame *> * _Nonnull)frames registers:(NSDictionary<NSString *,NSString *> * _Nonnull)registers;
    [Export("initWithFrames:registers:")]
    NativeHandle Constructor(SentryFrame[] frames, NSDictionary<NSString, NSString> registers);

    // -(void)fixDuplicateFrames;
    [Export("fixDuplicateFrames")]
    void FixDuplicateFrames();
}

// @interface SentryThread : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryThread : ISentrySerializable
{
    // @property (copy, nonatomic) NSNumber * _Nonnull threadId;
    [Export("threadId", ArgumentSemantic.Copy)]
    NSNumber ThreadId { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable name;
    [NullAllowed, Export("name")]
    string Name { get; set; }

    // @property (nonatomic, strong) SentryStacktrace * _Nullable stacktrace;
    [NullAllowed, Export("stacktrace", ArgumentSemantic.Strong)]
    SentryStacktrace Stacktrace { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable crashed;
    [NullAllowed, Export("crashed", ArgumentSemantic.Copy)]
    NSNumber Crashed { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable current;
    [NullAllowed, Export("current", ArgumentSemantic.Copy)]
    NSNumber Current { get; set; }

    // @property (copy, nonatomic) NSNumber * _Nullable isMain;
    [NullAllowed, Export("isMain", ArgumentSemantic.Copy)]
    NSNumber IsMain { get; set; }

    // -(instancetype _Nonnull)initWithThreadId:(NSNumber * _Nonnull)threadId;
    [Export("initWithThreadId:")]
    NativeHandle Constructor(NSNumber threadId);
}

// @interface SentryTraceContext : NSObject <SentrySerializable>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryTraceContext : ISentrySerializable
{
    // @property (readonly, nonatomic) SentryId * _Nonnull traceId;
    [Export("traceId")]
    SentryId TraceId { get; }

    // @property (readonly, nonatomic) NSString * _Nonnull publicKey;
    [Export("publicKey")]
    string PublicKey { get; }

    // @property (readonly, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export("releaseName")]
    string ReleaseName { get; }

    // @property (readonly, nonatomic) NSString * _Nullable environment;
    [NullAllowed, Export("environment")]
    string Environment { get; }

    // @property (readonly, nonatomic) NSString * _Nullable transaction;
    [NullAllowed, Export("transaction")]
    string Transaction { get; }

    // @property (readonly, nonatomic) NSString * _Nullable userSegment;
    [NullAllowed, Export("userSegment")]
    string UserSegment { get; }

    // @property (readonly, nonatomic) NSString * _Nullable sampleRate;
    [NullAllowed, Export("sampleRate")]
    string SampleRate { get; }

    // @property (readonly, nonatomic) NSString * _Nullable sampleRand;
    [NullAllowed, Export("sampleRand")]
    string SampleRand { get; }

    // @property (readonly, nonatomic) NSString * _Nullable sampled;
    [NullAllowed, Export("sampled")]
    string Sampled { get; }

    // @property (readonly, nonatomic) NSString * _Nullable replayId;
    [NullAllowed, Export("replayId")]
    string ReplayId { get; }

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId publicKey:(NSString * _Nonnull)publicKey releaseName:(NSString * _Nullable)releaseName environment:(NSString * _Nullable)environment transaction:(NSString * _Nullable)transaction userSegment:(NSString * _Nullable)userSegment sampleRate:(NSString * _Nullable)sampleRate sampled:(NSString * _Nullable)sampled replayId:(NSString * _Nullable)replayId;
    [Export("initWithTraceId:publicKey:releaseName:environment:transaction:userSegment:sampleRate:sampled:replayId:")]
    NativeHandle Constructor(SentryId traceId, string publicKey, [NullAllowed] string releaseName, [NullAllowed] string environment, [NullAllowed] string transaction, [NullAllowed] string userSegment, [NullAllowed] string sampleRate, [NullAllowed] string sampled, [NullAllowed] string replayId);

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId publicKey:(NSString * _Nonnull)publicKey releaseName:(NSString * _Nullable)releaseName environment:(NSString * _Nullable)environment transaction:(NSString * _Nullable)transaction userSegment:(NSString * _Nullable)userSegment sampleRate:(NSString * _Nullable)sampleRate sampleRand:(NSString * _Nullable)sampleRand sampled:(NSString * _Nullable)sampled replayId:(NSString * _Nullable)replayId;
    [Export("initWithTraceId:publicKey:releaseName:environment:transaction:userSegment:sampleRate:sampleRand:sampled:replayId:")]
    NativeHandle Constructor(SentryId traceId, string publicKey, [NullAllowed] string releaseName, [NullAllowed] string environment, [NullAllowed] string transaction, [NullAllowed] string userSegment, [NullAllowed] string sampleRate, [NullAllowed] string sampleRand, [NullAllowed] string sampled, [NullAllowed] string replayId);

    // -(instancetype _Nullable)initWithScope:(SentryScope * _Nonnull)scope options:(SentryOptions * _Nonnull)options;
    [Export("initWithScope:options:")]
    NativeHandle Constructor(SentryScope scope, SentryOptions options);

    // -(instancetype _Nullable)initWithDict:(NSDictionary<NSString *,id> * _Nonnull)dictionary;
    [Export("initWithDict:")]
    NativeHandle Constructor(NSDictionary<NSString, NSObject> dictionary);

    // -(instancetype _Nullable)initWithTracer:(SentryTracer * _Nonnull)tracer scope:(SentryScope * _Nullable)scope options:(SentryOptions * _Nonnull)options;
    [Export("initWithTracer:scope:options:")]
    NativeHandle Constructor(SentryTracer tracer, [NullAllowed] SentryScope scope, SentryOptions options);

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId options:(SentryOptions * _Nonnull)options userSegment:(NSString * _Nullable)userSegment replayId:(NSString * _Nullable)replayId;
    [Export("initWithTraceId:options:userSegment:replayId:")]
    NativeHandle Constructor(SentryId traceId, SentryOptions options, [NullAllowed] string userSegment, [NullAllowed] string replayId);

    // -(SentryBaggage * _Nonnull)toBaggage;
    [Export("toBaggage")]
    SentryBaggage ToBaggage();
}

// @interface SentryTraceHeader : NSObject
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryTraceHeader
{
    // @property (readonly, nonatomic) SentryId * _Nonnull traceId;
    [Export("traceId")]
    SentryId TraceId { get; }

    // @property (readonly, nonatomic) SentrySpanId * _Nonnull spanId;
    [Export("spanId")]
    SentrySpanId SpanId { get; }

    // @property (readonly, nonatomic) SentrySampleDecision sampled;
    [Export("sampled")]
    SentrySampleDecision Sampled { get; }

    // -(instancetype _Nonnull)initWithTraceId:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId sampled:(SentrySampleDecision)sampled;
    [Export("initWithTraceId:spanId:sampled:")]
    NativeHandle Constructor(SentryId traceId, SentrySpanId spanId, SentrySampleDecision sampled);

    // -(NSString * _Nonnull)value;
    [Export("value")]
    string Value { get; }
}

// @interface SentryTransactionContext : SentrySpanContext
[BaseType(typeof(SentrySpanContext))]
[DisableDefaultCtor]
[Internal]
interface SentryTransactionContext
{
    // @property (readonly, nonatomic) NSString * _Nonnull name;
    [Export("name")]
    string Name { get; }

    // @property (readonly, nonatomic) SentryTransactionNameSource nameSource;
    [Export("nameSource")]
    SentryTransactionNameSource NameSource { get; }

    // @property (nonatomic, strong) NSNumber * _Nullable sampleRate;
    [NullAllowed, Export("sampleRate", ArgumentSemantic.Strong)]
    NSNumber SampleRate { get; set; }

    // @property (nonatomic, strong) NSNumber * _Nullable sampleRand;
    [NullAllowed, Export("sampleRand", ArgumentSemantic.Strong)]
    NSNumber SampleRand { get; set; }

    // @property (nonatomic) SentrySampleDecision parentSampled;
    [Export("parentSampled", ArgumentSemantic.Assign)]
    SentrySampleDecision ParentSampled { get; set; }

    // @property (nonatomic, strong) NSNumber * _Nullable parentSampleRate;
    [NullAllowed, Export("parentSampleRate", ArgumentSemantic.Strong)]
    NSNumber ParentSampleRate { get; set; }

    // @property (nonatomic, strong) NSNumber * _Nullable parentSampleRand;
    [NullAllowed, Export("parentSampleRand", ArgumentSemantic.Strong)]
    NSNumber ParentSampleRand { get; set; }

    // @property (assign, nonatomic) BOOL forNextAppLaunch;
    [Export("forNextAppLaunch")]
    bool ForNextAppLaunch { get; set; }

    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation;
    [Export("initWithName:operation:")]
    NativeHandle Constructor(string name, string operation);

    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation sampled:(SentrySampleDecision)sampled __attribute__((deprecated("Use initWithName:operation:sampled:sampleRate:sampleRand instead")));
    [Export("initWithName:operation:sampled:")]
    NativeHandle Constructor(string name, string operation, SentrySampleDecision sampled);

    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation sampled:(SentrySampleDecision)sampled sampleRate:(NSNumber * _Nullable)sampleRate sampleRand:(NSNumber * _Nullable)sampleRand;
    [Export("initWithName:operation:sampled:sampleRate:sampleRand:")]
    NativeHandle Constructor(string name, string operation, SentrySampleDecision sampled, [NullAllowed] NSNumber sampleRate, [NullAllowed] NSNumber sampleRand);

    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation traceId:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId parentSpanId:(SentrySpanId * _Nullable)parentSpanId parentSampled:(SentrySampleDecision)parentSampled __attribute__((deprecated("Use initWithName:operation:traceId:spanId:parentSpanId:parentSampled:parentSampleRate:parentSampleRand instead")));
    [Export("initWithName:operation:traceId:spanId:parentSpanId:parentSampled:")]
    NativeHandle Constructor(string name, string operation, SentryId traceId, SentrySpanId spanId, [NullAllowed] SentrySpanId parentSpanId, SentrySampleDecision parentSampled);

    // -(instancetype _Nonnull)initWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation traceId:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId parentSpanId:(SentrySpanId * _Nullable)parentSpanId parentSampled:(SentrySampleDecision)parentSampled parentSampleRate:(NSNumber * _Nullable)parentSampleRate parentSampleRand:(NSNumber * _Nullable)parentSampleRand;
    [Export("initWithName:operation:traceId:spanId:parentSpanId:parentSampled:parentSampleRate:parentSampleRand:")]
    NativeHandle Constructor(string name, string operation, SentryId traceId, SentrySpanId spanId, [NullAllowed] SentrySpanId parentSpanId, SentrySampleDecision parentSampled, [NullAllowed] NSNumber parentSampleRate, [NullAllowed] NSNumber parentSampleRand);
}

// @interface SentryUser : NSObject <SentrySerializable, NSCopying>
[BaseType(typeof(NSObject))]
[Internal]
interface SentryUser : ISentrySerializable
{
    // @property (copy, atomic) NSString * _Nullable userId;
    [NullAllowed, Export("userId")]
    string UserId { get; set; }

    // @property (copy, atomic) NSString * _Nullable email;
    [NullAllowed, Export("email")]
    string Email { get; set; }

    // @property (copy, atomic) NSString * _Nullable username;
    [NullAllowed, Export("username")]
    string Username { get; set; }

    // @property (copy, atomic) NSString * _Nullable ipAddress;
    [NullAllowed, Export("ipAddress")]
    string IpAddress { get; set; }

    // @property (copy, atomic) DEPRECATED_MSG_ATTRIBUTE("This field is deprecated and will be removed in the next major update.") NSString * segment __attribute__((deprecated("This field is deprecated and will be removed in the next major update.")));
    [Export("segment")]
    string Segment { get; set; }

    // @property (copy, atomic) NSString * _Nullable name;
    [NullAllowed, Export("name")]
    string Name { get; set; }

    // @property (nonatomic, strong) SentryGeo * _Nullable geo;
    [NullAllowed, Export("geo", ArgumentSemantic.Strong)]
    SentryGeo Geo { get; set; }

    // @property (atomic, strong) NSDictionary<NSString *,id> * _Nullable data;
    [NullAllowed, Export("data", ArgumentSemantic.Strong)]
    NSDictionary<NSString, NSObject> Data { get; set; }

    // -(instancetype _Nonnull)initWithUserId:(NSString * _Nonnull)userId;
    [Export("initWithUserId:")]
    NativeHandle Constructor(string userId);

    // -(BOOL)isEqualToUser:(SentryUser * _Nonnull)user;
    [Export("isEqualToUser:")]
    bool IsEqualToUser(SentryUser user);

    // -(NSUInteger)hash;
    [Export("hash")]
    nuint Hash { get; }
}

// @interface SentryFeedback : NSObject
[BaseType(typeof(NSObject), Name = "_TtC6Sentry14SentryFeedback")]
[DisableDefaultCtor]
[Internal]
interface SentryFeedback
{
    // @property (readonly, nonatomic, strong) SentryId * _Nonnull eventId;
    [Export("eventId", ArgumentSemantic.Strong)]
    SentryId EventId { get; }

    // -(instancetype _Nonnull)initWithMessage:(NSString * _Nonnull)message name:(NSString * _Nullable)name email:(NSString * _Nullable)email source:(enum SentryFeedbackSource)source associatedEventId:(SentryId * _Nullable)associatedEventId attachments:(NSArray<NSData *> * _Nullable)attachments __attribute__((objc_designated_initializer));
    [Export("initWithMessage:name:email:source:associatedEventId:attachments:")]
    [DesignatedInitializer]
    NativeHandle Constructor(string message, [NullAllowed] string name, [NullAllowed] string email, SentryFeedbackSource source, [NullAllowed] SentryId associatedEventId, [NullAllowed] NSData[] attachments);
}

// @interface SentryId : NSObject
[BaseType(typeof(NSObject), Name = "_TtC6Sentry8SentryId")]
[Internal]
interface SentryId
{
    // @property (readonly, nonatomic, strong, class) SentryId * _Nonnull empty;
    [Static]
    [Export("empty", ArgumentSemantic.Strong)]
    SentryId Empty { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull sentryIdString;
    [Export("sentryIdString")]
    string SentryIdString { get; }

    // -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
    [Export("initWithUuid:")]
    [DesignatedInitializer]
    NativeHandle Constructor(NSUuid uuid);

    // -(instancetype _Nonnull)initWithUUIDString:(NSString * _Nonnull)uuidString __attribute__((objc_designated_initializer));
    [Export("initWithUUIDString:")]
    [DesignatedInitializer]
    NativeHandle Constructor(string uuidString);

    // @property (readonly, nonatomic) NSUInteger hash;
    [Export("hash")]
    nuint Hash { get; }
}

// @interface SentryLog : NSObject
[BaseType(typeof(NSObject), Name = "_TtC6Sentry9SentryLog")]
[DisableDefaultCtor]
[Internal]
interface SentryLog
{
    // @property (copy, nonatomic) NSDate * _Nonnull timestamp;
    [Export("timestamp", ArgumentSemantic.Copy)]
    NSDate Timestamp { get; set; }

    // @property (nonatomic, strong) SentryId * _Nonnull traceId;
    [Export("traceId", ArgumentSemantic.Strong)]
    SentryId TraceId { get; set; }

    // @property (nonatomic) enum SentryStructuredLogLevel level;
    [Export("level", ArgumentSemantic.Assign)]
    SentryStructuredLogLevel Level { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull body;
    [Export("body")]
    string Body { get; set; }

    // @property (nonatomic, strong) NSNumber * _Nullable severityNumber;
    [NullAllowed, Export("severityNumber", ArgumentSemantic.Strong)]
    NSNumber SeverityNumber { get; set; }
}

// @interface SentryLogger : NSObject
[BaseType(typeof(NSObject), Name = "_TtC6Sentry12SentryLogger")]
[DisableDefaultCtor]
[Internal]
interface SentryLogger
{
    // -(void)trace:(NSString * _Nonnull)body;
    [Export("trace:")]
    void Trace(string body);

    // -(void)trace:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export("trace:attributes:")]
    void Trace(string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)debug:(NSString * _Nonnull)body;
    [Export("debug:")]
    void Debug(string body);

    // -(void)debug:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export("debug:attributes:")]
    void Debug(string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)info:(NSString * _Nonnull)body;
    [Export("info:")]
    void Info(string body);

    // -(void)info:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export("info:attributes:")]
    void Info(string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)warn:(NSString * _Nonnull)body;
    [Export("warn:")]
    void Warn(string body);

    // -(void)warn:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export("warn:attributes:")]
    void Warn(string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)error:(NSString * _Nonnull)body;
    [Export("error:")]
    void Error(string body);

    // -(void)error:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export("error:attributes:")]
    void Error(string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)fatal:(NSString * _Nonnull)body;
    [Export("fatal:")]
    void Fatal(string body);

    // -(void)fatal:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export("fatal:attributes:")]
    void Fatal(string body, NSDictionary<NSString, NSObject> attributes);
}

// @interface SentryProfileOptions : NSObject
[BaseType(typeof(NSObject), Name = "_TtC6Sentry20SentryProfileOptions")]
[Internal]
interface SentryProfileOptions
{
    // @property (nonatomic) enum SentryProfileLifecycle lifecycle;
    [Export("lifecycle", ArgumentSemantic.Assign)]
    SentryProfileLifecycle Lifecycle { get; set; }

    // @property (nonatomic) float sessionSampleRate;
    [Export("sessionSampleRate")]
    float SessionSampleRate { get; set; }

    // @property (nonatomic) BOOL profileAppStarts;
    [Export("profileAppStarts")]
    bool ProfileAppStarts { get; set; }
}

// @protocol SentryRRWebEvent <SentrySerializable>
[Protocol]
[Internal]
interface ISentryRRWebEvent : ISentrySerializable
{
}

// @interface SentryRRWebEvent : NSObject <SentryRRWebEvent>
[BaseType(typeof(NSObject), Name = "_TtC6Sentry16SentryRRWebEvent")]
[DisableDefaultCtor]
[Internal]
interface SentryRRWebEvent : ISentryRRWebEvent
{
    // @property (readonly, copy, nonatomic) NSDictionary<NSString *,id> * _Nullable data;
    [NullAllowed, Export("data", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> Data { get; }

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @protocol SentryRedactOptions
[Protocol(Name = "_TtP6Sentry19SentryRedactOptions_")]
[Internal]
[Model]
[BaseType (typeof(NSObject))]
interface ISentryRedactOptions
{
    // @required @property (readonly, nonatomic) BOOL maskAllText;
    [Abstract]
    [Export("maskAllText")]
    bool MaskAllText { get; }

    // @required @property (readonly, nonatomic) BOOL maskAllImages;
    [Abstract]
    [Export("maskAllImages")]
    bool MaskAllImages { get; }

    // @required @property (readonly, copy, nonatomic) NSArray<Class> * _Nonnull maskedViewClasses;
    [Abstract]
    [Export("maskedViewClasses", ArgumentSemantic.Copy)]
    Class[] MaskedViewClasses { get; }

    // @required @property (readonly, copy, nonatomic) NSArray<Class> * _Nonnull unmaskedViewClasses;
    [Abstract]
    [Export("unmaskedViewClasses", ArgumentSemantic.Copy)]
    Class[] UnmaskedViewClasses { get; }
}

// @protocol SentryReplayBreadcrumbConverter <NSObject>
[Protocol(Name = "_TtP6Sentry31SentryReplayBreadcrumbConverter_")]
[BaseType(typeof(NSObject), Name = "_TtP6Sentry31SentryReplayBreadcrumbConverter_")]
[Internal]
interface SentryReplayBreadcrumbConverter
{
    // @required -(id<SentryRRWebEvent> _Nullable)convertFrom:(SentryBreadcrumb * _Nonnull)breadcrumb __attribute__((warn_unused_result("")));
    [Abstract]
    [Export("convertFrom:")]
    [return: NullAllowed]
    SentryRRWebEvent ConvertFrom(SentryBreadcrumb breadcrumb);
}

// @interface SentryReplayOptions : NSObject <SentryRedactOptions>
[BaseType(typeof(NSObject), Name = "_TtC6Sentry19SentryReplayOptions")]
[Internal]
interface SentryReplayOptions : ISentryRedactOptions
{
    // @property (nonatomic) float sessionSampleRate;
    [Export("sessionSampleRate")]
    float SessionSampleRate { get; set; }

    // @property (nonatomic) float onErrorSampleRate;
    [Export("onErrorSampleRate")]
    float OnErrorSampleRate { get; set; }

    // @property (nonatomic) BOOL maskAllText;
    [Export("maskAllText")]
    bool MaskAllText { get; set; }

    // @property (nonatomic) BOOL maskAllImages;
    [Export("maskAllImages")]
    bool MaskAllImages { get; set; }

    // @property (nonatomic) enum SentryReplayQuality quality;
    [Export("quality", ArgumentSemantic.Assign)]
    SentryReplayQuality Quality { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull maskedViewClasses;
    [Export("maskedViewClasses", ArgumentSemantic.Copy)]
    Class[] MaskedViewClasses { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull unmaskedViewClasses;
    [Export("unmaskedViewClasses", ArgumentSemantic.Copy)]
    Class[] UnmaskedViewClasses { get; set; }

    // @property (nonatomic) BOOL enableExperimentalViewRenderer __attribute__((deprecated("", "enableViewRendererV2")));
    [Export("enableExperimentalViewRenderer")]
    bool EnableExperimentalViewRenderer { get; set; }

    // @property (nonatomic) BOOL enableViewRendererV2;
    [Export("enableViewRendererV2")]
    bool EnableViewRendererV2 { get; set; }

    // @property (nonatomic) BOOL enableFastViewRendering;
    [Export("enableFastViewRendering")]
    bool EnableFastViewRendering { get; set; }

    // @property (readonly, nonatomic) NSInteger replayBitRate;
    [Export("replayBitRate")]
    nint ReplayBitRate { get; }

    // @property (readonly, nonatomic) float sizeScale;
    [Export("sizeScale")]
    float SizeScale { get; }

    // @property (nonatomic) NSUInteger frameRate;
    [Export("frameRate")]
    nuint FrameRate { get; set; }

    // @property (nonatomic) NSTimeInterval errorReplayDuration;
    [Export("errorReplayDuration")]
    double ErrorReplayDuration { get; set; }

    // @property (nonatomic) NSTimeInterval sessionSegmentDuration;
    [Export("sessionSegmentDuration")]
    double SessionSegmentDuration { get; set; }

    // @property (nonatomic) NSTimeInterval maximumDuration;
    [Export("maximumDuration")]
    double MaximumDuration { get; set; }

    // -(instancetype _Nonnull)initWithDictionary:(NSDictionary<NSString *,id> * _Nonnull)dictionary;
    [Export("initWithDictionary:")]
    NativeHandle Constructor(NSDictionary<NSString, NSObject> dictionary);

    // -(instancetype _Nonnull)initWithSessionSampleRate:(float)sessionSampleRate onErrorSampleRate:(float)onErrorSampleRate maskAllText:(BOOL)maskAllText maskAllImages:(BOOL)maskAllImages enableViewRendererV2:(BOOL)enableViewRendererV2 enableFastViewRendering:(BOOL)enableFastViewRendering;
    [Export("initWithSessionSampleRate:onErrorSampleRate:maskAllText:maskAllImages:enableViewRendererV2:enableFastViewRendering:")]
    NativeHandle Constructor(float sessionSampleRate, float onErrorSampleRate, bool maskAllText, bool maskAllImages, bool enableViewRendererV2, bool enableFastViewRendering);
}

// @interface SentrySDK : NSObject
[BaseType(typeof(NSObject), Name = "_TtC6Sentry9SentrySDK")]
[Internal]
interface SentrySDK
{
    // @property (readonly, nonatomic, strong, class) id<SentrySpan> _Nullable span;
    [Static]
    [NullAllowed, Export("span", ArgumentSemantic.Strong)]
    SentrySpan Span { get; }

    // @property (readonly, nonatomic, class) BOOL isEnabled;
    [Static]
    [Export("isEnabled")]
    bool IsEnabled { get; }

    // @property (readonly, nonatomic, strong, class) SentryReplayApi * _Nonnull replay;
    [Static]
    [Export("replay", ArgumentSemantic.Strong)]
    SentryReplayApi Replay { get; }

    // @property (readonly, nonatomic, strong, class) SentryLogger * _Nonnull logger;
    [Static]
    [Export("logger", ArgumentSemantic.Strong)]
    SentryLogger Logger { get; }

    // +(void)startWithOptions:(SentryOptions * _Nonnull)options;
    [Static]
    [Export("startWithOptions:")]
    void StartWithOptions(SentryOptions options);

    // +(void)startWithConfigureOptions:(void (^ _Nonnull)(SentryOptions * _Nonnull))configureOptions;
    [Static]
    [Export("startWithConfigureOptions:")]
    void StartWithConfigureOptions(Action<SentryOptions> configureOptions);

    // +(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event;
    [Static]
    [Export("captureEvent:")]
    SentryId CaptureEvent(SentryEvent @event);

    // +(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export("captureEvent:withScope:")]
    SentryId CaptureEvent(SentryEvent @event, SentryScope scope);

    // +(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export("captureEvent:withScopeBlock:")]
    SentryId CaptureEvent(SentryEvent @event, Action<SentryScope> block);

    // +(id<SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation;
    [Static]
    [Export("startTransactionWithName:operation:")]
    SentrySpan StartTransactionWithName(string name, string operation);

    // +(id<SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation bindToScope:(BOOL)bindToScope;
    [Static]
    [Export("startTransactionWithName:operation:bindToScope:")]
    SentrySpan StartTransactionWithName(string name, string operation, bool bindToScope);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext;
    [Static]
    [Export("startTransactionWithContext:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope;
    [Static]
    [Export("startTransactionWithContext:bindToScope:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext, bool bindToScope);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext;
    [Static]
    [Export("startTransactionWithContext:bindToScope:customSamplingContext:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext, bool bindToScope, NSDictionary<NSString, NSObject> customSamplingContext);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext;
    [Static]
    [Export("startTransactionWithContext:customSamplingContext:")]
    SentrySpan StartTransactionWithContext(SentryTransactionContext transactionContext, NSDictionary<NSString, NSObject> customSamplingContext);

    // +(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error;
    [Static]
    [Export("captureError:")]
    SentryId CaptureError(NSError error);

    // +(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export("captureError:withScope:")]
    SentryId CaptureError(NSError error, SentryScope scope);

    // +(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export("captureError:withScopeBlock:")]
    SentryId CaptureError(NSError error, Action<SentryScope> block);

    // +(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception;
    [Static]
    [Export("captureException:")]
    SentryId CaptureException(NSException exception);

    // +(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export("captureException:withScope:")]
    SentryId CaptureException(NSException exception, SentryScope scope);

    // +(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export("captureException:withScopeBlock:")]
    SentryId CaptureException(NSException exception, Action<SentryScope> block);

    // +(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message;
    [Static]
    [Export("captureMessage:")]
    SentryId CaptureMessage(string message);

    // +(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export("captureMessage:withScope:")]
    SentryId CaptureMessage(string message, SentryScope scope);

    // +(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export("captureMessage:withScopeBlock:")]
    SentryId CaptureMessage(string message, Action<SentryScope> block);

    // +(void)captureFeedback:(SentryFeedback * _Nonnull)feedback;
    [Static]
    [Export("captureFeedback:")]
    void CaptureFeedback(SentryFeedback feedback);
    [Static]
    [Export("feedback", ArgumentSemantic.Strong)]
    SentryFeedbackAPI Feedback { get; }

    // +(void)addBreadcrumb:(SentryBreadcrumb * _Nonnull)crumb;
    [Static]
    [Export("addBreadcrumb:")]
    void AddBreadcrumb(SentryBreadcrumb crumb);

    // +(void)configureScope:(void (^ _Nonnull)(SentryScope * _Nonnull))callback;
    [Static]
    [Export("configureScope:")]
    void ConfigureScope(Action<SentryScope> callback);

    // @property (readonly, nonatomic, class) BOOL crashedLastRun;
    [Static]
    [Export("crashedLastRun")]
    bool CrashedLastRun { get; }

    // @property (readonly, nonatomic, class) BOOL detectedStartUpCrash;
    [Static]
    [Export("detectedStartUpCrash")]
    bool DetectedStartUpCrash { get; }

    // +(void)setUser:(SentryUser * _Nullable)user;
    [Static]
    [Export("setUser:")]
    void SetUser([NullAllowed] SentryUser user);

    // +(void)startSession;
    [Static]
    [Export("startSession")]
    void StartSession();

    // +(void)endSession;
    [Static]
    [Export("endSession")]
    void EndSession();

    // +(void)crash;
    [Static]
    [Export("crash")]
    void Crash();

    // +(void)reportFullyDisplayed;
    [Static]
    [Export("reportFullyDisplayed")]
    void ReportFullyDisplayed();

    // +(void)pauseAppHangTracking;
    [Static]
    [Export("pauseAppHangTracking")]
    void PauseAppHangTracking();

    // +(void)resumeAppHangTracking;
    [Static]
    [Export("resumeAppHangTracking")]
    void ResumeAppHangTracking();

    // +(void)flush:(NSTimeInterval)timeout;
    [Static]
    [Export("flush:")]
    void Flush(double timeout);

    // +(void)close;
    [Static]
    [Export("close")]
    void Close();

    // +(void)startProfiler;
    [Static]
    [Export("startProfiler")]
    void StartProfiler();

    // +(void)stopProfiler;
    [Static]
    [Export("stopProfiler")]
    void StopProfiler();

    // +(void)clearLogger;
    [Static]
    [Export("clearLogger")]
    void ClearLogger();
}

// @interface SentrySession : NSObject <NSCopying>
[BaseType(typeof(NSObject), Name = "_TtC6Sentry13SentrySession")]
[DisableDefaultCtor]
[Internal]
interface SentrySession
{
    // -(instancetype _Nonnull)initWithReleaseName:(NSString * _Nonnull)releaseName distinctId:(NSString * _Nonnull)distinctId __attribute__((objc_designated_initializer));
    [Export("initWithReleaseName:distinctId:")]
    [DesignatedInitializer]
    NativeHandle Constructor(string releaseName, string distinctId);

    // -(instancetype _Nullable)initWithJSONObject:(NSDictionary<NSString *,id> * _Nonnull)jsonObject __attribute__((objc_designated_initializer));
    [Export("initWithJSONObject:")]
    [DesignatedInitializer]
    NativeHandle Constructor(NSDictionary<NSString, NSObject> jsonObject);

    // -(void)endSessionExitedWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export("endSessionExitedWithTimestamp:")]
    void EndSessionExitedWithTimestamp(NSDate timestamp);

    // -(void)endSessionCrashedWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export("endSessionCrashedWithTimestamp:")]
    void EndSessionCrashedWithTimestamp(NSDate timestamp);

    // -(void)endSessionAbnormalWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export("endSessionAbnormalWithTimestamp:")]
    void EndSessionAbnormalWithTimestamp(NSDate timestamp);

    // -(void)incrementErrors;
    [Export("incrementErrors")]
    void IncrementErrors();

    // @property (readonly, copy, nonatomic) NSUUID * _Nonnull sessionId;
    [Export("sessionId", ArgumentSemantic.Copy)]
    NSUuid SessionId { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nonnull started;
    [Export("started", ArgumentSemantic.Copy)]
    NSDate Started { get; }

    // @property (readonly, nonatomic) enum SentrySessionStatus status;
    [Export("status")]
    SentrySessionStatus Status { get; }

    // @property (nonatomic) NSUInteger errors;
    [Export("errors")]
    nuint Errors { get; set; }

    // @property (readonly, nonatomic) NSUInteger sequence;
    [Export("sequence")]
    nuint Sequence { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull distinctId;
    [Export("distinctId")]
    string DistinctId { get; }

    // @property (readonly, nonatomic, strong) NSNumber * _Nullable flagInit;
    [NullAllowed, Export("flagInit", ArgumentSemantic.Strong)]
    NSNumber FlagInit { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nullable timestamp;
    [NullAllowed, Export("timestamp", ArgumentSemantic.Copy)]
    NSDate Timestamp { get; }

    // @property (readonly, nonatomic, strong) NSNumber * _Nullable duration;
    [NullAllowed, Export("duration", ArgumentSemantic.Strong)]
    NSNumber Duration { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export("releaseName")]
    string ReleaseName { get; }

    // @property (copy, nonatomic) NSString * _Nullable environment;
    [NullAllowed, Export("environment")]
    string Environment { get; set; }

    // @property (nonatomic, strong) SentryUser * _Nullable user;
    [NullAllowed, Export("user", ArgumentSemantic.Strong)]
    SentryUser User { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable abnormalMechanism;
    [NullAllowed, Export("abnormalMechanism")]
    string AbnormalMechanism { get; set; }

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export("serialize")]
    NSDictionary<NSString, NSObject> Serialize();

    // -(void)setFlagInit;
    [Export("setFlagInit")]
    void SetFlagInit();
}

// @protocol SentryViewScreenshotProvider <NSObject>
[Protocol(Name = "_TtP6Sentry28SentryViewScreenshotProvider_")]
[BaseType(typeof(NSObject), Name = "_TtP6Sentry28SentryViewScreenshotProvider_")]
[Internal]
interface SentryViewScreenshotProvider
{
    // @required -(void)imageWithView:(UIView * _Nonnull)view onComplete:(void (^ _Nonnull)(UIImage * _Nonnull))onComplete;
    [Abstract]
    [Export("imageWithView:onComplete:")]
    void OnComplete(UIView view, Action<UIImage> onComplete);
}

// @interface SentryViewScreenshotOptions : NSObject <SentryRedactOptions>
[BaseType(typeof(NSObject), Name = "_TtC6Sentry27SentryViewScreenshotOptions")]
[Internal]
interface SentryViewScreenshotOptions : ISentryRedactOptions
{
    // @property (nonatomic) BOOL enableViewRendererV2;
    [Export("enableViewRendererV2")]
    bool EnableViewRendererV2 { get; set; }

    // @property (nonatomic) BOOL enableFastViewRendering;
    [Export("enableFastViewRendering")]
    bool EnableFastViewRendering { get; set; }

    // @property (nonatomic) BOOL maskAllImages;
    [Export("maskAllImages")]
    bool MaskAllImages { get; set; }

    // @property (nonatomic) BOOL maskAllText;
    [Export("maskAllText")]
    bool MaskAllText { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull maskedViewClasses;
    [Export("maskedViewClasses", ArgumentSemantic.Copy)]
    Class[] MaskedViewClasses { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull unmaskedViewClasses;
    [Export("unmaskedViewClasses", ArgumentSemantic.Copy)]
    Class[] UnmaskedViewClasses { get; set; }

    // -(instancetype _Nonnull)initWithEnableViewRendererV2:(BOOL)enableViewRendererV2 enableFastViewRendering:(BOOL)enableFastViewRendering maskAllText:(BOOL)maskAllText maskAllImages:(BOOL)maskAllImages maskedViewClasses:(NSArray<Class> * _Nonnull)maskedViewClasses unmaskedViewClasses:(NSArray<Class> * _Nonnull)unmaskedViewClasses __attribute__((objc_designated_initializer));
    [Export("initWithEnableViewRendererV2:enableFastViewRendering:maskAllText:maskAllImages:maskedViewClasses:unmaskedViewClasses:")]
    [DesignatedInitializer]
    NativeHandle Constructor(bool enableViewRendererV2, bool enableFastViewRendering, bool maskAllText, bool maskAllImages, Class[] maskedViewClasses, Class[] unmaskedViewClasses);
}

// @interface SentryScreenFrames : NSObject <NSCopying>
[BaseType(typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryScreenFrames
{
    // -(instancetype _Nonnull)initWithTotal:(NSUInteger)total frozen:(NSUInteger)frozen slow:(NSUInteger)slow;
    [Export("initWithTotal:frozen:slow:")]
    NativeHandle Constructor(nuint total, nuint frozen, nuint slow);

    // -(instancetype _Nonnull)initWithTotal:(NSUInteger)total frozen:(NSUInteger)frozen slow:(NSUInteger)slow slowFrameTimestamps:(SentryFrameInfoTimeSeries * _Nonnull)slowFrameTimestamps frozenFrameTimestamps:(SentryFrameInfoTimeSeries * _Nonnull)frozenFrameTimestamps frameRateTimestamps:(SentryFrameInfoTimeSeries * _Nonnull)frameRateTimestamps;
    [Export("initWithTotal:frozen:slow:slowFrameTimestamps:frozenFrameTimestamps:frameRateTimestamps:")]
    NativeHandle Constructor(nuint total, nuint frozen, nuint slow, NSDictionary<NSString, NSNumber>[] slowFrameTimestamps, NSDictionary<NSString, NSNumber>[] frozenFrameTimestamps, NSDictionary<NSString, NSNumber>[] frameRateTimestamps);

    // @property (readonly, assign, nonatomic) NSUInteger total;
    [Export("total")]
    nuint Total { get; }

    // @property (readonly, assign, nonatomic) NSUInteger frozen;
    [Export("frozen")]
    nuint Frozen { get; }

    // @property (readonly, assign, nonatomic) NSUInteger slow;
    [Export("slow")]
    nuint Slow { get; }

    // @property (readonly, copy, nonatomic) SentryFrameInfoTimeSeries * _Nonnull slowFrameTimestamps;
    [Export("slowFrameTimestamps", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSNumber>[] SlowFrameTimestamps { get; }

    // @property (readonly, copy, nonatomic) SentryFrameInfoTimeSeries * _Nonnull frozenFrameTimestamps;
    [Export("frozenFrameTimestamps", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSNumber>[] FrozenFrameTimestamps { get; }

    // @property (readonly, copy, nonatomic) SentryFrameInfoTimeSeries * _Nonnull frameRateTimestamps;
    [Export("frameRateTimestamps", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSNumber>[] FrameRateTimestamps { get; }
}

// @interface PrivateSentrySDKOnly : NSObject
[BaseType(typeof(NSObject))]
[Internal]
interface PrivateSentrySDKOnly
{

    // +(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImages;
    [Static]
    [Export("getDebugImages")]
    SentryDebugMeta[] DebugImages { get; }

    // +(NSArray<SentryDebugMeta *> * _Nonnull)getDebugImagesCrashed:(BOOL)isCrash;
    [Static]
    [Export("getDebugImagesCrashed:")]
    SentryDebugMeta[] GetDebugImagesCrashed(bool isCrash);

    // +(void)setSdkName:(NSString * _Nonnull)sdkName andVersionString:(NSString * _Nonnull)versionString;
    [Static]
    [Export("setSdkName:andVersionString:")]
    void SetSdkName(string sdkName, string versionString);

    // +(void)setSdkName:(NSString * _Nonnull)sdkName;
    [Static]
    [Export("setSdkName:")]
    void SetSdkName(string sdkName);

    // +(NSString * _Nonnull)getSdkName;
    [Static]
    [Export("getSdkName")]
    string SdkName { get; }

    // +(NSString * _Nonnull)getSdkVersionString;
    [Static]
    [Export("getSdkVersionString")]
    string SdkVersionString { get; }

    // +(void)addSdkPackage:(NSString * _Nonnull)name version:(NSString * _Nonnull)version;
    [Static]
    [Export("addSdkPackage:version:")]
    void AddSdkPackage(string name, string version);

    // +(NSDictionary * _Nonnull)getExtraContext;
    [Static]
    [Export("getExtraContext")]
    NSDictionary ExtraContext { get; }

    // +(void)setTrace:(SentryId * _Nonnull)traceId spanId:(SentrySpanId * _Nonnull)spanId;
    [Static]
    [Export("setTrace:spanId:")]
    void SetTrace(SentryId traceId, SentrySpanId spanId);

    // +(uint64_t)startProfilerForTrace:(SentryId * _Nonnull)traceId;
    [Static]
    [Export("startProfilerForTrace:")]
    ulong StartProfilerForTrace(SentryId traceId);

    // +(NSMutableDictionary<NSString *,id> * _Nullable)collectProfileBetween:(uint64_t)startSystemTime and:(uint64_t)endSystemTime forTrace:(SentryId * _Nonnull)traceId;
    [Static]
    [Export("collectProfileBetween:and:forTrace:")]
    [return: NullAllowed]
    NSMutableDictionary<NSString, NSObject> CollectProfileBetween(ulong startSystemTime, ulong endSystemTime, SentryId traceId);

    // +(void)discardProfilerForTrace:(SentryId * _Nonnull)traceId;
    [Static]
    [Export("discardProfilerForTrace:")]
    void DiscardProfilerForTrace(SentryId traceId);

    // @property (readonly, copy, nonatomic, class) NSString * _Nonnull installationID;
    [Static]
    [Export("installationID")]
    string InstallationID { get; }

    // @property (readonly, copy, nonatomic, class) SentryOptions * _Nonnull options;
    [Static]
    [Export("options", ArgumentSemantic.Copy)]
    SentryOptions Options { get; }

    // @property (assign, nonatomic, class) BOOL framesTrackingMeasurementHybridSDKMode;
    [Static]
    [Export("framesTrackingMeasurementHybridSDKMode")]
    bool FramesTrackingMeasurementHybridSDKMode { get; set; }

    // @property (readonly, assign, nonatomic, class) BOOL isFramesTrackingRunning;
    [Static]
    [Export("isFramesTrackingRunning")]
    bool IsFramesTrackingRunning { get; }

    // @property (readonly, assign, nonatomic, class) SentryScreenFrames * _Nonnull currentScreenFrames;
    [Static]
    [Export("currentScreenFrames", ArgumentSemantic.Assign)]
    SentryScreenFrames CurrentScreenFrames { get; }

    // +(NSArray<NSData *> * _Nonnull)captureScreenshots;
    [Static]
    [Export("captureScreenshots")]
    NSData[] CaptureScreenshots();

    // +(NSData * _Nonnull)captureViewHierarchy;
    [Static]
    [Export("captureViewHierarchy")]
    NSData CaptureViewHierarchy();

    // +(void)setCurrentScreen:(NSString * _Nullable)screenName;
    [Static]
    [Export("setCurrentScreen:")]
    void SetCurrentScreen([NullAllowed] string screenName);

    // +(UIView * _Nonnull)sessionReplayMaskingOverlay:(id<SentryRedactOptions> _Nonnull)options;
    [Static]
    [Export("sessionReplayMaskingOverlay:")]
    UIView SessionReplayMaskingOverlay(ISentryRedactOptions options);

    // +(void)configureSessionReplayWith:(id<SentryReplayBreadcrumbConverter> _Nullable)breadcrumbConverter screenshotProvider:(id<SentryViewScreenshotProvider> _Nullable)screenshotProvider;
    [Static]
    [Export("configureSessionReplayWith:screenshotProvider:")]
    void ConfigureSessionReplayWith([NullAllowed] SentryReplayBreadcrumbConverter breadcrumbConverter, [NullAllowed] SentryViewScreenshotProvider screenshotProvider);

    // +(void)captureReplay;
    [Static]
    [Export("captureReplay")]
    void CaptureReplay();

    // +(NSString * _Nullable)getReplayId;
    [Static]
    [NullAllowed, Export("getReplayId")]
    string ReplayId { get; }

    // +(void)addReplayIgnoreClasses:(NSArray<Class> * _Nonnull)classes;
    [Static]
    [Export("addReplayIgnoreClasses:")]
    void AddReplayIgnoreClasses(Class[] classes);

    // +(void)addReplayRedactClasses:(NSArray<Class> * _Nonnull)classes;
    [Static]
    [Export("addReplayRedactClasses:")]
    void AddReplayRedactClasses(Class[] classes);

    // +(void)setIgnoreContainerClass:(Class _Nonnull)containerClass;
    [Static]
    [Export("setIgnoreContainerClass:")]
    void SetIgnoreContainerClass(Class containerClass);

    // +(void)setRedactContainerClass:(Class _Nonnull)containerClass;
    [Static]
    [Export("setRedactContainerClass:")]
    void SetRedactContainerClass(Class containerClass);

    // +(void)setReplayTags:(NSDictionary<NSString *,id> * _Nonnull)tags;
    [Static]
    [Export("setReplayTags:")]
    void SetReplayTags(NSDictionary<NSString, NSObject> tags);

    // +(SentryUser * _Nonnull)userWithDictionary:(NSDictionary * _Nonnull)dictionary;
    [Static]
    [Export("userWithDictionary:")]
    SentryUser UserWithDictionary(NSDictionary dictionary);

    // +(SentryBreadcrumb * _Nonnull)breadcrumbWithDictionary:(NSDictionary * _Nonnull)dictionary;
    [Static]
    [Export("breadcrumbWithDictionary:")]
    SentryBreadcrumb BreadcrumbWithDictionary(NSDictionary dictionary);
}