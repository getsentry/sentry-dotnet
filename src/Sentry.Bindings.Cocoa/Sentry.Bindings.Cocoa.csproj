<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks Condition="'$(NO_IOS)' == '' And '$(NO_MACCATALYST)' == ''">net8.0-ios17.0;net8.0-maccatalyst17.0</TargetFrameworks>
    <TargetFrameworks Condition="'$(NO_IOS)' == '' And '$(NO_MACCATALYST)' == 'true'">net8.0-ios17.0</TargetFrameworks>
    <TargetFrameworks Condition="'$(NO_IOS)' == 'true' And '$(NO_MACCATALYST)' == ''">net8.0-maccatalyst17.0</TargetFrameworks>
    <IsBindingProject>true</IsBindingProject>
    <MtouchNoSymbolStrip>true</MtouchNoSymbolStrip>
    <Description>.NET Bindings for the Sentry Cocoa SDK</Description>
    <SentryCocoaCache>..\..\modules\sentry-cocoa\</SentryCocoaCache>
    <SentryCocoaFrameworkHeaders>$(SentryCocoaCache)Sentry.framework\</SentryCocoaFrameworkHeaders>
    <SentryCocoaProperties>$([System.IO.File]::ReadAllText("$(MSBuildThisFileDirectory)../../modules/sentry-cocoa.properties"))</SentryCocoaProperties>
    <SentryCocoaVersion>$([System.Text.RegularExpressions.Regex]::Match($(SentryCocoaProperties), 'version\s*=\s*([^\s]+)').Groups[1].Value)</SentryCocoaVersion>
    <SentryCocoaFramework Condition="!Exists('$(SentryCocoaCache).git')">$(SentryCocoaCache)Sentry-$(SentryCocoaVersion).xcframework</SentryCocoaFramework>
    <SentryCocoaFramework Condition="Exists('$(SentryCocoaCache).git')">$(SentryCocoaCache)Carthage\Build-$(TargetPlatformIdentifier)\Sentry.xcframework</SentryCocoaFramework>
    <!-- SentrySpan.g.cs: error CS0108: 'ISentrySpan.Serialize()' hides inherited member 'ISentrySerializable.Serialize()'. Use the new keyword if hiding was intended -->
    <NoWarn>$(NoWarn);CS0108</NoWarn>
  </PropertyGroup>

  <!-- Build empty assemblies when not on macOS, to pass the solution build. -->
  <ItemGroup Condition="!$([MSBuild]::IsOSPlatform('OSX'))">
    <Compile Remove="*" />
    <Using Remove="*" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Sentry" PublicKey="$(SentryPublicKey)" />
    <InternalsVisibleTo Include="Sentry.Testing" PublicKey="$(SentryPublicKey)" />
    <InternalsVisibleTo Include="Sentry.Tests" PublicKey="$(SentryPublicKey)" />
    <InternalsVisibleTo Include="Sentry.Extensions.Logging.Tests" PublicKey="$(SentryPublicKey)" />
    <InternalsVisibleTo Include="Sentry.Maui.Tests" PublicKey="$(SentryPublicKey)" />
  </ItemGroup>

  <ItemGroup Condition="$([MSBuild]::IsOSPlatform('OSX'))">

    <!-- Set up the binding project. -->
    <ObjcBindingApiDefinition Include="ApiDefinitions.cs" />
    <ObjcBindingApiDefinition Include="PrivateApiDefinitions.cs" />
    <ObjcBindingApiDefinition Include="SwiftApiDefinitions.cs" />
    <ObjcBindingCoreSource Include="StructsAndEnums.cs" />
    <ObjcBindingCoreSource Include="SwiftStructsAndEnums.cs" />
    <NativeReference Include="$(SentryCocoaFramework)" Kind="Framework" />

    <!-- Use a separate readme file in the nuget. -->
    <None Remove="$(MSBuildThisFileDirectory)..\..\README.md" />
    <None Include="$(MSBuildThisFileDirectory)README.md" Pack="true" PackagePath="" />

    <!-- Don't add the changelog to the nuget. -->
    <PackageReference Remove="SIL.ReleaseTasks" />

    <!-- Include our transitive build targets in the nuget. -->
    <None Include="buildTransitive\Sentry.Bindings.Cocoa.targets" Pack="true" PackagePath="buildTransitive\Sentry.Bindings.Cocoa.targets" />
  </ItemGroup>

  <!-- Downloads and sets up the Cocoa SDK: dotnet msbuild /t:setupCocoaSDK src/Sentry.Bindings.Cocoa/Sentry.Bindings.Cocoa.csproj -->
  <Target Name="_DownloadCocoaSDK"
          Condition="$([MSBuild]::IsOSPlatform('OSX')) And !Exists('$(SentryCocoaCache).git') And !Exists('$(SentryCocoaFramework)')">

    <Message Importance="High" Text="Setting up the Cocoa SDK version '$(SentryCocoaVersion)'." />

    <!-- Clean cache if version does not exist to get rid of old versions -->
    <RemoveDir
      Condition="!Exists('$(SentryCocoaFramework).zip')"
      Directories="$(SentryCocoaCache)" />

    <!-- Create cache directory -->
    <MakeDir Condition="!Exists('$(SentryCocoaCache)')" Directories="$(SentryCocoaCache)" />

    <!-- Download the Cocoa SDK as pre-built .xcframework -->
    <Exec
      Condition="!Exists('$(SentryCocoaFramework).zip')"
      Command="curl -L https://github.com/getsentry/sentry-cocoa/releases/download/$(SentryCocoaVersion)/Sentry-Dynamic.xcframework.zip -o $(SentryCocoaFramework).zip" />

    <Exec
      Condition="Exists('$(SentryCocoaFramework).zip') and !Exists('$(SentryCocoaFramework)')"
      Command="unzip -o $(SentryCocoaFramework).zip -d $(SentryCocoaCache) &amp;&amp; mv $(SentryCocoaCache)Sentry-Dynamic.xcframework $(SentryCocoaFramework)" />

    <!-- Make a copy of the header files before we butcher these to suite objective sharpie -->
    <MakeDir Directories="$(SentryCocoaFrameworkHeaders)" />
    <ItemGroup>
      <FilesToCopy Include="$(SentryCocoaFramework)\ios-arm64\Sentry.framework\**\*" />
    </ItemGroup>
    <Copy SourceFiles="@(FilesToCopy)"
          DestinationFolder="$(SentryCocoaFrameworkHeaders)%(RecursiveDir)"
          SkipUnchangedFiles="true" />
  </Target>

  <!-- Build the Sentry Cocoa SDK from source -->
  <Target Name="_BuildCocoaSDK"
          Condition="$([MSBuild]::IsOSPlatform('OSX')) And Exists('$(SentryCocoaCache).git')"
          Inputs="..\..\modules\modules\sentry-cocoa\.git\HEAD" Outputs="..\..\modules\sentry-cocoa\Carthage\.built-from-sha">

    <Message Importance="High" Text="Building the Cocoa SDK from source." />
    <Exec Command="bash ../../scripts/build-sentry-cocoa.sh" IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!-- Choose between download and build -->
  <Target Name="_SetupCocoaSDK"
          DependsOnTargets="_DownloadCocoaSDK;_BuildCocoaSDK"
          Condition="$([MSBuild]::IsOSPlatform('OSX'))" />

  <!-- Setup exactly once: https://learn.microsoft.com/visualstudio/msbuild/run-target-exactly-once -->
  <Target Name="SetupCocoaSDKBeforeOuterBuild" DependsOnTargets="_SetupCocoaSDK"
          Condition="$([MSBuild]::IsOSPlatform('OSX'))"
          BeforeTargets="DispatchToInnerBuilds" />

  <Target Name="SetupCocoaSDK"
          BeforeTargets="BeforeBuild"
          Condition="$([MSBuild]::IsOSPlatform('OSX'))">
    <!-- Setup exactly once: https://learn.microsoft.com/visualstudio/msbuild/run-target-exactly-once -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_SetupCocoaSDK" RemoveProperties="TargetFramework" />
  </Target>

  <Target Name="CleanCocoaSDK" AfterTargets="Clean" Condition="$([MSBuild]::IsOSPlatform('OSX'))">
    <RemoveDir Directories="$(SentryCocoaCache)" ContinueOnError="true" />
  </Target>

  <!-- Generate bindings -->
  <Target Name="_GenerateSentryCocoaBindings" AfterTargets="SetupCocoaSDK"
          Condition="$([MSBuild]::IsOSPlatform('OSX'))"
          Inputs="../../modules/sentry-cocoa.properties;../../scripts/generate-cocoa-bindings.ps1;../../modules/sentry-cocoa/Carthage/.built-from-sha"
          Outputs="ApiDefinitions.cs;StructsAndEnums.cs">
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="_InnerGenerateSentryCocoaBindings" Properties="TargetFramework=once" />
  </Target>
  <Target Name="_InnerGenerateSentryCocoaBindings">
    <Exec Command="pwsh ../../scripts/generate-cocoa-bindings.ps1" />
    <!-- See https://github.com/getsentry/sentry-dotnet/pull/2558 -->
    <Exec Condition="'$(GITHUB_ACTIONS)' == 'true'" Command="pwsh ../../scripts/dirty-check.ps1 -PathToCheck $(MSBuildThisFileDirectory)" />
  </Target>

  <!-- Workaround for https://github.com/xamarin/xamarin-macios/issues/15299 -->
  <Target Name="_SetGeneratedSupportDelegatesInternal" BeforeTargets="CoreCompile" Condition="$([MSBuild]::IsOSPlatform('OSX'))"
    Inputs="$(GeneratedSourcesDir)SupportDelegates.g.cs" Outputs="$(GeneratedSourcesDir)SupportDelegates.g.cs.stamp">
    <PropertyGroup>
      <GeneratedSupportDelegatesFile>$(GeneratedSourcesDir)SupportDelegates.g.cs</GeneratedSupportDelegatesFile>
    </PropertyGroup>
    <Message Text="Patching $(MSBuildThisFileDirectory)$(GeneratedSupportDelegatesFile)" Importance="High" />
    <WriteLinesToFile
      File="$(GeneratedSupportDelegatesFile)"
      Lines="$([System.IO.File]::ReadAllText($(GeneratedSupportDelegatesFile)).Replace('public delegate','internal delegate'))"
      Overwrite="true" />
    <Touch Files="$(GeneratedSupportDelegatesFile).stamp" AlwaysCreate="true" />
  </Target>

</Project>
