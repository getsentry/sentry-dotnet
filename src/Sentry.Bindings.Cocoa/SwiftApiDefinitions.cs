// -----------------------------------------------------------------------------
// This file is auto-generated by Objective Sharpie and patched via the script
// at /scripts/generate-cocoa-bindings.ps1.  Do not edit this file directly.
// If changes are required, update the script instead.
// -----------------------------------------------------------------------------

using System;
using CoreFoundation;
using Foundation;
using MetricKit;
using ObjCRuntime;
using Sentry;
using UIKit;

namespace Sentry.CocoaSdk;

// @interface SentryAppState : NSObject <SentrySerializable>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry14SentryAppState")]
[DisableDefaultCtor]
[Internal]
interface SentryAppState : SentrySerializable
{
    // @property (readonly, copy, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export ("releaseName")]
    string ReleaseName { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull osVersion;
    [Export ("osVersion")]
    string OsVersion { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull vendorId;
    [Export ("vendorId")]
    string VendorId { get; }

    // @property (readonly, nonatomic) BOOL isDebugging;
    [Export ("isDebugging")]
    bool IsDebugging { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nonnull systemBootTimestamp;
    [Export ("systemBootTimestamp", ArgumentSemantic.Copy)]
    NSDate SystemBootTimestamp { get; }

    // @property (nonatomic) BOOL isActive;
    [Export ("isActive")]
    bool IsActive { get; set; }

    // @property (nonatomic) BOOL wasTerminated;
    [Export ("wasTerminated")]
    bool WasTerminated { get; set; }

    // @property (nonatomic) BOOL isANROngoing;
    [Export ("isANROngoing")]
    bool IsANROngoing { get; set; }

    // @property (nonatomic) BOOL isSDKRunning;
    [Export ("isSDKRunning")]
    bool IsSDKRunning { get; set; }

    // -(instancetype _Nonnull)initWithReleaseName:(NSString * _Nullable)releaseName osVersion:(NSString * _Nonnull)osVersion vendorId:(NSString * _Nonnull)vendorId isDebugging:(BOOL)isDebugging systemBootTimestamp:(NSDate * _Nonnull)systemBootTimestamp __attribute__((objc_designated_initializer));
    [Export ("initWithReleaseName:osVersion:vendorId:isDebugging:systemBootTimestamp:")]
    [DesignatedInitializer]
    NativeHandle Constructor ([NullAllowed] string releaseName, string osVersion, string vendorId, bool isDebugging, NSDate systemBootTimestamp);

    // -(instancetype _Nullable)initWithJSONObject:(NSDictionary<NSString *,id> * _Nonnull)jsonObject __attribute__((objc_designated_initializer));
    [Export ("initWithJSONObject:")]
    [DesignatedInitializer]
    NativeHandle Constructor (NSDictionary<NSString, NSObject> jsonObject);

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @interface SentryClientReport : NSObject <SentrySerializable>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry18SentryClientReport")]
[DisableDefaultCtor]
[Internal]
interface SentryClientReport : SentrySerializable
{
    // -(instancetype _Nonnull)initWithDiscardedEvents:(NSArray<SentryDiscardedEvent *> * _Nonnull)discardedEvents dateProvider:(id<SentryCurrentDateProvider> _Nonnull)dateProvider __attribute__((objc_designated_initializer));
    [Export ("initWithDiscardedEvents:dateProvider:")]
    [DesignatedInitializer]
    NativeHandle Constructor (SentryDiscardedEvent[] discardedEvents, SentryCurrentDateProvider dateProvider);

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @protocol SentryCurrentDateProvider
[Protocol (Name = "_TtP6Sentry25SentryCurrentDateProvider_")]
[Model]
[Internal]
[BaseType (typeof(NSObject))]
interface SentryCurrentDateProvider
{
    // @required -(NSDate * _Nonnull)date __attribute__((warn_unused_result("")));
    [Abstract]
    [Export ("date")]
    NSDate Date();

    // @required -(NSInteger)timezoneOffset __attribute__((warn_unused_result("")));
    [Abstract]
    [Export ("timezoneOffset")]
    nint TimezoneOffset();

    // @required -(uint64_t)systemTime __attribute__((warn_unused_result("")));
    [Abstract]
    [Export ("systemTime")]
    ulong SystemTime();

    // @required -(NSTimeInterval)systemUptime __attribute__((warn_unused_result("")));
    [Abstract]
    [Export ("systemUptime")]
    double SystemUptime();
}

// @interface SentryDiscardedEvent : NSObject <SentrySerializable>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry20SentryDiscardedEvent")]
[DisableDefaultCtor]
[Internal]
interface SentryDiscardedEvent : SentrySerializable
{
    // @property (readonly, nonatomic) NSUInteger quantity;
    [Export ("quantity")]
    nuint Quantity { get; }

    // -(instancetype _Nonnull)initWithReason:(NSString * _Nonnull)reason category:(NSString * _Nonnull)category quantity:(NSUInteger)quantity __attribute__((objc_designated_initializer));
    [Export ("initWithReason:category:quantity:")]
    [DesignatedInitializer]
    NativeHandle Constructor (string reason, string category, nuint quantity);

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @interface SentryEnvelope : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry14SentryEnvelope")]
[DisableDefaultCtor]
[Internal]
interface SentryEnvelope
{
    // -(instancetype _Nonnull)initWithId:(SentryId * _Nullable)id singleItem:(SentryEnvelopeItem * _Nonnull)item __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Export ("initWithId:singleItem:")]
    NativeHandle Constructor ([NullAllowed] SentryId id, SentryEnvelopeItem item);

    // -(instancetype _Nonnull)initWithHeader:(SentryEnvelopeHeader * _Nonnull)header singleItem:(SentryEnvelopeItem * _Nonnull)item;
    [Export ("initWithHeader:singleItem:")]
    NativeHandle Constructor (SentryEnvelopeHeader header, SentryEnvelopeItem item);

    // -(instancetype _Nonnull)initWithId:(SentryId * _Nullable)id items:(NSArray<SentryEnvelopeItem *> * _Nonnull)items __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Export ("initWithId:items:")]
    NativeHandle Constructor ([NullAllowed] SentryId id, SentryEnvelopeItem[] items);

    // -(instancetype _Nonnull)initWithHeader:(SentryEnvelopeHeader * _Nonnull)header items:(NSArray<SentryEnvelopeItem *> * _Nonnull)items __attribute__((objc_designated_initializer));
    [Export ("initWithHeader:items:")]
    [DesignatedInitializer]
    NativeHandle Constructor (SentryEnvelopeHeader header, SentryEnvelopeItem[] items);

    // @property (readonly, nonatomic, strong) SentryEnvelopeHeader * _Nonnull header;
    [Export ("header", ArgumentSemantic.Strong)]
    SentryEnvelopeHeader Header { get; }

    // @property (readonly, copy, nonatomic) NSArray<SentryEnvelopeItem *> * _Nonnull items;
    [Export ("items", ArgumentSemantic.Copy)]
    SentryEnvelopeItem[] Items { get; }
}

// @interface SentryEnvelopeHeader : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry20SentryEnvelopeHeader")]
[DisableDefaultCtor]
[Internal]
interface SentryEnvelopeHeader
{
    // -(instancetype _Nonnull)initWithId:(SentryId * _Nullable)eventId __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Export ("initWithId:")]
    NativeHandle Constructor ([NullAllowed] SentryId eventId);

    // -(instancetype _Nonnull)initWithId:(SentryId * _Nullable)eventId traceContext:(SentryTraceContext * _Nullable)traceContext __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Export ("initWithId:traceContext:")]
    NativeHandle Constructor ([NullAllowed] SentryId eventId, [NullAllowed] SentryTraceContext traceContext);

    // -(instancetype _Nonnull)initWithId:(SentryId * _Nullable)eventId sdkInfo:(SentrySdkInfo * _Nullable)sdkInfo traceContext:(SentryTraceContext * _Nullable)traceContext __attribute__((objc_designated_initializer));
    [Export ("initWithId:sdkInfo:traceContext:")]
    [DesignatedInitializer]
    NativeHandle Constructor ([NullAllowed] SentryId eventId, [NullAllowed] SentrySdkInfo sdkInfo, [NullAllowed] SentryTraceContext traceContext);

    // +(instancetype _Nonnull)empty __attribute__((warn_unused_result(""))) __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Static]
    [Export ("empty")]
    SentryEnvelopeHeader Empty ();

    // @property (nonatomic, strong) SentryId * _Nullable eventId;
    [NullAllowed, Export ("eventId", ArgumentSemantic.Strong)]
    SentryId EventId { get; set; }

    // @property (nonatomic, strong) SentrySdkInfo * _Nullable sdkInfo;
    [NullAllowed, Export ("sdkInfo", ArgumentSemantic.Strong)]
    SentrySdkInfo SdkInfo { get; set; }

    // @property (nonatomic, strong) SentryTraceContext * _Nullable traceContext;
    [NullAllowed, Export ("traceContext", ArgumentSemantic.Strong)]
    SentryTraceContext TraceContext { get; set; }

    // @property (copy, nonatomic) NSDate * _Nullable sentAt;
    [NullAllowed, Export ("sentAt", ArgumentSemantic.Copy)]
    NSDate SentAt { get; set; }
}

// @interface SentryEnvelopeItem : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry18SentryEnvelopeItem")]
[DisableDefaultCtor]
[Internal]
interface SentryEnvelopeItem
{
    // @property (readonly, nonatomic, strong) SentryEnvelopeItemHeader * _Nonnull header;
    [Export ("header", ArgumentSemantic.Strong)]
    SentryEnvelopeItemHeader Header { get; }

    // @property (readonly, copy, nonatomic) NSData * _Nullable data;
    [NullAllowed, Export ("data", ArgumentSemantic.Copy)]
    NSData Data { get; }

    // -(instancetype _Nonnull)initWithHeader:(SentryEnvelopeItemHeader * _Nonnull)header data:(NSData * _Nullable)data __attribute__((objc_designated_initializer));
    [Export ("initWithHeader:data:")]
    [DesignatedInitializer]
    NativeHandle Constructor (SentryEnvelopeItemHeader header, [NullAllowed] NSData data);

    // -(instancetype _Nonnull)initWithEvent:(SentryEvent * _Nonnull)event;
    [Export ("initWithEvent:")]
    NativeHandle Constructor (SentryEvent @event);

    // -(instancetype _Nonnull)initWithSession:(SentrySession * _Nonnull)session;
    [Export ("initWithSession:")]
    NativeHandle Constructor (SentrySession session);

    // -(instancetype _Nonnull)initWithUserFeedback:(SentryUserFeedback * _Nonnull)userFeedback __attribute__((deprecated("Building the envelopes for the new SentryFeedback type is done directly in -[SentryClient captureFeedback:withScope:] so there will be no analog to this initializer for SentryFeedback at this time.")));
    [Export ("initWithUserFeedback:")]
    NativeHandle Constructor (SentryUserFeedback userFeedback);

    // -(instancetype _Nullable)initWithAttachment:(SentryAttachment * _Nonnull)attachment maxAttachmentSize:(NSUInteger)maxAttachmentSize;
    [Export ("initWithAttachment:maxAttachmentSize:")]
    NativeHandle Constructor (SentryAttachment attachment, nuint maxAttachmentSize);

    // -(instancetype _Nonnull)initWithClientReport:(SentryClientReport * _Nonnull)clientReport;
    [Export ("initWithClientReport:")]
    NativeHandle Constructor (SentryClientReport clientReport);

    // -(instancetype _Nullable)initWithReplayEvent:(SentryReplayEvent * _Nonnull)replayEvent replayRecording:(SentryReplayRecording * _Nonnull)replayRecording video:(NSURL * _Nonnull)video;
    [Export ("initWithReplayEvent:replayRecording:video:")]
    NativeHandle Constructor (SentryReplayEvent replayEvent, SentryReplayRecording replayRecording, NSUrl video);
}

// @interface SentryFeedback : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry14SentryFeedback")]
[DisableDefaultCtor]
[Internal]
interface SentryFeedback
{
    // @property (readonly, nonatomic, strong) SentryId * _Nonnull eventId;
    [Export ("eventId", ArgumentSemantic.Strong)]
    SentryId EventId { get; }

    // -(instancetype _Nonnull)initWithMessage:(NSString * _Nonnull)message name:(NSString * _Nullable)name email:(NSString * _Nullable)email source:(enum SentryFeedbackSource)source associatedEventId:(SentryId * _Nullable)associatedEventId attachments:(NSArray<NSData *> * _Nullable)attachments __attribute__((objc_designated_initializer));
    [Export ("initWithMessage:name:email:source:associatedEventId:attachments:")]
    [DesignatedInitializer]
    NativeHandle Constructor (string message, [NullAllowed] string name, [NullAllowed] string email, SentryFeedbackSource source, [NullAllowed] SentryId associatedEventId, [NullAllowed] NSData[] attachments);
}

// @interface SentryId : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry8SentryId")]
[Internal]
interface SentryId
{
    // @property (readonly, nonatomic, strong, class) SentryId * _Nonnull empty;
    [Static]
    [Export ("empty", ArgumentSemantic.Strong)]
    SentryId Empty { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull sentryIdString;
    [Export ("sentryIdString")]
    string SentryIdString { get; }

    // -(instancetype _Nonnull)initWithUuid:(NSUUID * _Nonnull)uuid __attribute__((objc_designated_initializer));
    [Export ("initWithUuid:")]
    [DesignatedInitializer]
    NativeHandle Constructor (NSUuid uuid);

    // -(instancetype _Nonnull)initWithUUIDString:(NSString * _Nonnull)uuidString __attribute__((objc_designated_initializer));
    [Export ("initWithUUIDString:")]
    [DesignatedInitializer]
    NativeHandle Constructor (string uuidString);

    // @property (readonly, nonatomic) NSUInteger hash;
    [Export ("hash")]
    nuint Hash { get; }
}

// @interface SentryLog : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry9SentryLog")]
[DisableDefaultCtor]
[Internal]
interface SentryLog
{
    // @property (copy, nonatomic) NSDate * _Nonnull timestamp;
    [Export ("timestamp", ArgumentSemantic.Copy)]
    NSDate Timestamp { get; set; }

    // @property (nonatomic, strong) SentryId * _Nonnull traceId;
    [Export ("traceId", ArgumentSemantic.Strong)]
    SentryId TraceId { get; set; }

    // @property (nonatomic) enum SentryStructuredLogLevel level;
    [Export ("level", ArgumentSemantic.Assign)]
    SentryStructuredLogLevel Level { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull body;
    [Export ("body")]
    string Body { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSString *,SentryStructuredLogAttribute *> * _Nonnull attributes;
    [Export ("attributes", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> Attributes { get; set; }

    // @property (nonatomic, strong) NSNumber * _Nullable severityNumber;
    [NullAllowed, Export ("severityNumber", ArgumentSemantic.Strong)]
    NSNumber SeverityNumber { get; set; }
}

// @interface SentryLogger : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry12SentryLogger")]
[DisableDefaultCtor]
[Internal]
interface SentryLogger
{
    // -(void)trace:(NSString * _Nonnull)body;
    [Export ("trace:")]
    void Trace (string body);

    // -(void)trace:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export ("trace:attributes:")]
    void Trace (string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)debug:(NSString * _Nonnull)body;
    [Export ("debug:")]
    void Debug (string body);

    // -(void)debug:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export ("debug:attributes:")]
    void Debug (string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)info:(NSString * _Nonnull)body;
    [Export ("info:")]
    void Info (string body);

    // -(void)info:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export ("info:attributes:")]
    void Info (string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)warn:(NSString * _Nonnull)body;
    [Export ("warn:")]
    void Warn (string body);

    // -(void)warn:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export ("warn:attributes:")]
    void Warn (string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)error:(NSString * _Nonnull)body;
    [Export ("error:")]
    void Error (string body);

    // -(void)error:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export ("error:attributes:")]
    void Error (string body, NSDictionary<NSString, NSObject> attributes);

    // -(void)fatal:(NSString * _Nonnull)body;
    [Export ("fatal:")]
    void Fatal (string body);

    // -(void)fatal:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *,id> * _Nonnull)attributes;
    [Export ("fatal:attributes:")]
    void Fatal (string body, NSDictionary<NSString, NSObject> attributes);
}

// @interface SentryProfileOptions : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry20SentryProfileOptions")]
[Internal]
interface SentryProfileOptions
{
    // @property (nonatomic) enum SentryProfileLifecycle lifecycle;
    [Export ("lifecycle", ArgumentSemantic.Assign)]
    SentryProfileLifecycle Lifecycle { get; set; }

    // @property (nonatomic) float sessionSampleRate;
    [Export ("sessionSampleRate")]
    float SessionSampleRate { get; set; }

    // @property (nonatomic) BOOL profileAppStarts;
    [Export ("profileAppStarts")]
    bool ProfileAppStarts { get; set; }
}

// @protocol SentryRRWebEvent <SentrySerializable>


// @interface SentryRRWebEvent : NSObject <SentryRRWebEvent>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry16SentryRRWebEvent")]
[DisableDefaultCtor]
[Internal]
interface SentryRRWebEvent //: ISentryRRWebEvent
{
    // @property (readonly, copy, nonatomic) NSDictionary<NSString *,id> * _Nullable data;
    [NullAllowed, Export ("data", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> Data { get; }

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @protocol SentryRedactOptions
[Protocol (Name = "_TtP6Sentry19SentryRedactOptions_")]
[Model]
[Internal]
[BaseType (typeof(NSObject))]
interface SentryRedactOptions
{
    // @required @property (readonly, nonatomic) BOOL maskAllText;
    [Abstract]
    [Export ("maskAllText")]
    bool MaskAllText { get; }

    // @required @property (readonly, nonatomic) BOOL maskAllImages;
    [Abstract]
    [Export ("maskAllImages")]
    bool MaskAllImages { get; }

    // @required @property (readonly, copy, nonatomic) NSArray<Class> * _Nonnull maskedViewClasses;
    [Abstract]
    [Export ("maskedViewClasses", ArgumentSemantic.Copy)]
    Class[] MaskedViewClasses { get; }

    // @required @property (readonly, copy, nonatomic) NSArray<Class> * _Nonnull unmaskedViewClasses;
    [Abstract]
    [Export ("unmaskedViewClasses", ArgumentSemantic.Copy)]
    Class[] UnmaskedViewClasses { get; }
}

// @protocol SentryReplayBreadcrumbConverter <NSObject>
[Protocol (Name = "_TtP6Sentry31SentryReplayBreadcrumbConverter_")]
[BaseType (typeof(NSObject), Name = "_TtP6Sentry31SentryReplayBreadcrumbConverter_")]
[Internal]
interface SentryReplayBreadcrumbConverter
{
    // @required -(id<SentryRRWebEvent> _Nullable)convertFrom:(SentryBreadcrumb * _Nonnull)breadcrumb __attribute__((warn_unused_result("")));
    [Abstract]
    [Export ("convertFrom:")]
    [return: NullAllowed]
    SentryRRWebEvent ConvertFrom (SentryBreadcrumb breadcrumb);
}

// @interface SentryReplayEvent : SentryEvent
[BaseType (typeof(SentryEvent), Name = "_TtC6Sentry17SentryReplayEvent")]
[DisableDefaultCtor]
[Internal]
interface SentryReplayEvent
{
    // @property (readonly, copy, nonatomic) NSDate * _Nonnull replayStartTimestamp;
    [Export ("replayStartTimestamp", ArgumentSemantic.Copy)]
    NSDate ReplayStartTimestamp { get; }

    // @property (readonly, nonatomic) enum SentryReplayType replayType;
    [Export ("replayType")]
    SentryReplayType ReplayType { get; }

    // @property (readonly, nonatomic) NSInteger segmentId;
    [Export ("segmentId")]
    nint SegmentId { get; }

    // @property (copy, nonatomic) NSArray<NSString *> * _Nullable urls;
    [NullAllowed, Export ("urls", ArgumentSemantic.Copy)]
    string[] Urls { get; set; }

    // -(instancetype _Nonnull)initWithEventId:(SentryId * _Nonnull)eventId replayStartTimestamp:(NSDate * _Nonnull)replayStartTimestamp replayType:(enum SentryReplayType)replayType segmentId:(NSInteger)segmentId __attribute__((objc_designated_initializer));
    [Export ("initWithEventId:replayStartTimestamp:replayType:segmentId:")]
    [DesignatedInitializer]
    NativeHandle Constructor (SentryId eventId, NSDate replayStartTimestamp, SentryReplayType replayType, nint segmentId);
}

// @interface SentryReplayOptions : NSObject <SentryRedactOptions>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry19SentryReplayOptions")]
[Internal]
interface SentryReplayOptions //: ISentryRedactOptions
{
    // @property (nonatomic) float sessionSampleRate;
    [Export ("sessionSampleRate")]
    float SessionSampleRate { get; set; }

    // @property (nonatomic) float onErrorSampleRate;
    [Export ("onErrorSampleRate")]
    float OnErrorSampleRate { get; set; }

    // @property (nonatomic) BOOL maskAllText;
    [Export ("maskAllText")]
    bool MaskAllText { get; set; }

    // @property (nonatomic) BOOL maskAllImages;
    [Export ("maskAllImages")]
    bool MaskAllImages { get; set; }

    // @property (nonatomic) enum SentryReplayQuality quality;
    [Export ("quality", ArgumentSemantic.Assign)]
    SentryReplayQuality Quality { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull maskedViewClasses;
    [Export ("maskedViewClasses", ArgumentSemantic.Copy)]
    Class[] MaskedViewClasses { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull unmaskedViewClasses;
    [Export ("unmaskedViewClasses", ArgumentSemantic.Copy)]
    Class[] UnmaskedViewClasses { get; set; }

    // @property (nonatomic) BOOL enableExperimentalViewRenderer __attribute__((deprecated("", "enableViewRendererV2")));
    [Export ("enableExperimentalViewRenderer")]
    bool EnableExperimentalViewRenderer { get; set; }

    // @property (nonatomic) BOOL enableViewRendererV2;
    [Export ("enableViewRendererV2")]
    bool EnableViewRendererV2 { get; set; }

    // @property (nonatomic) BOOL enableFastViewRendering;
    [Export ("enableFastViewRendering")]
    bool EnableFastViewRendering { get; set; }

    // @property (readonly, nonatomic) NSInteger replayBitRate;
    [Export ("replayBitRate")]
    nint ReplayBitRate { get; }

    // @property (readonly, nonatomic) float sizeScale;
    [Export ("sizeScale")]
    float SizeScale { get; }

    // @property (nonatomic) NSUInteger frameRate;
    [Export ("frameRate")]
    nuint FrameRate { get; set; }

    // @property (nonatomic) NSTimeInterval errorReplayDuration;
    [Export ("errorReplayDuration")]
    double ErrorReplayDuration { get; set; }

    // @property (nonatomic) NSTimeInterval sessionSegmentDuration;
    [Export ("sessionSegmentDuration")]
    double SessionSegmentDuration { get; set; }

    // @property (nonatomic) NSTimeInterval maximumDuration;
    [Export ("maximumDuration")]
    double MaximumDuration { get; set; }

    // -(instancetype _Nonnull)initWithDictionary:(NSDictionary<NSString *,id> * _Nonnull)dictionary;
    [Export ("initWithDictionary:")]
    NativeHandle Constructor (NSDictionary<NSString, NSObject> dictionary);

    // -(instancetype _Nonnull)initWithSessionSampleRate:(float)sessionSampleRate onErrorSampleRate:(float)onErrorSampleRate maskAllText:(BOOL)maskAllText maskAllImages:(BOOL)maskAllImages enableViewRendererV2:(BOOL)enableViewRendererV2 enableFastViewRendering:(BOOL)enableFastViewRendering;
    [Export ("initWithSessionSampleRate:onErrorSampleRate:maskAllText:maskAllImages:enableViewRendererV2:enableFastViewRendering:")]
    NativeHandle Constructor (float sessionSampleRate, float onErrorSampleRate, bool maskAllText, bool maskAllImages, bool enableViewRendererV2, bool enableFastViewRendering);
}

// @interface SentryReplayRecording : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry21SentryReplayRecording")]
[DisableDefaultCtor]
[Internal]
interface SentryReplayRecording
{
    // -(instancetype _Nonnull)initWithSegmentId:(NSInteger)segmentId video:(SentryVideoInfo * _Nonnull)video extraEvents:(NSArray<id<SentryRRWebEvent>> * _Nonnull)extraEvents;
    [Export ("initWithSegmentId:video:extraEvents:")]
    NativeHandle Constructor (nint segmentId, SentryVideoInfo video, SentryRRWebEvent[] extraEvents);
}

// @interface SentrySDK : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry9SentrySDK")]
[Internal]
interface SentrySDK
{
    // @property (readonly, nonatomic, strong, class) id<SentrySpan> _Nullable span;
    [Static]
    [NullAllowed, Export ("span", ArgumentSemantic.Strong)]
    SentrySpan Span { get; }

    // @property (readonly, nonatomic, class) BOOL isEnabled;
    [Static]
    [Export ("isEnabled")]
    bool IsEnabled { get; }

    // @property (readonly, nonatomic, strong, class) SentryReplayApi * _Nonnull replay;
    [Static]
    [Export ("replay", ArgumentSemantic.Strong)]
    SentryReplayApi Replay { get; }

    // @property (readonly, nonatomic, strong, class) SentryLogger * _Nonnull logger;
    [Static]
    [Export ("logger", ArgumentSemantic.Strong)]
    SentryLogger Logger { get; }

    // +(void)startWithOptions:(SentryOptions * _Nonnull)options;
    [Static]
    [Export ("startWithOptions:")]
    void StartWithOptions (SentryOptions options);

    // +(void)startWithConfigureOptions:(void (^ _Nonnull)(SentryOptions * _Nonnull))configureOptions;
    [Static]
    [Export ("startWithConfigureOptions:")]
    void StartWithConfigureOptions (Action<SentryOptions> configureOptions);

    // +(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event;
    [Static]
    [Export ("captureEvent:")]
    SentryId CaptureEvent (SentryEvent @event);

    // +(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export ("captureEvent:withScope:")]
    SentryId CaptureEvent (SentryEvent @event, SentryScope scope);

    // +(SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export ("captureEvent:withScopeBlock:")]
    SentryId CaptureEvent (SentryEvent @event, Action<SentryScope> block);

    // +(id<SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation;
    [Static]
    [Export ("startTransactionWithName:operation:")]
    SentrySpan StartTransactionWithName (string name, string operation);

    // +(id<SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation bindToScope:(BOOL)bindToScope;
    [Static]
    [Export ("startTransactionWithName:operation:bindToScope:")]
    SentrySpan StartTransactionWithName (string name, string operation, bool bindToScope);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext;
    [Static]
    [Export ("startTransactionWithContext:")]
    SentrySpan StartTransactionWithContext (SentryTransactionContext transactionContext);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope;
    [Static]
    [Export ("startTransactionWithContext:bindToScope:")]
    SentrySpan StartTransactionWithContext (SentryTransactionContext transactionContext, bool bindToScope);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext;
    [Static]
    [Export ("startTransactionWithContext:bindToScope:customSamplingContext:")]
    SentrySpan StartTransactionWithContext (SentryTransactionContext transactionContext, bool bindToScope, NSDictionary<NSString, NSObject> customSamplingContext);

    // +(id<SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext customSamplingContext:(NSDictionary<NSString *,id> * _Nonnull)customSamplingContext;
    [Static]
    [Export ("startTransactionWithContext:customSamplingContext:")]
    SentrySpan StartTransactionWithContext (SentryTransactionContext transactionContext, NSDictionary<NSString, NSObject> customSamplingContext);

    // +(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error;
    [Static]
    [Export ("captureError:")]
    SentryId CaptureError (NSError error);

    // +(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export ("captureError:withScope:")]
    SentryId CaptureError (NSError error, SentryScope scope);

    // +(SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export ("captureError:withScopeBlock:")]
    SentryId CaptureError (NSError error, Action<SentryScope> block);

    // +(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception;
    [Static]
    [Export ("captureException:")]
    SentryId CaptureException (NSException exception);

    // +(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export ("captureException:withScope:")]
    SentryId CaptureException (NSException exception, SentryScope scope);

    // +(SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export ("captureException:withScopeBlock:")]
    SentryId CaptureException (NSException exception, Action<SentryScope> block);

    // +(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message;
    [Static]
    [Export ("captureMessage:")]
    SentryId CaptureMessage (string message);

    // +(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScope:(SentryScope * _Nonnull)scope;
    [Static]
    [Export ("captureMessage:withScope:")]
    SentryId CaptureMessage (string message, SentryScope scope);

    // +(SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
    [Static]
    [Export ("captureMessage:withScopeBlock:")]
    SentryId CaptureMessage (string message, Action<SentryScope> block);

    // +(void)captureUserFeedback:(SentryUserFeedback * _Nonnull)userFeedback __attribute__((deprecated("Use SentrySDK.back or use or configure our new managed UX with SentryOptions.configureUserFeedback.")));
    [Static]
    [Export ("captureUserFeedback:")]
    void CaptureUserFeedback (SentryUserFeedback userFeedback);

    // +(void)captureFeedback:(SentryFeedback * _Nonnull)feedback;
    [Static]
    [Export ("captureFeedback:")]
    void CaptureFeedback (SentryFeedback feedback);

    // @property (readonly, nonatomic, strong, class) SentryFeedbackAPI * _Nonnull feedback __attribute__((availability(ios, introduced=13.0)));
    [Static]
    [Export ("feedback", ArgumentSemantic.Strong)]
    SentryFeedbackAPI Feedback { get; }

    // +(void)addBreadcrumb:(SentryBreadcrumb * _Nonnull)crumb;
    [Static]
    [Export ("addBreadcrumb:")]
    void AddBreadcrumb (SentryBreadcrumb crumb);

    // +(void)configureScope:(void (^ _Nonnull)(SentryScope * _Nonnull))callback;
    [Static]
    [Export ("configureScope:")]
    void ConfigureScope (Action<SentryScope> callback);

    // @property (readonly, nonatomic, class) BOOL crashedLastRun;
    [Static]
    [Export ("crashedLastRun")]
    bool CrashedLastRun { get; }

    // @property (readonly, nonatomic, class) BOOL detectedStartUpCrash;
    [Static]
    [Export ("detectedStartUpCrash")]
    bool DetectedStartUpCrash { get; }

    // +(void)setUser:(SentryUser * _Nullable)user;
    [Static]
    [Export ("setUser:")]
    void SetUser ([NullAllowed] SentryUser user);

    // +(void)startSession;
    [Static]
    [Export ("startSession")]
    void StartSession ();

    // +(void)endSession;
    [Static]
    [Export ("endSession")]
    void EndSession ();

    // +(void)crash;
    [Static]
    [Export ("crash")]
    void Crash ();

    // +(void)reportFullyDisplayed;
    [Static]
    [Export ("reportFullyDisplayed")]
    void ReportFullyDisplayed ();

    // +(void)pauseAppHangTracking;
    [Static]
    [Export ("pauseAppHangTracking")]
    void PauseAppHangTracking ();

    // +(void)resumeAppHangTracking;
    [Static]
    [Export ("resumeAppHangTracking")]
    void ResumeAppHangTracking ();

    // +(void)flush:(NSTimeInterval)timeout;
    [Static]
    [Export ("flush:")]
    void Flush (double timeout);

    // +(void)close;
    [Static]
    [Export ("close")]
    void Close ();

    // +(void)startProfiler;
    [Static]
    [Export ("startProfiler")]
    void StartProfiler ();

    // +(void)stopProfiler;
    [Static]
    [Export ("stopProfiler")]
    void StopProfiler ();

    // +(void)clearLogger;
    [Static]
    [Export ("clearLogger")]
    void ClearLogger ();
}

// @interface SentrySDKSettings : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry17SentrySDKSettings")]
[Internal]
interface SentrySDKSettings
{
    // -(instancetype _Nonnull)initWithOptions:(SentryOptions * _Nullable)options __attribute__((objc_designated_initializer));
    [Export ("initWithOptions:")]
    [DesignatedInitializer]
    NativeHandle Constructor ([NullAllowed] SentryOptions options);

    // -(instancetype _Nonnull)initWithDict:(NSDictionary * _Nonnull)dict __attribute__((objc_designated_initializer));
    [Export ("initWithDict:")]
    [DesignatedInitializer]
    NativeHandle Constructor (NSDictionary dict);

    // @property (nonatomic) BOOL autoInferIP;
    [Export ("autoInferIP")]
    bool AutoInferIP { get; set; }

    // -(NSDictionary * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary Serialize();
}

// @interface SentrySdkInfo : NSObject <SentrySerializable>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry13SentrySdkInfo")]
[DisableDefaultCtor]
[Internal]
interface SentrySdkInfo : SentrySerializable
{
    // +(instancetype _Nonnull)global __attribute__((warn_unused_result(""))) __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Static]
    [Export ("global")]
    SentrySdkInfo Global ();

    // @property (readonly, copy, nonatomic) NSString * _Nonnull name;
    [Export ("name")]
    string Name { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull version;
    [Export ("version")]
    string Version { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull integrations;
    [Export ("integrations", ArgumentSemantic.Copy)]
    string[] Integrations { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull features;
    [Export ("features", ArgumentSemantic.Copy)]
    string[] Features { get; }

    // @property (readonly, copy, nonatomic) NSArray<NSDictionary<NSString *,NSString *> *> * _Nonnull packages;
    [Export ("packages", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSString>[] Packages { get; }

    // @property (readonly, nonatomic, strong) SentrySDKSettings * _Nonnull settings;
    [Export ("settings", ArgumentSemantic.Strong)]
    SentrySDKSettings Settings { get; }

    // -(instancetype _Nonnull)initWithOptions:(SentryOptions * _Nullable)options __attribute__((deprecated("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.")));
    [Export ("initWithOptions:")]
    NativeHandle Constructor ([NullAllowed] SentryOptions options);

    // -(instancetype _Nonnull)initWithName:(NSString * _Nullable)name version:(NSString * _Nullable)version integrations:(NSArray<NSString *> * _Nullable)integrations features:(NSArray<NSString *> * _Nullable)features packages:(NSArray<NSDictionary<NSString *,NSString *> *> * _Nullable)packages settings:(SentrySDKSettings * _Nonnull)settings __attribute__((objc_designated_initializer));
    [Export ("initWithName:version:integrations:features:packages:settings:")]
    [DesignatedInitializer]
    NativeHandle Constructor ([NullAllowed] string name, [NullAllowed] string version, [NullAllowed] string[] integrations, [NullAllowed] string[] features, [NullAllowed] NSDictionary<NSString, NSString>[] packages, SentrySDKSettings settings);

    // -(instancetype _Nonnull)initWithDict:(NSDictionary * _Nonnull)dict;
    [Export ("initWithDict:")]
    NativeHandle Constructor (NSDictionary dict);

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}

// @interface SentrySerializationSwift : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry24SentrySerializationSwift")]
[Internal]
interface SentrySerializationSwift
{
    // +(SentrySession * _Nullable)sessionWithData:(NSData * _Nonnull)data __attribute__((warn_unused_result("")));
    [Static]
    [Export ("sessionWithData:")]
    [return: NullAllowed]
    SentrySession SessionWithData (NSData data);

    // +(SentryAppState * _Nullable)appStateWithData:(NSData * _Nonnull)data __attribute__((warn_unused_result("")));
    [Static]
    [Export ("appStateWithData:")]
    [return: NullAllowed]
    SentryAppState AppStateWithData (NSData data);

    // +(NSData * _Nullable)dataWithJSONObject:(id _Nonnull)jsonObject __attribute__((warn_unused_result("")));
    [Static]
    [Export ("dataWithJSONObject:")]
    [return: NullAllowed]
    NSData DataWithJSONObject (NSObject jsonObject);

    // +(NSData * _Nullable)dataWithEnvelope:(SentryEnvelope * _Nonnull)envelope __attribute__((warn_unused_result("")));
    [Static]
    [Export ("dataWithEnvelope:")]
    [return: NullAllowed]
    NSData DataWithEnvelope (SentryEnvelope envelope);

    // +(NSData * _Nullable)dataWithSession:(SentrySession * _Nonnull)session __attribute__((warn_unused_result("")));
    [Static]
    [Export ("dataWithSession:")]
    [return: NullAllowed]
    NSData DataWithSession (SentrySession session);

    // +(SentryEnvelope * _Nullable)envelopeWithData:(NSData * _Nonnull)data __attribute__((warn_unused_result("")));
    [Static]
    [Export ("envelopeWithData:")]
    [return: NullAllowed]
    SentryEnvelope EnvelopeWithData (NSData data);
}

// @interface SentrySession : NSObject <NSCopying>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry13SentrySession")]
[DisableDefaultCtor]
[Internal]
interface SentrySession
{
    // -(instancetype _Nonnull)initWithReleaseName:(NSString * _Nonnull)releaseName distinctId:(NSString * _Nonnull)distinctId __attribute__((objc_designated_initializer));
    [Export ("initWithReleaseName:distinctId:")]
    [DesignatedInitializer]
    NativeHandle Constructor (string releaseName, string distinctId);

    // -(instancetype _Nullable)initWithJSONObject:(NSDictionary<NSString *,id> * _Nonnull)jsonObject __attribute__((objc_designated_initializer));
    [Export ("initWithJSONObject:")]
    [DesignatedInitializer]
    NativeHandle Constructor (NSDictionary<NSString, NSObject> jsonObject);

    // -(void)endSessionExitedWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export ("endSessionExitedWithTimestamp:")]
    void EndSessionExitedWithTimestamp (NSDate timestamp);

    // -(void)endSessionCrashedWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export ("endSessionCrashedWithTimestamp:")]
    void EndSessionCrashedWithTimestamp (NSDate timestamp);

    // -(void)endSessionAbnormalWithTimestamp:(NSDate * _Nonnull)timestamp;
    [Export ("endSessionAbnormalWithTimestamp:")]
    void EndSessionAbnormalWithTimestamp (NSDate timestamp);

    // -(void)incrementErrors;
    [Export ("incrementErrors")]
    void IncrementErrors ();

    // @property (readonly, copy, nonatomic) NSUUID * _Nonnull sessionId;
    [Export ("sessionId", ArgumentSemantic.Copy)]
    NSUuid SessionId { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nonnull started;
    [Export ("started", ArgumentSemantic.Copy)]
    NSDate Started { get; }

    // @property (readonly, nonatomic) enum SentrySessionStatus status;
    [Export ("status")]
    SentrySessionStatus Status { get; }

    // @property (nonatomic) NSUInteger errors;
    [Export ("errors")]
    nuint Errors { get; set; }

    // @property (readonly, nonatomic) NSUInteger sequence;
    [Export ("sequence")]
    nuint Sequence { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nonnull distinctId;
    [Export ("distinctId")]
    string DistinctId { get; }

    // @property (readonly, nonatomic, strong) NSNumber * _Nullable flagInit;
    [NullAllowed, Export ("flagInit", ArgumentSemantic.Strong)]
    NSNumber FlagInit { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nullable timestamp;
    [NullAllowed, Export ("timestamp", ArgumentSemantic.Copy)]
    NSDate Timestamp { get; }

    // @property (readonly, nonatomic, strong) NSNumber * _Nullable duration;
    [NullAllowed, Export ("duration", ArgumentSemantic.Strong)]
    NSNumber Duration { get; }

    // @property (readonly, copy, nonatomic) NSString * _Nullable releaseName;
    [NullAllowed, Export ("releaseName")]
    string ReleaseName { get; }

    // @property (copy, nonatomic) NSString * _Nullable environment;
    [NullAllowed, Export ("environment")]
    string Environment { get; set; }

    // @property (nonatomic, strong) SentryUser * _Nullable user;
    [NullAllowed, Export ("user", ArgumentSemantic.Strong)]
    SentryUser User { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable abnormalMechanism;
    [NullAllowed, Export ("abnormalMechanism")]
    string AbnormalMechanism { get; set; }

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();

    // -(void)setFlagInit;
    [Export ("setFlagInit")]
    void SetFlagInit ();
}

// @interface SentryUserFeedbackConfiguration : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry31SentryUserFeedbackConfiguration")]
[Internal]
interface SentryUserFeedbackConfiguration
{
    // @property (nonatomic) BOOL animations;
    [Export ("animations")]
    bool Animations { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(SentryUserFeedbackWidgetConfiguration * _Nonnull) configureWidget;
    [NullAllowed, Export ("configureWidget", ArgumentSemantic.Copy)]
    Action<SentryUserFeedbackWidgetConfiguration> ConfigureWidget { get; set; }

    // @property (nonatomic) BOOL useShakeGesture;
    [Export ("useShakeGesture")]
    bool UseShakeGesture { get; set; }

    // @property (nonatomic) BOOL showFormForScreenshots;
    [Export ("showFormForScreenshots")]
    bool ShowFormForScreenshots { get; set; }

    // @property (nonatomic, strong) UIButton * _Nullable customButton;
    [NullAllowed, Export ("customButton", ArgumentSemantic.Strong)]
    UIButton CustomButton { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(SentryUserFeedbackFormConfiguration * _Nonnull) configureForm;
    [NullAllowed, Export ("configureForm", ArgumentSemantic.Copy)]
    Action<SentryUserFeedbackFormConfiguration> ConfigureForm { get; set; }

    // @property (copy, nonatomic) NSDictionary<NSString *,id> * _Nullable tags;
    [NullAllowed, Export ("tags", ArgumentSemantic.Copy)]
    NSDictionary<NSString, NSObject> Tags { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(void) onFormOpen;
    [NullAllowed, Export ("onFormOpen", ArgumentSemantic.Copy)]
    Action OnFormOpen { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(void) onFormClose;
    [NullAllowed, Export ("onFormClose", ArgumentSemantic.Copy)]
    Action OnFormClose { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(NSDictionary<NSString *,id> * _Nonnull) onSubmitSuccess;
    [NullAllowed, Export ("onSubmitSuccess", ArgumentSemantic.Copy)]
    Action<NSDictionary<NSString, NSObject>> OnSubmitSuccess { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(NSError * _Nonnull) onSubmitError;
    [NullAllowed, Export ("onSubmitError", ArgumentSemantic.Copy)]
    Action<NSError> OnSubmitError { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(SentryUserFeedbackThemeConfiguration * _Nonnull) configureTheme;
    [NullAllowed, Export ("configureTheme", ArgumentSemantic.Copy)]
    Action<SentryUserFeedbackThemeConfiguration> ConfigureTheme { get; set; }

    // @property (copy, nonatomic) void (^ _Nullable)(SentryUserFeedbackThemeConfiguration * _Nonnull) configureDarkTheme;
    [NullAllowed, Export ("configureDarkTheme", ArgumentSemantic.Copy)]
    Action<SentryUserFeedbackThemeConfiguration> ConfigureDarkTheme { get; set; }
}

// @interface SentryUserFeedbackFormConfiguration : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry35SentryUserFeedbackFormConfiguration")]
[Internal]
interface SentryUserFeedbackFormConfiguration
{
    // @property (nonatomic) BOOL useSentryUser;
    [Export ("useSentryUser")]
    bool UseSentryUser { get; set; }

    // @property (nonatomic) BOOL showBranding;
    [Export ("showBranding")]
    bool ShowBranding { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull formTitle;
    [Export ("formTitle")]
    string FormTitle { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull messageLabel;
    [Export ("messageLabel")]
    string MessageLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull messagePlaceholder;
    [Export ("messagePlaceholder")]
    string MessagePlaceholder { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull messageTextViewAccessibilityLabel;
    [Export ("messageTextViewAccessibilityLabel")]
    string MessageTextViewAccessibilityLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull isRequiredLabel;
    [Export ("isRequiredLabel")]
    string IsRequiredLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull removeScreenshotButtonLabel;
    [Export ("removeScreenshotButtonLabel")]
    string RemoveScreenshotButtonLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull removeScreenshotButtonAccessibilityLabel;
    [Export ("removeScreenshotButtonAccessibilityLabel")]
    string RemoveScreenshotButtonAccessibilityLabel { get; set; }

    // @property (nonatomic) BOOL isNameRequired;
    [Export ("isNameRequired")]
    bool IsNameRequired { get; set; }

    // @property (nonatomic) BOOL showName;
    [Export ("showName")]
    bool ShowName { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull nameLabel;
    [Export ("nameLabel")]
    string NameLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull namePlaceholder;
    [Export ("namePlaceholder")]
    string NamePlaceholder { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull nameTextFieldAccessibilityLabel;
    [Export ("nameTextFieldAccessibilityLabel")]
    string NameTextFieldAccessibilityLabel { get; set; }

    // @property (nonatomic) BOOL isEmailRequired;
    [Export ("isEmailRequired")]
    bool IsEmailRequired { get; set; }

    // @property (nonatomic) BOOL showEmail;
    [Export ("showEmail")]
    bool ShowEmail { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull emailLabel;
    [Export ("emailLabel")]
    string EmailLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull emailPlaceholder;
    [Export ("emailPlaceholder")]
    string EmailPlaceholder { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull emailTextFieldAccessibilityLabel;
    [Export ("emailTextFieldAccessibilityLabel")]
    string EmailTextFieldAccessibilityLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull submitButtonLabel;
    [Export ("submitButtonLabel")]
    string SubmitButtonLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull submitButtonAccessibilityLabel;
    [Export ("submitButtonAccessibilityLabel")]
    string SubmitButtonAccessibilityLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull cancelButtonLabel;
    [Export ("cancelButtonLabel")]
    string CancelButtonLabel { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull cancelButtonAccessibilityLabel;
    [Export ("cancelButtonAccessibilityLabel")]
    string CancelButtonAccessibilityLabel { get; set; }
}

// @interface SentryUserFeedbackThemeConfiguration : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry36SentryUserFeedbackThemeConfiguration")]
[Internal]
interface SentryUserFeedbackThemeConfiguration
{
    // @property (copy, nonatomic) NSString * _Nullable fontFamily;
    [NullAllowed, Export ("fontFamily")]
    string FontFamily { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull foreground;
    [Export ("foreground", ArgumentSemantic.Strong)]
    UIColor Foreground { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull background;
    [Export ("background", ArgumentSemantic.Strong)]
    UIColor Background { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull submitForeground;
    [Export ("submitForeground", ArgumentSemantic.Strong)]
    UIColor SubmitForeground { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull submitBackground;
    [Export ("submitBackground", ArgumentSemantic.Strong)]
    UIColor SubmitBackground { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull buttonForeground;
    [Export ("buttonForeground", ArgumentSemantic.Strong)]
    UIColor ButtonForeground { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull buttonBackground;
    [Export ("buttonBackground", ArgumentSemantic.Strong)]
    UIColor ButtonBackground { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull errorColor;
    [Export ("errorColor", ArgumentSemantic.Strong)]
    UIColor ErrorColor { get; set; }

    // @property (nonatomic, strong) SentryFormElementOutlineStyle * _Nonnull outlineStyle;
    [Export ("outlineStyle", ArgumentSemantic.Strong)]
    SentryFormElementOutlineStyle OutlineStyle { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull inputBackground;
    [Export ("inputBackground", ArgumentSemantic.Strong)]
    UIColor InputBackground { get; set; }

    // @property (nonatomic, strong) UIColor * _Nonnull inputForeground;
    [Export ("inputForeground", ArgumentSemantic.Strong)]
    UIColor InputForeground { get; set; }
}

// @interface SentryFormElementOutlineStyle : NSObject
[BaseType (typeof(NSObject), Name = "_TtCC6Sentry36SentryUserFeedbackThemeConfiguration29SentryFormElementOutlineStyle")]
[DisableDefaultCtor]
[Internal]
interface SentryFormElementOutlineStyle
{
    // -(instancetype _Nonnull)initWithColor:(UIColor * _Nonnull)color cornerRadius:(CGFloat)cornerRadius outlineWidth:(CGFloat)outlineWidth __attribute__((objc_designated_initializer));
    [Export ("initWithColor:cornerRadius:outlineWidth:")]
    [DesignatedInitializer]
    NativeHandle Constructor (UIColor color, nfloat cornerRadius, nfloat outlineWidth);
}

// @interface SentryUserFeedbackWidgetConfiguration : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry37SentryUserFeedbackWidgetConfiguration")]
[Internal]
interface SentryUserFeedbackWidgetConfiguration
{
    // @property (nonatomic) BOOL autoInject;
    [Export ("autoInject")]
    bool AutoInject { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable labelText;
    [NullAllowed, Export ("labelText")]
    string LabelText { get; set; }

    // @property (nonatomic) BOOL showIcon;
    [Export ("showIcon")]
    bool ShowIcon { get; set; }

    // @property (copy, nonatomic) NSString * _Nullable widgetAccessibilityLabel;
    [NullAllowed, Export ("widgetAccessibilityLabel")]
    string WidgetAccessibilityLabel { get; set; }

    // @property (nonatomic) UIWindowLevel windowLevel;
    [Export ("windowLevel")]
    double WindowLevel { get; set; }

    // @property (nonatomic) NSDirectionalRectEdge location;
    [Export ("location", ArgumentSemantic.Assign)]
    NSDirectionalRectEdge Location { get; set; }

    // @property (nonatomic) UIOffset layoutUIOffset;
    [Export ("layoutUIOffset", ArgumentSemantic.Assign)]
    UIOffset LayoutUIOffset { get; set; }
}

// @interface SentryVideoInfo : NSObject
[BaseType (typeof(NSObject), Name = "_TtC6Sentry15SentryVideoInfo")]
[DisableDefaultCtor]
[Internal]
interface SentryVideoInfo
{
    // @property (readonly, copy, nonatomic) NSURL * _Nonnull path;
    [Export ("path", ArgumentSemantic.Copy)]
    NSUrl Path { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nonnull start;
    [Export ("start", ArgumentSemantic.Copy)]
    NSDate Start { get; }

    // @property (readonly, copy, nonatomic) NSDate * _Nonnull end;
    [Export ("end", ArgumentSemantic.Copy)]
    NSDate End { get; }
}

// @protocol SentryViewScreenshotProvider <NSObject>
[Protocol (Name = "_TtP6Sentry28SentryViewScreenshotProvider_")]
[BaseType (typeof(NSObject), Name = "_TtP6Sentry28SentryViewScreenshotProvider_")]
[Internal]
interface SentryViewScreenshotProvider
{
    // @required -(void)imageWithView:(UIView * _Nonnull)view onComplete:(void (^ _Nonnull)(UIImage * _Nonnull))onComplete;
    [Abstract]
    [Export ("imageWithView:onComplete:")]
    void OnComplete (UIView view, Action<UIImage> onComplete);
}

// @interface SentryViewScreenshotOptions : NSObject <SentryRedactOptions>
[BaseType (typeof(NSObject), Name = "_TtC6Sentry27SentryViewScreenshotOptions")]
[Internal]
interface SentryViewScreenshotOptions //: ISentryRedactOptions
{
    // @property (nonatomic) BOOL enableViewRendererV2;
    [Export ("enableViewRendererV2")]
    bool EnableViewRendererV2 { get; set; }

    // @property (nonatomic) BOOL enableFastViewRendering;
    [Export ("enableFastViewRendering")]
    bool EnableFastViewRendering { get; set; }

    // @property (nonatomic) BOOL maskAllImages;
    [Export ("maskAllImages")]
    bool MaskAllImages { get; set; }

    // @property (nonatomic) BOOL maskAllText;
    [Export ("maskAllText")]
    bool MaskAllText { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull maskedViewClasses;
    [Export ("maskedViewClasses", ArgumentSemantic.Copy)]
    Class[] MaskedViewClasses { get; set; }

    // @property (copy, nonatomic) NSArray<Class> * _Nonnull unmaskedViewClasses;
    [Export ("unmaskedViewClasses", ArgumentSemantic.Copy)]
    Class[] UnmaskedViewClasses { get; set; }

    // -(instancetype _Nonnull)initWithEnableViewRendererV2:(BOOL)enableViewRendererV2 enableFastViewRendering:(BOOL)enableFastViewRendering maskAllText:(BOOL)maskAllText maskAllImages:(BOOL)maskAllImages maskedViewClasses:(NSArray<Class> * _Nonnull)maskedViewClasses unmaskedViewClasses:(NSArray<Class> * _Nonnull)unmaskedViewClasses __attribute__((objc_designated_initializer));
    [Export ("initWithEnableViewRendererV2:enableFastViewRendering:maskAllText:maskAllImages:maskedViewClasses:unmaskedViewClasses:")]
    [DesignatedInitializer]
    NativeHandle Constructor (bool enableViewRendererV2, bool enableFastViewRendering, bool maskAllText, bool maskAllImages, Class[] maskedViewClasses, Class[] unmaskedViewClasses);
}

// @interface SentryUserFeedback : NSObject <SentrySerializable>
[BaseType (typeof(NSObject))]
[DisableDefaultCtor]
[Internal]
interface SentryUserFeedback : SentrySerializable
{
    // @property (readonly, nonatomic, strong) SentryId * _Nonnull eventId;
    [Export ("eventId", ArgumentSemantic.Strong)]
    SentryId EventId { get; }

    // @property (copy, nonatomic) NSString * _Nonnull name;
    [Export ("name")]
    string Name { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull email;
    [Export ("email")]
    string Email { get; set; }

    // @property (copy, nonatomic) NSString * _Nonnull comments;
    [Export ("comments")]
    string Comments { get; set; }

    // -(instancetype _Nonnull)initWithEventId:(SentryId * _Nonnull)eventId __attribute__((objc_designated_initializer));
    [Export ("initWithEventId:")]
    [DesignatedInitializer]
    NativeHandle Constructor (SentryId eventId);

    // -(NSDictionary<NSString *,id> * _Nonnull)serialize __attribute__((warn_unused_result("")));
    [Export ("serialize")]
    NSDictionary<NSString, NSObject> Serialize();
}
