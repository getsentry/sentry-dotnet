Microsoft.Extensions.Logging.LoggingBuilderExtensions
Microsoft.Extensions.Logging.SentryLoggerFactoryExtensions
Sentry.Extensions.Logging.DelegateLogEntryFilter
Sentry.Extensions.Logging.DelegateLogEntryFilter.DelegateLogEntryFilter(System.Func<string, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.Exception, bool> filter) -> void
Sentry.Extensions.Logging.DelegateLogEntryFilter.Filter(string categoryName, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception exception) -> bool
Sentry.Extensions.Logging.Extensions.DependencyInjection.ServiceCollectionExtensions
Sentry.Extensions.Logging.ILogEntryFilter
Sentry.Extensions.Logging.ILogEntryFilter.Filter(string categoryName, Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, System.Exception exception) -> bool
Sentry.Extensions.Logging.MelDiagnosticLogger
Sentry.Extensions.Logging.MelDiagnosticLogger.IsEnabled(Sentry.Protocol.SentryLevel level) -> bool
Sentry.Extensions.Logging.MelDiagnosticLogger.Log(Sentry.Protocol.SentryLevel logLevel, string message, System.Exception exception = null, params object[] args) -> void
Sentry.Extensions.Logging.MelDiagnosticLogger.MelDiagnosticLogger(Microsoft.Extensions.Logging.ILogger<Sentry.ISentryClient> logger, Sentry.Protocol.SentryLevel level) -> void
Sentry.Extensions.Logging.SentryLoggerProvider
Sentry.Extensions.Logging.SentryLoggerProvider.CreateLogger(string categoryName) -> Microsoft.Extensions.Logging.ILogger
Sentry.Extensions.Logging.SentryLoggerProvider.Dispose() -> void
Sentry.Extensions.Logging.SentryLoggerProvider.SentryLoggerProvider(Microsoft.Extensions.Options.IOptions<Sentry.Extensions.Logging.SentryLoggingOptions> options, Sentry.IHub hub) -> void
Sentry.Extensions.Logging.SentryLoggingOptions
Sentry.Extensions.Logging.SentryLoggingOptions.ConfigureScope(System.Action<Sentry.Scope> action) -> void
Sentry.Extensions.Logging.SentryLoggingOptions.Dsn.get -> string
Sentry.Extensions.Logging.SentryLoggingOptions.Dsn.set -> void
Sentry.Extensions.Logging.SentryLoggingOptions.InitializeSdk.get -> bool
Sentry.Extensions.Logging.SentryLoggingOptions.InitializeSdk.set -> void
Sentry.Extensions.Logging.SentryLoggingOptions.MinimumBreadcrumbLevel.get -> Microsoft.Extensions.Logging.LogLevel
Sentry.Extensions.Logging.SentryLoggingOptions.MinimumBreadcrumbLevel.set -> void
Sentry.Extensions.Logging.SentryLoggingOptions.MinimumEventLevel.get -> Microsoft.Extensions.Logging.LogLevel
Sentry.Extensions.Logging.SentryLoggingOptions.MinimumEventLevel.set -> void
Sentry.Extensions.Logging.SentryLoggingOptions.SentryLoggingOptions() -> void
Sentry.Extensions.Logging.SentryLoggingOptionsExtensions
static Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddSentry(this Microsoft.Extensions.Logging.ILoggingBuilder builder) -> Microsoft.Extensions.Logging.ILoggingBuilder
static Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddSentry(this Microsoft.Extensions.Logging.ILoggingBuilder builder, System.Action<Sentry.Extensions.Logging.SentryLoggingOptions> optionsConfiguration) -> Microsoft.Extensions.Logging.ILoggingBuilder
static Microsoft.Extensions.Logging.LoggingBuilderExtensions.AddSentry(this Microsoft.Extensions.Logging.ILoggingBuilder builder, string dsn) -> Microsoft.Extensions.Logging.ILoggingBuilder
static Microsoft.Extensions.Logging.SentryLoggerFactoryExtensions.AddSentry(this Microsoft.Extensions.Logging.ILoggerFactory factory, System.Action<Sentry.Extensions.Logging.SentryLoggingOptions> optionsConfiguration = null) -> Microsoft.Extensions.Logging.ILoggerFactory
static Sentry.Extensions.Logging.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSentry<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Sentry.Extensions.Logging.SentryLoggingOptionsExtensions.AddLogEntryFilter(this Sentry.Extensions.Logging.SentryLoggingOptions options, Sentry.Extensions.Logging.ILogEntryFilter filter) -> void
static Sentry.Extensions.Logging.SentryLoggingOptionsExtensions.AddLogEntryFilter(this Sentry.Extensions.Logging.SentryLoggingOptions options, System.Func<string, Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, System.Exception, bool> filter) -> void
static Sentry.Extensions.Logging.SentryLoggingOptionsExtensions.ApplyDefaultTags(this Sentry.Extensions.Logging.SentryLoggingOptions options, Sentry.SentryEvent event) -> void
Sentry.Extensions.Logging.SentryLoggingOptions.DefaultTags.get -> System.Collections.Generic.Dictionary<string, string>
