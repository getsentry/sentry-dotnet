using System;
using System.Linq;
using Microsoft.CodeAnalysis;

namespace Sentry.SourceGenerators;

/// <summary>
/// Generates the necessary msbuild variables
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed class BuildPropertySourceGenerator : ISourceGenerator
{
    /// <summary>
    /// Initialize the source gen
    /// </summary>
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    /// <summary>
    /// Execute the source gen
    /// </summary>
    public void Execute(GeneratorExecutionContext context)
    {
        const string tabString = "    ";

        var opts = context.AnalyzerConfigOptions.GlobalOptions;
        var properties = opts.Keys.Where(x => x.StartsWith("build_property.")).ToList();
        if (properties.Count == 0)
        {
            return;
        }

        if (opts.TryGetValue("build_property.SentryDisableSourceGenerator", out var disable) &&
            disable.Equals("true", StringComparison.InvariantCultureIgnoreCase))
        {
            return;
        }

        // we only want to generate code where host setup takes place
        if (!context.Compilation.Options.OutputKind.IsExe())
        {
            return;
        }

        var sb = new StringBuilder();
        sb
            .Append(
$$"""
// <auto-generated>
// This code was generated by Sentry.SourceGenerators.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#if NET5_0_OR_GREATER

#nullable enable

namespace Sentry.Generated
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{GeneratedCodeText.Tool}}", "{{GeneratedCodeText.Version}}")]
    public static class BuildPropertyInitializer
    {
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Initialize()
        {
            global::Sentry.CompilerServices.BuildProperties.Initialize(new global::System.Collections.Generic.Dictionary<string, string>(global::System.StringComparer.OrdinalIgnoreCase)
            {

"""
            );

        foreach (var property in properties)
        {
            if (opts.TryGetValue(property, out var value))
            {
                var pn = EscapeString(property.Replace("build_property.", ""));
                var ev = EscapeString(value);
                sb
                    .Append($"{tabString}{tabString}{tabString}{tabString}{{")
                    .Append($"\"{pn}\", \"{ev}\"")
                    .AppendLine("},");
            }
        }

        sb
            .AppendLine($"{tabString}{tabString}{tabString}}});") // close dictionary
            .AppendLine($"{tabString}{tabString}}}")
            .AppendLine($"{tabString}}}")
            .AppendLine("}")
            .AppendLine("#endif");

        context.AddSource("Sentry.Generated.BuildPropertyInitializer.g.cs", sb.ToString());
    }

    private static string EscapeString(string value) => value.Replace("\\", "\\\\");
}
