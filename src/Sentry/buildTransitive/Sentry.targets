<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <SentryAttributesFile>Sentry.Attributes$(MSBuildProjectExtension.Replace('proj', ''))</SentryAttributesFile>
  </PropertyGroup>

  <Target Name="WriteSentryAttributes"
          Condition="$(Language) == 'VB' or $(Language) == 'C#' or $(Language) == 'F#'"
          BeforeTargets="BeforeCompile;CoreCompile"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(IntermediateOutputPath)$(SentryAttributesFile)">
    <PropertyGroup>
      <SentryAttributesFilePath>$(IntermediateOutputPath)$(SentryAttributesFile)</SentryAttributesFilePath>
    </PropertyGroup>
    <ItemGroup>
      <SentryAttributes Include="System.Reflection.AssemblyMetadata">
        <_Parameter1>Sentry.ProjectDirectory</_Parameter1>
        <_Parameter2>$(ProjectDir)</_Parameter2>
      </SentryAttributes>
      <!-- Ensure not part of Compile, as a workaround for https://github.com/dotnet/sdk/issues/114 -->
      <Compile Remove="$(SentryAttributesFilePath)" />
    </ItemGroup>
    <WriteCodeFragment AssemblyAttributes="@(SentryAttributes)" Language="$(Language)" OutputFile="$(SentryAttributesFilePath)">
      <Output Condition="$(Language) != 'F#'" TaskParameter="OutputFile" ItemName="Compile" />
      <Output Condition="$(Language) == 'F#'" TaskParameter="OutputFile" ItemName="CompileBefore" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>

  <Target Name="CheckSentryCLI" AfterTargets="Build" Condition="'$(InnerTargets)' == ''">
    <PropertyGroup>
      <!-- This property controls whether symbols are to be sent to Sentry. -->
      <SentryUploadSymbols Condition="'$(SentryUploadSymbols)' == '' And '$(Configuration)' == 'Release'">true</SentryUploadSymbols>

      <!-- This property controls if the Sentry CLI is to be used at all.  Setting false will disable all Sentry CLI usage. -->
      <UseSentryCLI Condition="'$(UseSentryCLI)' == '' And ('$(SentryUploadSymbols)' == 'true')">true</UseSentryCLI>
    </PropertyGroup>
  </Target>

  <Target Name="PrepareSentryCLI" AfterTargets="CheckSentryCLI" Condition="'$(UseSentryCLI)' == 'true'">
    <PropertyGroup>
      <!--
        The Sentry configuration can be set manually in MSBuild properties if desired.
        Otherwise the default configuration will be used, as reported by "sentry-cli info".
        The defaults can be set either via config file, or environment variables, per: https://docs.sentry.io/product/cli/configuration/
      -->
      <SentryCLIOptions Condition="'$(SentryApiKey)' != ''">$(SentryCLIOptions) --api-key $(SentryApiKey)</SentryCLIOptions>
      <SentryCLIOptions Condition="'$(SentryAuthToken)' != ''">$(SentryCLIOptions) --auth-token $(SentryAuthToken)</SentryCLIOptions>
      <SentryCLIOptions Condition="'$(SentryUrl)' != ''">$(SentryCLIOptions) --url $(SentryUrl)</SentryCLIOptions>
      <SentryCLIOptions Condition="'$(SentryOrg)' != ''">$(SentryCLIOptions) --org $(SentryOrg)</SentryCLIOptions>
      <SentryCLIOptions Condition="'$(SentryProject)' != ''">$(SentryCLIOptions) --project $(SentryProject)</SentryCLIOptions>

      <!-- Sentry CLI comes from the Sentry Nuget package when installed. -->
      <SentryCLIDirectory Condition="'$(SentryCLIDirectory)' == '' And '$(PkgSentry)' != ''">$(PkgSentry)\tools\</SentryCLIDirectory>
    </PropertyGroup>

    <!--
      Choose the correct Sentry CLI executable depending on OS platform and architecture.
      For Windows on Arm64, we'll use the X64 build for now (which should run via emulation).
      Switch to a Windows Arm64 build when available. See https://github.com/getsentry/sentry-cli/issues/1426
    -->
    <PropertyGroup Condition="'$(SentryCLI)' == '' And '$(SentryCLIDirectory)' != ''">
      <_OSArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</_OSArchitecture>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('OSX')) And $(_OSArchitecture) == 'Arm64'">$(SentryCLIDirectory)sentry-cli-Darwin-arm64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('OSX')) And $(_OSArchitecture) == 'X64'">$(SentryCLIDirectory)sentry-cli-Darwin-x86_64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'Arm64'">$(SentryCLIDirectory)sentry-cli-Linux-aarch64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'X86'">$(SentryCLIDirectory)sentry-cli-Linux-i686</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'X64'">$(SentryCLIDirectory)sentry-cli-Linux-x86_64</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'Arm64'">$(SentryCLIDirectory)sentry-cli-Windows-x86_64.exe</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'X86'">$(SentryCLIDirectory)sentry-cli-Windows-i686.exe</SentryCLI>
      <SentryCLI Condition="$([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'X64'">$(SentryCLIDirectory)sentry-cli-Windows-x86_64.exe</SentryCLI>
      <SentryCLI Condition="!Exists('$(SentryCLI)')"/>
    </PropertyGroup>

    <PropertyGroup Condition="'$(SentryCLI)' != ''">
      <_SentryCLICommand>&quot;$(SentryCLI)&quot; info</_SentryCLICommand>
      <_SentryCLICommand Condition="'$(SentryOrg)' != '' And '$(SentryProject)' != ''">$(_SentryCLICommand) --no-defaults</_SentryCLICommand>
    </PropertyGroup>
    <Exec Condition="'$(SentryCLI)' != ''" Command="$(_SentryCLICommand)" IgnoreExitCode="true" ConsoleToMsBuild="true" StandardOutputImportance="Low">
      <Output TaskParameter="ExitCode" PropertyName="_SentryCLIExitCode" />
      <Output TaskParameter="ConsoleOutput" PropertyName="_SentryCLIOutput" />
    </Exec>

    <PropertyGroup Condition="'$(_SentryCLIExitCode)' != '0'">
      <_SentryCLIRequestFailed Condition="$(_SentryCLIOutput.Contains('API request failed'))">true</_SentryCLIRequestFailed>
    </PropertyGroup>
    <Warning Condition="'$(_SentryCLIRequestFailed)' != ''"
      Text="Sentry API request failed.  Either the authentication info is invalid, or the Sentry server could not be reached." />

    <Message Importance="High" Condition="'$(_SentryCLIExitCode)' != '0' And '$(_SentryCLIRequestFailed)' == ''"
      Text="The Sentry CLI is not fully configured with authentication, organization, and project." />
    <PropertyGroup Condition="'$(_SentryCLIExitCode)' != '0'">
      <SentryCLI />
    </PropertyGroup>
  </Target>

  <!-- Upload debug information files to Sentry after the build. -->
  <Target Name="UploadSymbolsToSentry" AfterTargets="Build;Publish" DependsOnTargets="PrepareSentryCLI" Condition="'$(SentryUploadSymbols)' == 'true' And '$(SentryCLI)' != ''">

    <Warning Condition="'$(SentryUploadSources)' == 'true' And '$(EmbedAllSources)' == 'true'"
      Text="Both SentryUploadSources and EmbedAllSources are enabled.  Disabling SentryUploadSources." />
    <PropertyGroup Condition="'$(SentryUploadSources)' == 'true' And '$(EmbedAllSources)' == 'true'">
      <SentryUploadSources>false</SentryUploadSources>
    </PropertyGroup>

    <Message Importance="High" Condition="'$(SentryUploadSources)' != 'true'"
      Text="Preparing to upload debug symbols to Sentry for $(MSBuildProjectName) ($(Configuration)/$(TargetFramework))" />
    <Message Importance="High" Condition="'$(SentryUploadSources)' == 'true'"
      Text="Preparing to upload debug symbols and sources to Sentry for $(MSBuildProjectName) ($(Configuration)/$(TargetFramework))" />

    <PropertyGroup>
      <_SentryCLICommand>&quot;$(SentryCLI)&quot; upload-dif</_SentryCLICommand>
      <_SentryCLICommand Condition="'$(SentryCLIOptions.Trim())' != ''">$(_SentryCLICommand) $(SentryCLIOptions.Trim())</_SentryCLICommand>
      <_SentryCLICommand Condition="'$(SentryUploadSources)' == 'true'">$(_SentryCLICommand) --include-sources</_SentryCLICommand>
      <_SentryCLICommand>$(_SentryCLICommand) $(IntermediateOutputPath)</_SentryCLICommand>
    </PropertyGroup>
    <Exec Command="$(_SentryCLICommand)" IgnoreExitCode="true" ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="_SentryCLIExitCode" />
    </Exec>

    <Warning Condition="'$(_SentryCLIExitCode)' != '0' And '$(SentryUploadSources)' != 'true'"
      Text="Sentry CLI could not upload debug files." />
    <Warning Condition="'$(_SentryCLIExitCode)' != '0' And '$(SentryUploadSources)' == 'true'"
      Text="Sentry CLI could not upload debug files with sources.  Will retry without sources." />

    <MSBuild Condition="'$(_SentryCLIExitCode)' != '0' And '$(SentryUploadSources)' == 'true'"
      Projects="$(MSBuildProjectFile)" Targets="UploadSymbolsToSentry"
      Properties="SentryUploadSymbols=true;SentryUploadSources=false;SentryCLI=$(SentryCLI);SentryCLIOptions=$(SentryCLIOptions)" />

  </Target>

</Project>
