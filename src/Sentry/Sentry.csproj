<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Description>Official SDK for Sentry - Open-source error tracking that helps developers monitor and fix crashes in real time.</Description>
    <NoWarn Condition="'$(TargetFramework)' == 'netstandard2.0'">$(NoWarn);RS0017</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SolutionName)' != 'Sentry.Unity'">
    <TargetFrameworks>net6.0;net5.0;netcoreapp3.0;netstandard2.1;netstandard2.0;net461</TargetFrameworks>
    <TargetFrameworks Condition="'$(NO_ANDROID)' == ''">$(TargetFrameworks);net6.0-android</TargetFrameworks>
    <TargetFrameworks Condition="'$(NO_IOS)' == '' And $([MSBuild]::IsOSPlatform('OSX'))">$(TargetFrameworks);net6.0-ios</TargetFrameworks>
    <TargetFrameworks Condition="'$(NO_MACCATALYST)' == '' And $([MSBuild]::IsOSPlatform('OSX'))">$(TargetFrameworks);net6.0-maccatalyst</TargetFrameworks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(SolutionName)' == 'Sentry.Unity'">
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <!-- Platform-specific props included here -->
  <Import Project="Platforms\Android\Sentry.Android.props" Condition="'$(TargetPlatformIdentifier)' == 'android'" />
  <Import Project="Platforms\iOS\Sentry.iOS.props" Condition="'$(TargetPlatformIdentifier)' == 'ios' Or '$(TargetPlatformIdentifier)' == 'maccatalyst'" />

  <!--
    Ben.Demystifier is compiled directly into Sentry.
    Note: It uses Microsoft.Bcl.AsyncInterfaces, which we get transitively from System.Text.Json.
  -->
  <ItemGroup>
    <Compile Include="..\..\modules\Ben.Demystifier\src\**\*.cs">
      <Link>%(RecursiveDir)\%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>
  <ItemGroup Condition="$(TargetFramework.StartsWith('netstandard')) or $(TargetFramework.StartsWith('net4'))">
    <PackageReference Include="System.Reflection.Metadata" Version="5.0.0" />
  </ItemGroup>

  <!-- Sentry.DiagnosticSource is compiled directly into Sentry for .NET Core and .NET targets only. -->
  <PropertyGroup Condition="!$(TargetFramework.StartsWith('netstandard')) and !$(TargetFramework.StartsWith('net4'))">
    <DefineConstants>$(DefineConstants);HAS_DIAGNOSTIC_INTEGRATION</DefineConstants>
  </PropertyGroup>
  <ItemGroup Condition="!$(TargetFramework.StartsWith('netstandard')) and !$(TargetFramework.StartsWith('net4'))">
    <Compile Include="..\Sentry.DiagnosticSource\Internal\**\*.cs">
      <Link>Internal\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>

  <!--
    We use Simon Cropp's Polyfill source-only package to access APIs in lower targets.
    https://github.com/SimonCropp/Polyfill
  -->
  <ItemGroup>
    <PackageReference Include="Polyfill" Version="1.9.1" PrivateAssets="all" />
  </ItemGroup>

  <!--
    On .NET Framework, we need a package reference to System.Runtime.InteropServices.RuntimeInformation.
    This is used in Sentry.PlatformAbstractions.RuntimeInfo.  It's already built-in for all other targets.
  -->
  <ItemGroup Condition="$(TargetFramework.StartsWith('net4'))">
    <PackageReference Include="System.Runtime.InteropServices.RuntimeInformation" Version="4.3.0" />
  </ItemGroup>

  <!-- On .NET Framework, we need an assembly reference to System.Net.Http. -->
  <ItemGroup Condition="$(TargetFramework.StartsWith('net4'))">
    <Reference Include="System.Net.Http" />
  </ItemGroup>

  <!-- System.Text.Json is already included with .NET 5 and higher. Add a direct reference for other targets. -->
  <ItemGroup Condition="!$(TargetFramework.StartsWith('net5')) and !$(TargetFramework.StartsWith('net6'))">
    <PackageReference Include="System.Text.Json" Version="5.0.2" />
  </ItemGroup>

  <!--
    Include Sentry's custom targets file in the nuget package.
    This file contains targets that are invoked during the end-user's build.
    The same file is included twice, so it ends up being used for both direct and transitive package references to Sentry.
  -->
  <ItemGroup>
    <None Include="buildTransitive\Sentry.targets" Pack="true" PackagePath="buildTransitive\Sentry.targets" />
    <None Include="buildTransitive\Sentry.targets" Pack="true" PackagePath="build\Sentry.targets" />
  </ItemGroup>

  <!-- Download the Sentry CLI during the restore phase. -->
  <Target Name="DownloadSentryCLI" BeforeTargets="CollectPackageReferences" Condition="'$(SentryCLIDirectory)' != ''">

    <!--
      Hashes are from https://release-registry.services.sentry.io/apps/sentry-cli/latest
      Update with each new version.
    -->
    <PropertyGroup>
      <_OSArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</_OSArchitecture>
    </PropertyGroup>
    <ItemGroup>
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('OSX')) And $(_OSArchitecture) == 'Arm64')"
        Include="sentry-cli-Darwin-arm64" FileHash="b45c3d1fdb403fdfdbce0c0a009a529a803290ea058941ae7a09d8856aeffd06" />
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('OSX')) And $(_OSArchitecture) == 'X64')"
        Include="sentry-cli-Darwin-x86_64" FileHash="40469a50a74cebfd04c449336809e998c4df941d8aa683971ce1d1f581276502" />
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'Arm64')"
        Include="sentry-cli-Linux-aarch64" FileHash="9cc2d84b09b3e0e0d062b8893f1d5dec1eee512f465cc2d0dbcf51ca6620d1a0" />
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'X86')"
        Include="sentry-cli-Linux-i686" FileHash="f9ec33357136423f5aac598c8c42fc0f6795a29a332dfc34099c6ba8b1307a0b" />
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('Linux')) And $(_OSArchitecture) == 'X64')"
        Include="sentry-cli-Linux-x86_64" FileHash="18bfbae6c184d976d30f54375815fabe6cfb4e6b7786298bc56f4f1c76a96c2c" />
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) == 'X86')"
        Include="sentry-cli-Windows-i686.exe" FileHash="91da10de2fbdde03aae6f11af3544108d946366afbaaebec982d26fa27ae315a" />
      <SentryCLIDownload
        Condition="'$(CI_PUBLISHING_BUILD)' == 'true' Or ($([MSBuild]::IsOSPlatform('Windows')) And $(_OSArchitecture) != 'X86')"
        Include="sentry-cli-Windows-x86_64.exe" FileHash="1042ec8ec50bca8bc68a3b8b6e58cda6cadf63c23f4245af62971a8e3af2eccd" />
    </ItemGroup>

    <!-- Download the files -->
    <DownloadFile
      SourceUrl="https://downloads.sentry-cdn.com/sentry-cli/$(SentryCLIVersion)/%(SentryCLIDownload.Identity)"
      DestinationFolder="$(SentryCLIDirectory)"
      Condition="!Exists('$(SentryCLIDirectory)%(Identity)')"
      Retries="3">
      <Output TaskParameter="DownloadedFile" ItemName="SentryCLIDownloadedFile" />
    </DownloadFile>

    <!-- Build will fail if any downloaded files don't match the expected hash. -->
    <VerifyFileHash File="$(SentryCLIDirectory)%(SentryCLIDownload.Identity)" Hash="%(FileHash)" />

    <!-- Set executable permissions for local usage. -->
    <Exec Command="chmod +x $(SentryCLIDirectory)*" Condition="!$([MSBuild]::IsOSPlatform('Windows'))" />
  </Target>

  <!-- Bundle the Sentry CLI into the Sentry Nuget package. -->
  <ItemGroup Condition="'$(SentryCLIDirectory)' != ''">
    <None Include="$(SentryCLIDirectory)**" Pack="true" PackagePath="tools\" />
  </ItemGroup>

</Project>
