Sentry.DsnAttribute
Sentry.DsnAttribute.Dsn.get -> string
Sentry.DsnAttribute.DsnAttribute(string dsn) -> void
Sentry.Extensibility.BaseRequestPayloadExtractor
Sentry.Extensibility.BaseRequestPayloadExtractor.BaseRequestPayloadExtractor() -> void
Sentry.Extensibility.BaseRequestPayloadExtractor.ExtractPayload(Sentry.Extensibility.IHttpRequest request) -> object
Sentry.Extensibility.DefaultRequestPayloadExtractor
Sentry.Extensibility.DefaultRequestPayloadExtractor.DefaultRequestPayloadExtractor() -> void
Sentry.Extensibility.DisabledHub
Sentry.Extensibility.DisabledHub.BindClient(Sentry.ISentryClient client) -> void
Sentry.Extensibility.DisabledHub.CaptureEvent(Sentry.SentryEvent evt, Sentry.Scope scope = null) -> Sentry.Protocol.SentryId
Sentry.Extensibility.DisabledHub.ConfigureScope(System.Action<Sentry.Scope> configureScope) -> void
Sentry.Extensibility.DisabledHub.ConfigureScopeAsync(System.Func<Sentry.Scope, System.Threading.Tasks.Task> configureScope) -> System.Threading.Tasks.Task
Sentry.Extensibility.DisabledHub.Dispose() -> void
Sentry.Extensibility.DisabledHub.FlushAsync(System.TimeSpan timeout) -> System.Threading.Tasks.Task
Sentry.Extensibility.DisabledHub.IsEnabled.get -> bool
Sentry.Extensibility.DisabledHub.LastEventId.get -> Sentry.Protocol.SentryId
Sentry.Extensibility.DisabledHub.PushScope() -> System.IDisposable
Sentry.Extensibility.DisabledHub.PushScope<TState>(TState state) -> System.IDisposable
Sentry.Extensibility.DisabledHub.WithScope(System.Action<Sentry.Scope> scopeCallback) -> void
Sentry.Extensibility.FormRequestPayloadExtractor
Sentry.Extensibility.FormRequestPayloadExtractor.FormRequestPayloadExtractor() -> void
Sentry.Extensibility.HubAdapter
Sentry.Extensibility.HubAdapter.AddBreadcrumb(Sentry.Infrastructure.ISystemClock clock, string message, string category = null, string type = null, System.Collections.Generic.IDictionary<string, string> data = null, Sentry.Protocol.BreadcrumbLevel level = Sentry.Protocol.BreadcrumbLevel.Info) -> void
Sentry.Extensibility.HubAdapter.AddBreadcrumb(string message, string category = null, string type = null, System.Collections.Generic.IDictionary<string, string> data = null, Sentry.Protocol.BreadcrumbLevel level = Sentry.Protocol.BreadcrumbLevel.Info) -> void
Sentry.Extensibility.HubAdapter.BindClient(Sentry.ISentryClient client) -> void
Sentry.Extensibility.HubAdapter.CaptureEvent(Sentry.SentryEvent evt) -> Sentry.Protocol.SentryId
Sentry.Extensibility.HubAdapter.CaptureEvent(Sentry.SentryEvent evt, Sentry.Scope scope) -> Sentry.Protocol.SentryId
Sentry.Extensibility.HubAdapter.CaptureException(System.Exception exception) -> Sentry.Protocol.SentryId
Sentry.Extensibility.HubAdapter.ConfigureScope(System.Action<Sentry.Scope> configureScope) -> void
Sentry.Extensibility.HubAdapter.ConfigureScopeAsync(System.Func<Sentry.Scope, System.Threading.Tasks.Task> configureScope) -> System.Threading.Tasks.Task
Sentry.Extensibility.HubAdapter.FlushAsync(System.TimeSpan timeout) -> System.Threading.Tasks.Task
Sentry.Extensibility.HubAdapter.IsEnabled.get -> bool
Sentry.Extensibility.HubAdapter.LastEventId.get -> Sentry.Protocol.SentryId
Sentry.Extensibility.HubAdapter.PushScope() -> System.IDisposable
Sentry.Extensibility.HubAdapter.PushScope<TState>(TState state) -> System.IDisposable
Sentry.Extensibility.HubAdapter.WithScope(System.Action<Sentry.Scope> scopeCallback) -> void
Sentry.Extensibility.IBackgroundWorker
Sentry.Extensibility.IBackgroundWorker.EnqueueEvent(Sentry.SentryEvent event) -> bool
Sentry.Extensibility.IBackgroundWorker.FlushAsync(System.TimeSpan timeout) -> System.Threading.Tasks.Task
Sentry.Extensibility.IBackgroundWorker.QueuedItems.get -> int
Sentry.Extensibility.IDiagnosticLogger
Sentry.Extensibility.IDiagnosticLogger.IsEnabled(Sentry.Protocol.SentryLevel level) -> bool
Sentry.Extensibility.IDiagnosticLogger.Log(Sentry.Protocol.SentryLevel logLevel, string message, System.Exception exception = null, params object[] args) -> void
Sentry.Extensibility.IHttpRequest
Sentry.Extensibility.IHttpRequest.Body.get -> System.IO.Stream
Sentry.Extensibility.IHttpRequest.ContentLength.get -> long?
Sentry.Extensibility.IHttpRequest.ContentType.get -> string
Sentry.Extensibility.IHttpRequest.Form.get -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>
Sentry.Extensibility.IRequestPayloadExtractor
Sentry.Extensibility.IRequestPayloadExtractor.ExtractPayload(Sentry.Extensibility.IHttpRequest request) -> object
Sentry.Extensibility.ISentryEventExceptionProcessor
Sentry.Extensibility.ISentryEventExceptionProcessor.Process(System.Exception exception, Sentry.SentryEvent sentryEvent) -> void
Sentry.Extensibility.ISentryEventProcessor
Sentry.Extensibility.ISentryEventProcessor.Process(Sentry.SentryEvent event) -> Sentry.SentryEvent
Sentry.Extensibility.ISentryStackTraceFactory
Sentry.Extensibility.ISentryStackTraceFactory.Create(System.Exception exception = null) -> Sentry.Protocol.SentryStackTrace
Sentry.Extensibility.ITransport
Sentry.Extensibility.ITransport.CaptureEventAsync(Sentry.SentryEvent event, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Sentry.Extensibility.RequestBodyExtractionDispatcher
Sentry.Extensibility.RequestBodyExtractionDispatcher.ExtractPayload(Sentry.Extensibility.IHttpRequest request) -> object
Sentry.Extensibility.RequestBodyExtractionDispatcher.RequestBodyExtractionDispatcher(System.Collections.Generic.IEnumerable<Sentry.Extensibility.IRequestPayloadExtractor> extractors, Sentry.SentryOptions options, System.Func<Sentry.Extensibility.RequestSize> sizeSwitch) -> void
Sentry.Extensibility.RequestSize
Sentry.Extensibility.RequestSize.Always = 3 -> Sentry.Extensibility.RequestSize
Sentry.Extensibility.RequestSize.Medium = 2 -> Sentry.Extensibility.RequestSize
Sentry.Extensibility.RequestSize.None = 0 -> Sentry.Extensibility.RequestSize
Sentry.Extensibility.RequestSize.Small = 1 -> Sentry.Extensibility.RequestSize
Sentry.Extensibility.SentryEventExceptionProcessor<TException>
Sentry.Extensibility.SentryEventExceptionProcessor<TException>.Process(System.Exception exception, Sentry.SentryEvent sentryEvent) -> void
Sentry.Extensibility.SentryEventExceptionProcessor<TException>.SentryEventExceptionProcessor() -> void
Sentry.Extensibility.SentryStackTraceFactory
Sentry.Extensibility.SentryStackTraceFactory.Create(System.Exception exception = null) -> Sentry.Protocol.SentryStackTrace
Sentry.Extensibility.SentryStackTraceFactory.InternalCreateFrame(System.Diagnostics.StackFrame stackFrame, bool demangle) -> Sentry.Protocol.SentryStackFrame
Sentry.Extensibility.SentryStackTraceFactory.SentryStackTraceFactory(Sentry.SentryOptions options) -> void
Sentry.Http.ISentryHttpClientFactory
Sentry.Http.ISentryHttpClientFactory.Create(Sentry.Dsn dsn, Sentry.SentryOptions options) -> System.Net.Http.HttpClient
Sentry.HubExtensions
Sentry.IHub
Sentry.IHub.LastEventId.get -> Sentry.Protocol.SentryId
Sentry.ISentryClient
Sentry.ISentryClient.CaptureEvent(Sentry.SentryEvent evt, Sentry.Scope scope = null) -> Sentry.Protocol.SentryId
Sentry.ISentryClient.FlushAsync(System.TimeSpan timeout) -> System.Threading.Tasks.Task
Sentry.ISentryClient.IsEnabled.get -> bool
Sentry.ISentryScopeManager
Sentry.ISentryScopeManager.BindClient(Sentry.ISentryClient client) -> void
Sentry.ISentryScopeManager.ConfigureScope(System.Action<Sentry.Scope> configureScope) -> void
Sentry.ISentryScopeManager.ConfigureScopeAsync(System.Func<Sentry.Scope, System.Threading.Tasks.Task> configureScope) -> System.Threading.Tasks.Task
Sentry.ISentryScopeManager.PushScope() -> System.IDisposable
Sentry.ISentryScopeManager.PushScope<TState>(TState state) -> System.IDisposable
Sentry.ISentryScopeManager.WithScope(System.Action<Sentry.Scope> scopeCallback) -> void
Sentry.Infrastructure.ConsoleDiagnosticLogger
Sentry.Infrastructure.ConsoleDiagnosticLogger.ConsoleDiagnosticLogger(Sentry.Protocol.SentryLevel minimalLevel) -> void
Sentry.Infrastructure.ConsoleDiagnosticLogger.IsEnabled(Sentry.Protocol.SentryLevel level) -> bool
Sentry.Infrastructure.ConsoleDiagnosticLogger.Log(Sentry.Protocol.SentryLevel logLevel, string message, System.Exception exception = null, params object[] args) -> void
Sentry.Infrastructure.DebugDiagnosticLogger
Sentry.Infrastructure.DebugDiagnosticLogger.DebugDiagnosticLogger(Sentry.Protocol.SentryLevel minimalLevel) -> void
Sentry.Infrastructure.DebugDiagnosticLogger.IsEnabled(Sentry.Protocol.SentryLevel level) -> bool
Sentry.Infrastructure.DebugDiagnosticLogger.Log(Sentry.Protocol.SentryLevel logLevel, string message, System.Exception exception = null, params object[] args) -> void
Sentry.Infrastructure.ISystemClock
Sentry.Infrastructure.ISystemClock.GetUtcNow() -> System.DateTimeOffset
Sentry.Infrastructure.SystemClock
Sentry.Infrastructure.SystemClock.GetUtcNow() -> System.DateTimeOffset
Sentry.Infrastructure.SystemClock.SystemClock() -> void
Sentry.Integrations.ISdkIntegration
Sentry.Integrations.ISdkIntegration.Register(Sentry.IHub hub, Sentry.SentryOptions options) -> void
Sentry.Reflection.AssemblyExtensions
Sentry.Scope
Sentry.Scope.Clone() -> Sentry.Scope
Sentry.Scope.Scope(Sentry.SentryOptions options) -> void
Sentry.ScopeExtensions
Sentry.SentryClient
Sentry.SentryClient.CaptureEvent(Sentry.SentryEvent event, Sentry.Scope scope = null) -> Sentry.Protocol.SentryId
Sentry.SentryClient.Dispose() -> void
Sentry.SentryClient.FlushAsync(System.TimeSpan timeout) -> System.Threading.Tasks.Task
Sentry.SentryClient.IsEnabled.get -> bool
Sentry.SentryClient.SentryClient(Sentry.SentryOptions options) -> void
Sentry.SentryClientExtensions
Sentry.SentryOptions
Sentry.SentryOptions.AttachStacktrace.get -> bool
Sentry.SentryOptions.AttachStacktrace.set -> void
Sentry.SentryOptions.BeforeBreadcrumb.get -> System.Func<Sentry.Protocol.Breadcrumb, Sentry.Protocol.Breadcrumb>
Sentry.SentryOptions.BeforeBreadcrumb.set -> void
Sentry.SentryOptions.BeforeSend.get -> System.Func<Sentry.SentryEvent, Sentry.SentryEvent>
Sentry.SentryOptions.BeforeSend.set -> void
Sentry.SentryOptions.CreateHttpClientHandler.get -> System.Func<Sentry.Dsn, System.Net.Http.HttpClientHandler>
Sentry.SentryOptions.CreateHttpClientHandler.set -> void
Sentry.SentryOptions.ConfigureClient.get -> System.Action<System.Net.Http.HttpClient, Sentry.Dsn>
Sentry.SentryOptions.ConfigureClient.set -> void
Sentry.SentryOptions.ConfigureHandler.get -> System.Action<System.Net.Http.HttpClientHandler, Sentry.Dsn>
Sentry.SentryOptions.ConfigureHandler.set -> void
Sentry.SentryOptions.Debug.get -> bool
Sentry.SentryOptions.Debug.set -> void
Sentry.SentryOptions.DecompressionMethods.get -> System.Net.DecompressionMethods
Sentry.SentryOptions.DecompressionMethods.set -> void
Sentry.SentryOptions.DiagnosticLogger.get -> Sentry.Extensibility.IDiagnosticLogger
Sentry.SentryOptions.DiagnosticLogger.set -> void
Sentry.SentryOptions.DiagnosticLevel.get -> Sentry.Protocol.SentryLevel
Sentry.SentryOptions.DiagnosticLevel.set -> void
Sentry.SentryOptions.Dsn.get -> Sentry.Dsn
Sentry.SentryOptions.Dsn.set -> void
Sentry.SentryOptions.Environment.get -> string
Sentry.SentryOptions.Environment.set -> void
Sentry.SentryOptions.HttpProxy.get -> System.Net.IWebProxy
Sentry.SentryOptions.HttpProxy.set -> void
Sentry.SentryOptions.IsEnvironmentUser.get -> bool
Sentry.SentryOptions.IsEnvironmentUser.set -> void
Sentry.SentryOptions.MaxBreadcrumbs.get -> int
Sentry.SentryOptions.MaxBreadcrumbs.set -> void
Sentry.SentryOptions.MaxRequestBodySize.get -> Sentry.Extensibility.RequestSize
Sentry.SentryOptions.MaxRequestBodySize.set -> void
Sentry.SentryOptions.MaxQueueItems.get -> int
Sentry.SentryOptions.MaxQueueItems.set -> void
Sentry.SentryOptions.Release.get -> string
Sentry.SentryOptions.Release.set -> void
Sentry.SentryOptions.ReportAssemblies.get -> bool
Sentry.SentryOptions.ReportAssemblies.set -> void
Sentry.SentryOptions.RequestBodyCompressionBuffered.get -> bool
Sentry.SentryOptions.RequestBodyCompressionBuffered.set -> void
Sentry.SentryOptions.RequestBodyCompressionLevel.get -> System.IO.Compression.CompressionLevel
Sentry.SentryOptions.RequestBodyCompressionLevel.set -> void
Sentry.SentryOptions.SampleRate.get -> float?
Sentry.SentryOptions.SampleRate.set -> void
Sentry.SentryOptions.SendDefaultPii.get -> bool
Sentry.SentryOptions.SendDefaultPii.set -> void
Sentry.SentryOptions.SentryOptions() -> void
Sentry.SentryOptions.ServerName.get -> string
Sentry.SentryOptions.ServerName.set -> void
Sentry.SentryOptions.ShutdownTimeout.get -> System.TimeSpan
Sentry.SentryOptions.ShutdownTimeout.set -> void
Sentry.SentryOptionsExtensions
Sentry.SentrySdk
abstract Sentry.Extensibility.BaseRequestPayloadExtractor.DoExtractPayLoad(Sentry.Extensibility.IHttpRequest request) -> object
abstract Sentry.Extensibility.BaseRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest request) -> bool
abstract Sentry.Extensibility.SentryEventExceptionProcessor<TException>.ProcessException(TException exception, Sentry.SentryEvent sentryEvent) -> void
override Sentry.Extensibility.DefaultRequestPayloadExtractor.DoExtractPayLoad(Sentry.Extensibility.IHttpRequest request) -> object
override Sentry.Extensibility.DefaultRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest request) -> bool
override Sentry.Extensibility.FormRequestPayloadExtractor.DoExtractPayLoad(Sentry.Extensibility.IHttpRequest request) -> object
override Sentry.Extensibility.FormRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest request) -> bool
static Sentry.Extensibility.DisabledHub.Instance -> Sentry.Extensibility.DisabledHub
static Sentry.HubExtensions.AddBreadcrumb(this Sentry.IHub hub, Sentry.Infrastructure.ISystemClock clock, string message, string category = null, string type = null, System.Collections.Generic.IDictionary<string, string> data = null, Sentry.Protocol.BreadcrumbLevel level = Sentry.Protocol.BreadcrumbLevel.Info) -> void
static Sentry.HubExtensions.AddBreadcrumb(this Sentry.IHub hub, string message, string category = null, string type = null, System.Collections.Generic.IDictionary<string, string> data = null, Sentry.Protocol.BreadcrumbLevel level = Sentry.Protocol.BreadcrumbLevel.Info) -> void
static Sentry.HubExtensions.LockScope(this Sentry.IHub hub) -> void
static Sentry.HubExtensions.PushAndLockScope(this Sentry.IHub hub) -> System.IDisposable
static Sentry.HubExtensions.UnlockScope(this Sentry.IHub hub) -> void
static Sentry.ScopeExtensions.AddEventProcessor(this Sentry.Scope scope, Sentry.Extensibility.ISentryEventProcessor processor) -> void
static Sentry.ScopeExtensions.AddEventProcessor(this Sentry.Scope scope, System.Func<Sentry.SentryEvent, Sentry.SentryEvent> processor) -> void
static Sentry.ScopeExtensions.AddEventProcessors(this Sentry.Scope scope, System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventProcessor> processors) -> void
static Sentry.ScopeExtensions.AddExceptionProcessor(this Sentry.Scope scope, Sentry.Extensibility.ISentryEventExceptionProcessor processor) -> void
static Sentry.ScopeExtensions.AddExceptionProcessors(this Sentry.Scope scope, System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventExceptionProcessor> processors) -> void
static Sentry.ScopeExtensions.GetAllEventProcessors(this Sentry.Scope scope) -> System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventProcessor>
static Sentry.ScopeExtensions.GetAllExceptionProcessors(this Sentry.Scope scope) -> System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventExceptionProcessor>
static Sentry.SentryClientExtensions.CaptureException(this Sentry.ISentryClient client, System.Exception ex) -> Sentry.Protocol.SentryId
static Sentry.SentryClientExtensions.CaptureMessage(this Sentry.ISentryClient client, string message, Sentry.Protocol.SentryLevel level = Sentry.Protocol.SentryLevel.Info) -> Sentry.Protocol.SentryId
static Sentry.SentryOptionsExtensions.AddEventProcessor(this Sentry.SentryOptions options, Sentry.Extensibility.ISentryEventProcessor processor) -> void
static Sentry.SentryOptionsExtensions.AddEventProcessorProvider(this Sentry.SentryOptions options, System.Func<System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventProcessor>> processorProvider) -> void
static Sentry.SentryOptionsExtensions.AddEventProcessors(this Sentry.SentryOptions options, System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventProcessor> processors) -> void
static Sentry.SentryOptionsExtensions.AddExceptionProcessor(this Sentry.SentryOptions options, Sentry.Extensibility.ISentryEventExceptionProcessor processor) -> void
static Sentry.SentryOptionsExtensions.AddExceptionProcessorProvider(this Sentry.SentryOptions options, System.Func<System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventExceptionProcessor>> processorProvider) -> void
static Sentry.SentryOptionsExtensions.AddExceptionProcessors(this Sentry.SentryOptions options, System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventExceptionProcessor> processors) -> void
static Sentry.SentryOptionsExtensions.AddInAppExclude(this Sentry.SentryOptions options, string prefix) -> void
static Sentry.SentryOptionsExtensions.AddInAppInclude(this Sentry.SentryOptions options, string prefix) -> void
static Sentry.SentryOptionsExtensions.AddIntegration(this Sentry.SentryOptions options, Sentry.Integrations.ISdkIntegration integration) -> void
static Sentry.SentryOptionsExtensions.DisableAppDomainUnhandledExceptionCapture(this Sentry.SentryOptions options) -> void
static Sentry.SentryOptionsExtensions.DisableDuplicateEventDetection(this Sentry.SentryOptions options) -> void
static Sentry.SentryOptionsExtensions.GetAllEventProcessors(this Sentry.SentryOptions options) -> System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventProcessor>
static Sentry.SentryOptionsExtensions.GetAllExceptionProcessors(this Sentry.SentryOptions options) -> System.Collections.Generic.IEnumerable<Sentry.Extensibility.ISentryEventExceptionProcessor>
static Sentry.SentryOptionsExtensions.UseStackTraceFactory(this Sentry.SentryOptions options, Sentry.Extensibility.ISentryStackTraceFactory sentryStackTraceFactory) -> Sentry.SentryOptions
static Sentry.SentryOptionsExtensions.DisableAppDomainProcessExitFlush(this Sentry.SentryOptions options) -> void
static Sentry.SentrySdk.AddBreadcrumb(Sentry.Infrastructure.ISystemClock clock, string message, string category = null, string type = null, System.Collections.Generic.IDictionary<string, string> data = null, Sentry.Protocol.BreadcrumbLevel level = Sentry.Protocol.BreadcrumbLevel.Info) -> void
static Sentry.SentrySdk.AddBreadcrumb(string message, string category = null, string type = null, System.Collections.Generic.IDictionary<string, string> data = null, Sentry.Protocol.BreadcrumbLevel level = Sentry.Protocol.BreadcrumbLevel.Info) -> void
static Sentry.SentrySdk.BindClient(Sentry.ISentryClient client) -> void
static Sentry.SentrySdk.CaptureEvent(Sentry.SentryEvent evt) -> Sentry.Protocol.SentryId
static Sentry.SentrySdk.CaptureEvent(Sentry.SentryEvent evt, Sentry.Scope scope) -> Sentry.Protocol.SentryId
static Sentry.SentrySdk.CaptureException(System.Exception exception) -> Sentry.Protocol.SentryId
static Sentry.SentrySdk.CaptureMessage(string message, Sentry.Protocol.SentryLevel level = Sentry.Protocol.SentryLevel.Info) -> Sentry.Protocol.SentryId
static Sentry.SentrySdk.Close() -> void
static Sentry.SentrySdk.ConfigureScope(System.Action<Sentry.Scope> configureScope) -> void
static Sentry.SentrySdk.ConfigureScopeAsync(System.Func<Sentry.Scope, System.Threading.Tasks.Task> configureScope) -> System.Threading.Tasks.Task
static Sentry.SentrySdk.FlushAsync(System.TimeSpan timeout) -> System.Threading.Tasks.Task
static Sentry.SentrySdk.Init() -> System.IDisposable
static Sentry.SentrySdk.Init(Sentry.Dsn dsn) -> System.IDisposable
static Sentry.SentrySdk.Init(Sentry.SentryOptions options) -> System.IDisposable
static Sentry.SentrySdk.Init(System.Action<Sentry.SentryOptions> configureOptions) -> System.IDisposable
static Sentry.SentrySdk.Init(string dsn) -> System.IDisposable
static Sentry.SentrySdk.IsEnabled.get -> bool
static Sentry.SentrySdk.LastEventId.get -> Sentry.Protocol.SentryId
static Sentry.SentrySdk.PushScope() -> System.IDisposable
static Sentry.SentrySdk.PushScope<TState>(TState state) -> System.IDisposable
static Sentry.SentrySdk.WithScope(System.Action<Sentry.Scope> scopeCallback) -> void
static readonly Sentry.Extensibility.HubAdapter.Instance -> Sentry.Extensibility.HubAdapter
static readonly Sentry.Infrastructure.SystemClock.Clock -> Sentry.Infrastructure.SystemClock
static Sentry.Reflection.AssemblyExtensions.GetNameAndVersion(this System.Reflection.Assembly asm) -> Sentry.Protocol.SdkVersion
virtual Sentry.Extensibility.SentryStackTraceFactory.CreateFrame(System.Diagnostics.StackFrame stackFrame, bool isCurrentStackTrace) -> Sentry.Protocol.SentryStackFrame
virtual Sentry.Extensibility.SentryStackTraceFactory.CreateStackTrace(System.Exception exception) -> System.Diagnostics.StackTrace
virtual Sentry.Extensibility.SentryStackTraceFactory.GetMethod(System.Diagnostics.StackFrame stackFrame) -> System.Reflection.MethodBase
