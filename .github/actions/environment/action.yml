name: Setup Environment
description: Sets env vars and installs dependencies
runs:
  using: composite

  steps:

    - name: Set Global Environment Variables
      shell: bash
      run: |
        echo "DOTNET_CLI_TELEMETRY_OPTOUT=1" >> $GITHUB_ENV
        echo "DOTNET_NOLOGO=1" >> $GITHUB_ENV

    # Android SDK Tools are arm64-incompatible
    # Android SDK Build Tools are musl-incompatible
    - name: Set Environment Variables for Alpine Linux
      if: ${{ (runner.os == 'Linux' && runner.arch == 'ARM64') || contains(matrix.container.image, 'alpine') }}
      shell: bash
      run: echo "NO_MOBILE=true" >> $GITHUB_ENV

    # Allow sudoless Docker in integration tests
    - name: Prepare Docker on Alpine Linux
      if: ${{ contains(matrix.container.image, 'alpine') }}
      shell: bash
      run: sudo chmod 666 /var/run/docker.sock

    # Install old deprecated libssl1 for .NET 5.0 on Linux
    - name: Install libssl1 for NET 5.0 on Linux
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: sudo ./scripts/install-libssl1.sh

    - name: Install Linux ARM 32-bit dependencies
      if: ${{ matrix.rid == 'linux-arm' }}
      shell: bash
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf libc6:armhf

    # zstd is needed for cross OS actions/cache but missing from windows-11-arm
    # https://github.com/actions/partner-runner-images/issues/99
    - name: Install zstd on Windows ARM64
      uses: ./.github/actions/install-zstd

    # See https://github.com/actions/runner-images/blob/main/images/macos/macos-15-Readme.md#xcode
    - name: Pin the Xcode Version
      if: runner.os == 'macOS'
      shell: bash
      run: sudo xcode-select --switch /Applications/Xcode_26.0.app

    # Java 17 is needed for Android SDK setup step
    - name: Install Java 17
      if: ${{ !matrix.container }}
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
      with:
        distribution: ${{ runner.os == 'Windows' && runner.arch == 'ARM64' && 'microsoft' || 'temurin' }}
        java-version: '17'

    - name: Setup Android SDK
      if: ${{ !matrix.container }}
      uses: android-actions/setup-android@07976c6290703d34c16d382cb36445f98bb43b1f # v3.2.0
      with:
        # Exclude "tools" because the emulator is not needed (nor available for Windows/Linux ARM64)
        packages: platform-tools platforms;android-35 platforms;android-36 build-tools;36.0.0
        log-accepted-android-sdk-licenses: false

    # Java 11 is needed by .NET Android
    - name: Install Java 11
      if: ${{ !matrix.container }}
      uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
      with:
        distribution: ${{ runner.os == 'Windows' && runner.arch == 'ARM64' && 'microsoft' || 'temurin' }}
        java-version: '11'

    - name: Install Mono (macOS)
      if: runner.os == 'macOS'
      shell: bash
      # Attempt to install Mono, allowing it to fail silently
      # Then ensure mono is correctly linked, overwriting any conflicting symlinks
      run: |
        brew install mono || true
        brew link --overwrite mono

    - name: Install Mono (Ubuntu)
      if: ${{ runner.os == 'Linux' && !matrix.container }}
      shell: bash
      run: |
        sudo apt install -y mono-devel
        # restore perms for actions/setup-dotnet
        sudo chmod -R a+rw /usr/share/dotnet

    - name: Install .NET SDK
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
      with:
        global-json-file: global.json
        dotnet-version: |
          8.0.x
          9.0.304
          10.0.100-rc.2.25502.107

    # .NET 5.0 does not support ARM64 on macOS
    - name: Install .NET 5.0 SDK
      if: ${{ runner.os != 'macOS' || runner.arch != 'ARM64' }}
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
      with:
        dotnet-version: 5.0.x

    - name: Install .NET Workloads
      shell: bash
      run: |
        pwd
        dotnet workload restore \
          --temp-dir "${{ runner.temp }}" \
          --skip-sign-check

    - name: Inspect Xcode toolchain & actool
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euxo pipefail

        echo "## Selected developer dir"
        xcode-select -p || true

        echo "## Xcode version"
        xcodebuild -version || true

        echo "## Env (suspects):"
        env | grep -E '^(DEVELOPER_DIR|SDKROOT|PATH)=' || true

        echo "## Where is actool?"
        /usr/bin/xcrun --find actool || true
        /usr/bin/xcrun --sdk macosx --find actool || true
        /usr/bin/xcrun --sdk iphoneos --find actool || true

        echo "## Show SDK paths (what xcrun thinks):"
        /usr/bin/xcrun --show-sdk-path --sdk macosx || true
        /usr/bin/xcrun --show-sdk-path --sdk iphoneos || true

        echo "## Does actool actually exist in the selected Xcode?"
        if [[ -n "${DEVELOPER_DIR:-}" ]]; then
          ls -l "${DEVELOPER_DIR}/usr/bin/actool" || true
        else
          # derive DEVELOPER_DIR from xcode-select -p
          DEV=$(/usr/bin/xcode-select -p)
          ls -l "${DEV}/usr/bin/actool" || true
        fi

        echo "## Try xcodebuild with an SDK *name* (not a path):"
        /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -sdk macosx -find actool || true

        echo "## If SDKROOT is set, it can confuse discovery; print then unset and retry:"
        echo "SDKROOT=${SDKROOT:-<unset>}"
        unset SDKROOT || true
        /usr/bin/xcrun --find actool || true
        /usr/bin/xcrun --sdk macosx --find actool || true
